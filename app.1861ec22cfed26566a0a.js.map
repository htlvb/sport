{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./.fable/fable-library.2.3.12/Util.js","webpack:///./.fable/fable-library.2.3.12/Types.js","webpack:///./.fable/fable-library.2.3.12/Reflection.js","webpack:///./.fable/fable-library.2.3.12/Option.js","webpack:///./.fable/fable-library.2.3.12/Int32.js","webpack:///./.fable/fable-library.2.3.12/Long.js","webpack:///./.fable/fable-library.2.3.12/Seq.js","webpack:///./.fable/fable-library.2.3.12/RegExp.js","webpack:///./.fable/fable-library.2.3.12/String.js","webpack:///./.fable/fable-library.2.3.12/Map.js","webpack:///./.fable/fable-library.2.3.12/Set.js","webpack:///./.fable/fable-library.2.3.12/Array.js","webpack:///./.fable/fable-library.2.3.12/List.js","webpack:///.fable/FSharp.Control.AsyncRx.1.0.0/AsyncObserver.fs","webpack:///.fable/Fable.Elmish.Browser.3.0.1/parser.fs","webpack:///.fable/Thoth.Json.3.3.0/Types.fs","webpack:///./.fable/fable-library.2.3.12/BigInt/n.js","webpack:///./.fable/fable-library.2.3.12/lib/big.js","webpack:///./.fable/fable-library.2.3.12/Decimal.js","webpack:///./.fable/fable-library.2.3.12/BigInt/z.js","webpack:///./.fable/fable-library.2.3.12/BigInt.js","webpack:///.fable/Thoth.Json.3.3.0/Decode.fs","webpack:///Common/ParseWorksheet.fs","webpack:///.fable/Fable.FontAwesome.2.0.0/FontAwesome.fs","webpack:///.fable/Fulma.2.1.1/Common.fs","webpack:///.fable/Fulma.2.1.1/Elements/Button.fs","webpack:///.fable/Fulma.2.1.1/Layouts/Container.fs","webpack:///.fable/FSharp.Control.AsyncRx.1.0.0/Types.fs","webpack:///.fable/Fulma.2.1.1/Elements/Heading.fs","webpack:///.fable/Fulma.2.1.1/Elements/Delete.fs","webpack:///.fable/Fulma.2.1.1/Elements/Table.fs","webpack:///./.fable/fable-library.2.3.12/AsyncBuilder.js","webpack:///./.fable/fable-library.2.3.12/Async.js","webpack:///./.fable/fable-library.2.3.12/MailboxProcessor.js","webpack:///.fable/FSharp.Control.AsyncRx.1.0.0/Core.fs","webpack:///.fable/FSharp.Control.AsyncRx.1.0.0/AsyncDisposable.fs","webpack:///.fable/FSharp.Control.AsyncRx.1.0.0/Create.fs","webpack:///.fable/FSharp.Control.AsyncRx.1.0.0/Combine.fs","webpack:///.fable/FSharp.Control.AsyncRx.1.0.0/Subject.fs","webpack:///.fable/FSharp.Control.AsyncRx.1.0.0/Filter.fs","webpack:///.fable/FSharp.Control.AsyncRx.1.0.0/Transform.fs","webpack:///.fable/FSharp.Control.AsyncRx.1.0.0/AsyncObservable.fs","webpack:///.fable/Fable.Promise.2.0.0/Promise.fs","webpack:///.fable/Fable.Fetch.2.0.0/Fetch.fs","webpack:///.fable/Thoth.Fetch.1.0.0/Fetch.fs","webpack:///.fable/Fable.Elmish.3.0.4/ring.fs","webpack:///Common/Utils.fs","webpack:///.fable/Fulma.2.1.1/Elements/Notification.fs","webpack:///.fable/Fable.Elmish.3.0.4/cmd.fs","webpack:///.fable/Fable.Elmish.React.3.0.1/react.fs","webpack:///.fable/Fable.Elmish.Browser.3.0.1/navigation.fs","webpack:///Web/App.fs"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","isDisposable","x","Dispose","Comparer","f","_classCallCheck","this","Compare","compare","comparerFromEqualityComparer","comparer","y","xhash","GetHashCode","yhash","Equals","addToSet","v","set","has","add","dateOffset","date","date1","offset","kind","getTimezoneOffset","int32ToString","radix","toString","ObjectRef","_createClass","idMap","count","stringHash","h","len","charCodeAt","numberHash","combineHashCodes","hashes","reduce","h1","h2","structuralHash","_typeof","isArray","ar","Array","String","ArrayBuffer","isView","equalArraysWith","eq","equalArrays","equals","Date","compareDates","xtime","ytime","getTime","comparePrimitives","compareArraysWith","comp","compareArrays","CompareTo","max","WeakMap","CaseRules","None","LowerFirst","changeCase","str","caseRule","charAt","toLowerCase","createObj","fields","fail","kvPair","Error","definedCaseRule","arguments","undefined","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","iterator","next","done","toJSON","err","return","round","digits","Math","pow","toFixed","floor","CURRIED_KEY","uncurry","arity","uncurriedFn","a1","a2","a3","a4","a5","a6","a7","a8","curry","partialApply","args","concat","sameType","getPrototypeOf","constructor","declare","cons","superClass","subClass","writable","configurable","inherits","SystemObject","compareList","self","other","tail","res","head","List","Union","tag","_len","_key","recordToJson","record","getFieldNames","keys","recordEquals","thisNames","recordCompare","Record","_this","map","k","join","id","identityHash","from","cur","tmp","_this2","_this3","contents","Exception","msg","stack","message","getFSharpExceptionFieldNames","filter","FSharpException","_this4","fieldNames","_this5","arg1","arg2","arg3","CaseInfo","declaringType","Reflection_classCallCheck","TypeInfo","fullname","generics","cases","fullName","getGenerics","t1","t2","type","union","option","generic","list","string","int32","float64","gen","endsWith","assertUnion","Some","Option_classCallCheck","some","acceptNull","defaultArg","arg","defaultValue","field","NumberStyles","Result","mapOk","mapError","getRange","unsigned","bitsize","isValid","style","exec","replace","_res","Int32_slicedToArray","prefix","getInvalidDigits","AllowHexSpecifier","getRadix","test","regexMatch","_regexMatch","sign","validResponse","parse","Number","parseInt","isNaN","_getRange2","umin","umax","_getRange4","min","tryParse","_a","op_UnaryNegation_Int32","wasm","WebAssembly","Instance","Module","Uint8Array","e","Long","low","high","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","op_UnaryNegation","TWO_PWR_32_DBL","fromInteger","xh","lowBits","highBits","pow_dbl","fromString","RangeError","indexOf","substring","radixToPower","size","op_Addition","op_Multiply","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","toInt","$this","toNumber","isZero","isNegative","radixLong","div","op_Division","rem1","op_Subtraction","rem","remDiv","isOdd","lessThan","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","op_LogicalNot","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtrahend","multiplier","mul","get_high","b00","divisor","approx","div_u","div_s","toUnsigned","numBits","op_RightShiftUnsigned","op_LeftShift","op_RightShift","log2","ceil","log","LN2","delta","approxRes","approxRem","op_Modulus","rem_u","rem_s","op_BitwiseAnd","fromBytes","bytes","le","fromBytesLE","fromBytesBE","Enumerator","iter","Seq_classCallCheck","current","getEnumerator","toIterator","en","MoveNext","Current","append","xs","ys","delay","firstDone","iters","unfold","output","innerIter","hasFinished","collect","_defineProperty","empty","fold","acc","fold2","cur1","cur2","iter1","iter2","initializeInfinite","iterate","_","rangeNumber","first","step","last","singleton","skip","take","truncate","fst","pattern","options","flags","RegExp","fsFormatRegExp","toHex","longToString","longFromBytes","hi","lo","toBytesLE","toBytesBE","printf","input","cont","createPrinter","strCopy","_len2","_key2","_i","_args","formatOnce","toText","str2","rep","pad","precision","format","toPrecision","toExponential","toUpperCase","plusPrefix","ch","padLeft","abs","delimiter","_len4","_key4","isRight","MapTree$00602","MapTreeModule$$$size","MapTreeModule$$$sizeAux","MapTreeModule$$$empty","MapTreeModule$$$height","_arg1","MapTreeModule$$$mk","l$$1","r$$1","matchValue","hl","hr","MapTreeModule$$$rebalance","k$$1","v$$1","t1h","t2h","t2v","t2r","t2l","t2k","t2lv","t2lr","t2ll","t2lk","t1v","t1r","t1l","t1k","t1rv","t1rr","t1rl","t1rk","MapTreeModule$$$add","k$$2","v$$2","m$$3","k2","v2","r$$2","l$$2","k2$$1","h$$1","c$$1","MapTreeModule$$$remove","comparer$$9","k$$11","m$$7","k2$$8","v2$$7","r$$8","l$$8","k2$$9","c$$7","matchValue$$1","patternInput$$1","MapTreeModule$$$spliceOutSuccessor","m$$6","v2$$5","v2$$6","r$$7","l$$7","k2$$7","patternInput","MapTreeModule$$$ofSeq","comparer$$16","c$$9","ie","comparer$$14","acc$$10","patternInput$$2","$acc$$10$$77","$comparer$$14$$76","$e$$78","MapTreeModule$$$mkFromEnumerator","MapTreeModule$002EMapIterator$00602","started","MapTreeModule$$$collapseLHS","$stack$$81","MapTreeModule$$$mkIterator","s$$5","MapTreeModule$$$current","i$$2","matchValue$$4","MapTreeModule$$$alreadyFinished","MapTreeModule$$$notStarted","MapTreeModule$002EmkIEnumerator$0027$00602","s$$6","MapTreeModule$$$mkIEnumerator","s$$7","MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C","i$$3","matchValue$$5","MapTreeModule$$$moveNext","Reset","FSharpMap","comparer$$17","tree","FSharpMap$$$$002Ector$$58ADD115","FSharpMap$$get_Tree","__$$5","FSharpMap$$Add$$5BDDA1","__$$6","k$$28","v$$24","FSharpMap$$get_Count","__$$20","FSharpMap$$Remove$$2B595","__$$22","k$$32","ofSeq","l$$23","comparer$$19","comparer$$21","Map_toConsumableArray","map$$1","kv","combineHash","x$$16","y$$3","res$$3","e$$1","activePatternResult3097","that","m2","res$$4","finished","e1","e2","matchValue$$7","kvp1","kvp2","c$$10","SetTree$00601","SetTreeModule$$$count","s$$1","SetTreeModule$$$countAux","SetTreeModule$$$SetOne","SetTreeModule$$$SetNode","SetTreeModule$$$height","SetTreeModule$$$tolerance","SetTreeModule$$$mk","SetTreeModule$$$rebalance","SetTreeModule$$$add","t$$1","r$$3","l$$3","SetTreeModule$$$remove","comparer$$3","k$$4","t$$4","k2$$6","r$$5","l$$5","c$$5","matchValue$$2","patternInput$$3","SetTreeModule$$$spliceOutSuccessor","t$$3","r$$4","l$$4","k2$$5","SetTreeModule$$$mem","comparer$$4","k$$5","t$$5","r$$6","l$$6","c$$6","SetTreeModule$002ESetIterator$00601","SetTreeModule$$$collapseLHS","$stack$$49","SetTreeModule$$$mkIterator","s$$13","SetTreeModule$$$current","matchValue$$6","SetTreeModule$$$alreadyFinished","SetTreeModule$$$notStarted","SetTreeModule$002EmkIEnumerator$00601","s$$14","SetTreeModule$$$mkIEnumerator","s$$15","SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56","SetTreeModule$$$toSeq","s$$16","en$$1","SetTreeModule$$$compare","comparer$$18","s1","s2","matchValue$$9","l1","l2","SetTreeModule$$$compareStacks","$target$$52","t1$$6","t2$$6","n1k","n2k","t1$$7","t2$$7","n1k$$1","n2k$$1","n2r","t1$$8","t2$$8","emp","n1k$$2","n1r","n2k$$2","t1$$9","t2$$9","n1k$$3","n1r$$1","n2k$$3","n2r$$1","t1$$10","t2$$10","n1k$$4","t1$$11","n1k$$5","n1l","n1r$$2","t1$$12","n2k$$4","t2$$11","n2k$$5","n2l","n2r$$2","t2$$12","matchValue$$8","c$$8","$l2$$59","$l2$$61","SetTreeModule$$$ofSeq","comparer$$20","c$$11","acc$$11","$acc$$11$$68","$comparer$$19$$67","$e$$69","SetTreeModule$$$mkFromEnumerator","i$$1","SetTreeModule$$$moveNext","FSharpSet","comparer$$22","FSharpSet$$get_Comparer","__$$4","FSharpSet$$get_Tree","createMutable","source","comparer$$32","comparer$$31","tree$0027","tree$$1","Set_defineProperty","_ref","x$$33","add_","x$$34","clear","delete","x$$35","x$$36","values","fill","target","targetIndex","initialize","count$$8","initializer","cons$$15","result$$6","i$$15","folder$$4","state$$6","array$$74","ofList","source$$9","cons$$32","tryLast","_arg1$$4","foldIndexed","f$$1","state","xs$$7","$arg$$7","$arg$$8","$arg$$9","$arg$$10","_arg1$$5","xs$$6","foldIndexedAux","$arg$$14","$arg$$15","$arg$$16","f$$2","state$$1","xs$$8","reverse","xs$$9","acc$$1","x$$6","xs$$12","fold$$1","acc$$3","x$$9","f$$7","state$$5","xs$$18","ys$$5","fold2$$1","xs$$27","acc$$9","_arg1$$7","xs$$28","ys$$10","x$$15","f$$15","xs$$29","collect$$1","f$$16","xs$$31","indexed","xs$$35","f$$17","i$$4","x$$18","xs$$33","acc$$12","x$$17","f$$24","xs$$46","unitVar0","x$$24","ofArray","xs$$50","col","res$$1","i$$9","f$$42","xs$$71","acc$$17","x$$37","zip","xs$$85","ys$$19","f$$18","x$$47","y$$15","xs$$36","ys$$11","acc$$13","x$$19","y$$4","sortBy","projection","xs$$90","xs$$91","sort","x$$50","y$$18","sortByDescending","projection$$1","xs$$96","comparer$$7","xs$$97","x$$52","y$$20","takeSplitAux","error","i$$21","acc$$25","xs$$117","matchValue$$12","xs$$118","takeWhile","predicate$$1","xs$$121","i$$26","xs$$123","$target$$185","i$$29","xs$$124","matchValue$$14","distinct","xs$$132","eq$$3","projection$$4","x$$68","xs$$130","hashSet","$arg$$1","Set_toConsumableArray","x$$22","that$$1","visited","unvisited","State$00601","subValue","inner","List_map","( arg10@ )","parser","url","states","rest","parseHelp","List_ofArray","split","$target$$16","segments","splitUrl","segment","comparer$$12","array1$$6","array2$$6","i$$43","result$$13","length1","length2","compareWith","a","b","$target$$1","Option_value","prelude_tuple","ofFunc","decodeURI","querystring","Seq_map","toKeyValuePair","substr","Map","( .ctor )","BigNat","bound","BigNatModule$002EFFT$$$pow32","BigNatModule$002EFFT$$$maxTwoPower","Int32Array","BigNatModule$$$bound","n$$10","BigNatModule$$$coeff","n$$12","i$$5","BigNatModule$$$coeff64","n$$13","i$$6","BigNatModule$$$setCoeff","n$$14","i$$7","v$$4","BigNatModule$$$pow64","x$$23","n$$15","$n$$15$$11","BigNatModule$$$pow32","n$$16","BigNatModule$$$baseBits","BigNatModule$$$baseN","BigNatModule$$$baseNi64","BigNatModule$$$baseMaski64","BigNatModule$$$createN","b$$4","BigNatModule$$$normN","n$$18","bound$$1","na","findLeastBound","BigNatModule$$$boundInt","BigNatModule$$$boundInt64","BigNatModule$$$embed","x$$28","x$$29","i$$10","BigNatModule$$$one","BigNatModule$$$zero","BigNatModule$$$degree","n$$24","BigNatModule$$$isZero","p$$4","BigNatModule$$$equal","p$$7","q$$4","pa","qa","i$$22","check","BigNatModule$$$compare","p$$9","q$$6","pa$$2","qa$$2","i$$24","check$$2","BigNatModule$$$lt","p$$10","q$$7","BigNatModule$$$mulSchoolBookCarry","r$$12","rak$$1","$k$$4$$43","BigNatModule$$$mulSchoolBookOneSmall","p$$16","q$$12","bp","r$$13","q$$13","i$$28","rak$$2","BigNatModule$$$mulSchoolBook","p$$18","q$$15","p$$15","q$$11","r$$11","rak","pSmall","qSmall","p$$17","q$$14","r$$14","ra","pa$$3","qa$$3","pai$$1","j$$1","qaj","rak$$3","BigNatModule$$$mulSchoolBookNeitherSmall","BigNatModule$002Eencoding","arg4","arg5","arg6","arg7","bigL","twoToBigL","bigK","bigN","splits","BigNatModule$$$mkEncoding","k$$6","bigK$$2","i$$30","BigNatModule$$$table","i$$32","i$$33","i$$34","BigNatModule$$$mul","p$$20","q$$17","BigNatModule$$$scaleSubInPlace","x$$57","a$$5","n$$30","xres","j$$4","z$$7","zLo","zHi","BigNatModule$$$scaleAddInPlace","x$$62","f$$3","a$$8","n$$32","xres$$1","patternInput$$4","patternInput$$5","f$$4","j$$5","z$$8","zLo$$1","zHi$$1","BigNatModule$$$removeFactor","x$$67","a$$11","n$$34","patternInput$$6","f$$6","p$$8","pn","q$$5","qn","patternInput$$7","pa$$1","qa$$1","i$$23","pai","qai","check$$1","BigNatModule$$$divmod","b$$7","a$$12","x$$27","array$$29","d$$6","p$$21","m$$2","n$$35","BigNatModule$$$ofInt32","n$$41","BigNatModule$$$ofInt64","n$$42","x$$30","x$$31","i$$11","BigNatModule$$$embed64","BigNatModule$$$toString","n$$45","degn","prior$$2","prior","ten2k","$k$$11$$64","$ten2k$$65","route","digits$$4","isLeading","n$$46","_arg1$$3","ten2k$$1","prior$$1","patternInput$$13","digits$$2","n$$47","n$$19","i$$12","BigNatModule$$$eval32","n_toConsumableArray","BigNatModule$$$isSmall","n$$48","BigNatModule$$$getSmall","n$$49","P","cmp","DP","RM","MAX_DP","NE","PE","NAME","INVALID","INVALID_DP","INVALID_RM","UNDEFINED","NUMERIC","nl","search","Big","dp","rm","more","xc","unshift","pop","stringify","z","isneg","yc","bl","bt","ri","bz","ai","al","rl","q","qc","qi","gt","gte","lt","lte","minus","sub","xlty","plus","xe","ye","mod","ygtx","times","one","sqrt","half","sd","valueOf","_Big_","findIndex","normalize","version","Decimal","BigInteger","signInt","BigInteger$$$$002Ector$$Z2BE94A1","BigInteger$$$nat$$Z67CCE57D","n$$1","BigNatModule$0024$0024$0024isSmall","BigNatModule$0024$0024$0024getSmall","smallLim","smallPosTab","BigInteger$$get_SignInt","x$$1","BigInteger$$get_V","x$$2","BigInteger$$$op_Equality$$56F059C0","x$$3","BigNatModule$0024$0024$0024equal","BigNatModule$0024$0024$0024isZero","BigInteger$$$op_LessThan$$56F059C0","x$$5","y$$2","BigNatModule$0024$0024$0024lt","BigInteger$$$$002Ector$$Z524259A4","n$$6","BigNatModule$0024$0024$0024ofInt32","BigNatModule$0024$0024$0024ofInt64","BigInteger$$$get_One","BigInteger$$$get_Two","two","BigInteger$$$get_Zero","zero","BigNatModule$0024$0024$0024toString","n$$17","res$$2","i$$8","BigNatModule$0024$0024$0024hash","obj$$1","n$$5","nn","BigInteger$0024$0024$0024get_Zero","BigInteger$0024$0024$0024get_One","BigInteger$0024$0024$0024get_Two","newLine","JSON","path","reason","genericMsg","fieldName","messages","Decode_toConsumableArray","decoder","clo1","arg10","Option_Result","errorToString","success","SyntaxError","ErrorReason","er","currentPath","List_tryLast","arg0","tokens","List_reverse","Array_fold","_arg2","cb","errors","unwrapWith","$this$$3","fieldValue","isUndefined","firstPath","firstValue","List_fold","tupledArg","badPathError","curValue","decodeMaybeNull","optional","$target$$125","v$$6","builder","getters","List_ofSeq","List_length","__","required","text","reg","lastIndex","RegExp_match","Class","Level","ParallelClass","Type","Department","andThen","( arg20@ )","succeed","Decode_string","Student","Required","Field","student","LastName","toLocaleUpperCase","FirstName","Discipline","Performance","Decode_option","float$","int$","StudentPerformances","Decode_list","ClassPerformances","std","booleans","complete","opt","HTMLAttr","faOptions","Fa$002EIconOptions","Icon","Size","Pull","HaveSpin","HavePulse","Rotation","Flip","IsInverse","Props","FixedWidth","IsLi","StackSize","CustomClass","Border","faIcon","props","customClass","ofSize","baseElement","baseClass","opts","children","classes","displayIcon","react","FontAwesome_toConsumableArray","toIconOptions","case","screen","getCaseName","level","getCaseTag","x$$4","ofText","ToString","console","warn","display","toDisplayOnlyClass","ofInvisibleOnly","ofHiddenOnly","ofBackground","baseProps","Common$002EGenericOptions","AddClass","AddProps","prop","Classes","List_append","cl","modifiers","parseModifiers","el","Common_toConsumableArray","AddModifiers","element","Common$002EGenericOptions$$ToReactElement$$Z6D3CD4B7","Common$002EGenericOptions$$$Parse$$9AE2F7C","$target$$4","Common$002EGenericOptions$$AddClass$$Z721C83C5","Color$$$ofColor","Reflection$$$getCaseName","Common$002EGenericOptions$$AddCaseName$$1505","isDisabled","Common$002EGenericOptions$$AddProp$$7BFEDA81","DOMAttr","Common$002EGenericOptions$$AddProps$$416C4D0B","Common$002EGenericOptions$$AddModifiers$$5BB435D5","Container_toConsumableArray","Section_toConsumableArray","List_filter","cls","Heading_Option","title","Heading_toConsumableArray","Delete_toConsumableArray","Table_toConsumableArray","CancellationToken","cancelled","AsyncBuilder_classCallCheck","_id","_cancelled","_listeners","AsyncBuilder_createClass","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","listener","AsyncBuilder_slicedToArray","$","addListener","removeListener","OperationCanceledError","_Error","_getPrototypeOf","setPrototypeOf","_assertThisInitialized","_inherits","_wrapNativeSuper","Trampoline","callCount","maxTrampolineCallCount","setTimeout","protectedCont","ctx","cancelToken","isCancelled","onCancel","trampoline","incrementAndCheck","hijack","onError","protectedBind","computation","binder","onSuccess","ex","protectedReturn","AsyncBuilder","computation1","computation2","Bind","generator","sequence","body","While","Delay","compensation","catchHandler","ex2","resource","TryFinally","guard","Return","fn","Notification$00601","emptyContinuation","createCancellationToken","token","cancel","awaitPromise","fromContinuations","conts","then","catch","defaultCancellationToken","startImmediate","cancellationToken","startWithContinuations","start","continuation","exceptionContinuation","cancellationContinuation","QueueCell","MailboxProcessor_classCallCheck","MailboxQueue","itCell","firstAndLast","MailboxProcessor","__processEvents","tryGet","receive","post","mbox","cts","DisposeAsync","AsyncBuilder_singleton","Async_cancel","Zero","obv","agent","MailboxProcessor_start","inbox","messageLoop","stopped","Combine","ReturnFrom","OnErrorAsync","OnCompletedAsync","TryWith","OnNextAsync","_arg3","_arg7","stop","worker","aobv","canceller","safeObv","Core_safeObserver","Microsoft$002EFSharp$002EControl$002EFSharpAsync$$Async$002EStart$0027$002EStatic$$Z9539AF9","AsyncDisposable$$$get_Empty","ofAsyncWorker","For","maxConcurrent","subscribeAsync","initialModel","Model$00601","Map_empty","Msg$00601","model","_arg9","subscriptions","Subscriptions","Queue","SubscribeAsync","Key","_arg4","IsStopped","activePatternResult4315","_arg10","newModel","_arg12","dispose","AsyncDisposable$$$Create$$Z56C29B26","sources","mergeInner","Create_ofSeq","obvs","mb","_arg5","sobv","item$$2","array$$47","i$$20","mbSubject","chooser","obvAsync","_obv","safeObserver","latest","err$$1","latest'","AsyncObserver$00601$$$$002Ector$$Z489C0990","mapperAsync","mapper","mapAsync","innerAgent","cmd","idx","nextId","InnerSubscriptionCmd$00601","_arg11","handler","disposable","action","nextSource","subscribe","Create_create","chooseAsync","distinctUntilChanged","switchLatest","Transform_map","subject","f1","f2","Promise","reject","resolve","init","fetch","response","ok","status","statusText","PromiseBuilder$$$$002Ector","properties","PromiseBuilder$$Run$$212F1D4B","PromiseImpl_promise","PromiseBuilder$$Delay$$62FBFDE1","fetch$","Decode_fromString","pr","List_collect","classPerformances","studentPerformances","CalculatedStudentPerformances","Performances","f$$53","Points","xs$$103","acc$$22","x$$54","adder$$1","Add","GetZero","$x$$1","$y$$2","ClassModule$$$toString","Achtkampf_init","Model","LoadedModel","Data","StudentsToCompare","SelectedGroup","itemsToExclude","array$$2","eq$$1","cached","arg00","List_except","Group","dispatch","group","List_truncate","List_takeWhile","TotalPoints","List_sortByDescending","schoolClass","List_sortBy","fromData","disciplines","List_distinct","performance","groups","xs$$87","$x$$13","$y$$14","comparer$$1","xs$$88","x$$49","y$$17","tableHeader","Achtkampf_toConsumableArray","colSpan","discipline","Name","Fa$$$i","Fa$002EIconOption","Seq_collect","Measurement","studentPerformanceRow","clo1$$2","MeasurementValue","clo1$$3","section","container","List$002EOption","Option","_ev","Msg","Color$002EIColor","btnView","Button_toConsumableArray","delete$","Delete_Option","marginLeft","verticalAlign","table","TableOption","studentRow","justifyContent","alignItems","StudentModule$$$fullName","diffColPoints","v1","className","diffColsPerformance","p1","p2","p1Points","p2Points","p1Value","p2Value","i2","i1","List_zip","xs$$139","$target$$199","x1$$2","x2$$2","xs$$142","xs$$140","acc$$27","x1$$1","xs$$141","x2$$1","acc$$28","clo2","arg20","List_pairwise","List_indexed","Notification_toConsumableArray","overflowX","xs$$76","loop$$1","List_contains","Container_Option","Modifier$002EIModifier","Screen","TextAlignment$002EOption","Fa$002EISize","msgs","loadAchtkampfData","$arg$$24","single","FetchError","ofPromise","Fetch$$$tryFetchAs$$3D61DA8C","ClassPerformancesModule$$$decoder","catch$","AsyncRx$$$mergeSeq","AsyncRx$$$map","AsyncRx$$$flatMapLatest","$arg$$25","AsyncRx$$$empty","item","Navbar_toConsumableArray","Common$$$parseOptions","List_iterate","g","$arg$$2","cmds","lists","state$$3","xs$$14","acc$$4","x$$10","RingState$00601","wix","rix","items","rix'","ix","source$$8","wix'","setState","program","Program$00604","update","view","syncDispatch","mapInit","mapUpdate","mapView","mapSetState","mapSubscribe","rb","RingBuffer$00601$$$$002Ector$$Z524259A4","reentered","RingBuffer$00601$$Push$$2B595","nextMsg","Cmd$$$exec","RingBuffer$00601$$Pop","Cmd$$$none","lastLocation","onChangeRef","location","href","Navigable$00601","addEventListener","equal","Components$002ELazyView$00601","LazyProps$00601","lazyView2With","placeholderId","lastRequest","ProgramModule$$$withSetState","cancelAnimationFrame","requestAnimationFrame","react_dom","ProgramModule$$$view","document","getElementById","nextProps","_nextState","render","page","parsers","parser_map","Page","mkState","oneOf","urlUpdate","onLocationChange","stream","msgObserver","initState","hasSubscription","App_Model","NavigationError","Achtkampf","CurrentPage","Achtkampf_update","header","Item$$$a","Item$002EOption","width","brand","App_toConsumableArray","Achtkampf_view","Web_App_Msg","navigationErrors","AsyncRx$$$choose","AsyncRx$$$distinctUntilChanged","navigationPages","$arg$$3","concatSeq","modifyUrl","AsyncRx$$$create","observer","newUrl","$arg$$4","history","replaceState","Achtkampf_stream","hash","parseParams","parseHash","pageParser","prelude_onError","AsyncRx$$$subject","ProgramModule$$$map","dispatch'","$x$$2","Cmd$$$map","userInit","unitVar1","userUpdate","userView","userSetState","userSubscribe","Cmd$$$batch","runWith","withReactBatchedUsing","Common$$$lazyView2With"],"mappings":"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","file":"app.1861ec22cfed26566a0a.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([4,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// tslint:disable:ban-types\n// Object.assign flattens getters and setters\n// See https://stackoverflow.com/questions/37054596/js-es5-how-to-assign-objects-with-setters-and-getters\nexport function extend(target, ...sources) {\n    for (const source of sources) {\n        for (const key of Object.keys(source)) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        }\n    }\n    return target;\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (typeof comparer.Compare === \"function\") {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\n// TODO: Move these three methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    return map.has(key) ? [true, map.get(key)] : [false, defaultValue];\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (typeof x.GetHashCode === \"function\") {\n                return x.GetHashCode();\n            }\n            else if (isArray(x)) {\n                const ar = x;\n                const len = ar.length;\n                const hashes = new Array(len);\n                for (let i = 0; i < len; i++) {\n                    hashes[i] = structuralHash(ar[i]);\n                }\n                return combineHashCodes(hashes);\n            }\n            else {\n                return stringHash(String(x));\n            }\n        }\n    }\n}\nexport function isArray(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\n// export function equalObjects(x: { [k: string]: any }, y: { [k: string]: any }): boolean {\n//   if (x == null) { return y == null; }\n//   if (y == null) { return false; }\n//   const xKeys = Object.keys(x);\n//   const yKeys = Object.keys(y);\n//   if (xKeys.length !== yKeys.length) {\n//     return false;\n//   }\n//   xKeys.sort();\n//   yKeys.sort();\n//   for (let i = 0; i < xKeys.length; i++) {\n//     if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (typeof x.Equals === \"function\") {\n        return x.Equals(y);\n    }\n    else if (isArray(x)) {\n        return isArray(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return false;\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nexport function compareObjects(x, y) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (typeof x.CompareTo === \"function\") {\n        return x.CompareTo(y);\n    }\n    else if (isArray(x)) {\n        return isArray(y) && compareArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y);\n    }\n    else {\n        return 1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value) => {\n        if (value === void 0) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n};\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function createObj(fields, caseRule = CaseRules.None) {\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + String(kvPair));\n    }\n    const o = {};\n    const definedCaseRule = caseRule;\n    for (let kvPair of fields) {\n        let caseRule = CaseRules.None;\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        // Deflate unions and use the defined case rule\n        if (typeof kvPair.toJSON === \"function\") {\n            kvPair = kvPair.toJSON();\n            caseRule = definedCaseRule;\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    o[changeCase(kvPair[0], caseRule)] = true;\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    o[changeCase(kvPair[0], caseRule)] = value;\n                    break;\n                default:\n                    o[changeCase(kvPair[0], caseRule)] = kvPair.slice(1);\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            o[changeCase(kvPair, caseRule)] = true;\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return o;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function randomBytes(buffer) {\n    if (buffer == null) {\n        throw new Error(\"Buffer cannot be null\");\n    }\n    for (let i = 0; i < buffer.length; i += 6) {\n        // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.\n        let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.\n        const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.\n        for (let j = 0; j < 6 && i + j < buffer.length; j++) {\n            if (j === 3) {\n                r = rhi;\n            }\n            buffer[i + j] = r & 255;\n            r >>>= 8;\n        }\n    }\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    return isArray(col) ? col.length : col.size;\n}\nexport function clear(col) {\n    if (isArray(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED_KEY = \"__CURRIED__\";\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null) {\n        return null;\n    }\n    // The function is already uncurried\n    if (f.length > 1) {\n        //   if (CURRIED_KEY in f) { // This doesn't always work\n        return f;\n    }\n    let uncurriedFn;\n    switch (arity) {\n        case 2:\n            uncurriedFn = (a1, a2) => f(a1)(a2);\n            break;\n        case 3:\n            uncurriedFn = (a1, a2, a3) => f(a1)(a2)(a3);\n            break;\n        case 4:\n            uncurriedFn = (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n            break;\n        case 5:\n            uncurriedFn = (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n            break;\n        case 6:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n            break;\n        case 7:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n            break;\n        case 8:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n            break;\n        default:\n            throw new Error(\"Uncurrying to more than 8-arity is not supported: \" + arity);\n    }\n    uncurriedFn[CURRIED_KEY] = f;\n    return uncurriedFn;\n}\nexport function curry(arity, f) {\n    if (f == null) {\n        return null;\n    }\n    if (CURRIED_KEY in f) {\n        return f[CURRIED_KEY];\n    }\n    switch (arity) {\n        case 2:\n            return (a1) => (a2) => f(a1, a2);\n        case 3:\n            return (a1) => (a2) => (a3) => f(a1, a2, a3);\n        case 4:\n            return (a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4);\n        case 5:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5);\n        case 6:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6);\n        case 7:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7);\n        case 8:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8);\n        default:\n            throw new Error(\"Currying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return null;\n    }\n    else if (CURRIED_KEY in f) {\n        f = f[CURRIED_KEY];\n        for (var i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        switch (arity) {\n            case 1:\n                // Wrap arguments to make sure .concat doesn't destruct arrays. Example\n                // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails\n                // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok\n                return (a1) => f.apply(null, args.concat([a1]));\n            case 2:\n                return (a1) => (a2) => f.apply(null, args.concat([a1, a2]));\n            case 3:\n                return (a1) => (a2) => (a3) => f.apply(null, args.concat([a1, a2, a3]));\n            case 4:\n                return (a1) => (a2) => (a3) => (a4) => f.apply(null, args.concat([a1, a2, a3, a4]));\n            case 5:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => f.apply(null, args.concat([a1, a2, a3, a4, a5]));\n            case 6:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6]));\n            case 7:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6, a7]));\n            case 8:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6, a7, a8]));\n            default:\n                throw new Error(\"Partially applying to more than 8-arity is not supported: \" + arity);\n        }\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return function (arg) {\n                return mapArg(res, arg, mappings, idx + 1);\n            };\n        }\n    }\n    return function (arg) {\n        return mapArg(fn, arg, mappings, 0);\n    };\n}\nexport function addToDict(dict, k, v) {\n    if (dict.has(k)) {\n        throw new Error(\"An item with the same key has already been added. Key: \" + k);\n    }\n    dict.set(k, v);\n}\nexport function getItemFromDict(map, key) {\n    if (map.has(key)) {\n        return map.get(key);\n    }\n    else {\n        throw new Error(`The given key '${key}' was not present in the dictionary.`);\n    }\n}\n","import { combineHashCodes, compare, compareArrays, equals, equalArrays, identityHash, structuralHash, numberHash } from \"./Util\";\nfunction sameType(x, y) {\n    return y != null && Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\n// Taken from Babel helpers\nfunction inherits(subClass, superClass) {\n    // if (typeof superClass !== \"function\" && superClass !== null) {\n    //   throw new TypeError(\n    //     \"Super expression must either be null or a function, not \" +\n    //       typeof superClass\n    //   );\n    // }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true,\n        },\n    });\n    // if (superClass)\n    //   Object.setPrototypeOf\n    //     ? Object.setPrototypeOf(subClass, superClass)\n    //     : (subClass.__proto__ = superClass);\n}\nexport function declare(cons, superClass) {\n    inherits(cons, superClass || SystemObject);\n    return cons;\n}\nexport function SystemObject() {\n}\nSystemObject.prototype.toString = function () {\n    return \"{\" + Object.keys(this).map(k => k + \" = \" + String(this[k])).join(\";\\n \") + \"}\";\n};\nSystemObject.prototype.GetHashCode = function () {\n    return identityHash(this);\n};\nSystemObject.prototype.Equals = function (other) {\n    return this === other;\n};\nfunction compareList(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else {\n        if (other == null) {\n            return -1;\n        }\n        while (self.tail != null) {\n            if (other.tail == null) {\n                return 1;\n            }\n            const res = compare(self.head, other.head);\n            if (res !== 0) {\n                return res;\n            }\n            self = self.tail;\n            other = other.tail;\n        }\n        return other.tail == null ? 0 : -1;\n    }\n}\nexport function List(head, tail) {\n    this.head = head;\n    this.tail = tail;\n}\nList.prototype.toString = function () {\n    return \"[\" + Array.from(this).map(x => String(x)).join(\"; \") + \"]\";\n};\nList.prototype.toJSON = function () {\n    return Array.from(this);\n};\nList.prototype[Symbol.iterator] = function () {\n    let cur = this;\n    return {\n        next: () => {\n            const tmp = cur;\n            cur = cur.tail;\n            return { done: tmp.tail == null, value: tmp.head };\n        },\n    };\n};\nList.prototype.GetHashCode = function () {\n    const hashes = Array.from(this).map(structuralHash);\n    return combineHashCodes(hashes);\n};\nList.prototype.Equals = function (other) {\n    return compareList(this, other) === 0;\n};\nList.prototype.CompareTo = function (other) {\n    return compareList(this, other);\n};\nexport function Union(tag, name, ...fields) {\n    this.tag = tag | 0;\n    this.name = name;\n    this.fields = fields;\n}\nUnion.prototype.toString = function () {\n    const len = this.fields.length;\n    if (len === 0) {\n        return this.name;\n    }\n    else if (len === 1) {\n        return this.name + \" \" + String(this.fields[0]);\n    }\n    else {\n        return this.name + \" (\" + this.fields.map(x => String(x)).join(\",\") + \")\";\n    }\n};\nUnion.prototype.toJSON = function () {\n    return this.fields.length === 0\n        ? this.name\n        : [this.name].concat(this.fields);\n};\nUnion.prototype.GetHashCode = function () {\n    let hashes = this.fields.map(x => structuralHash(x));\n    hashes.splice(0, 0, numberHash(this.tag));\n    return combineHashCodes(hashes);\n};\nUnion.prototype.Equals = function (other) {\n    return this === other\n        || (sameType(this, other)\n            && this.tag === other.tag\n            && equalArrays(this.fields, other.fields));\n};\nUnion.prototype.CompareTo = function (other) {\n    if (this === other) {\n        return 0;\n    }\n    else if (!sameType(this, other)) {\n        return -1;\n    }\n    else if (this.tag === other.tag) {\n        return compareArrays(this.fields, other.fields);\n    }\n    else {\n        return this.tag < other.tag ? -1 : 1;\n    }\n};\nfunction recordToJson(record, getFieldNames) {\n    const o = {};\n    const keys = getFieldNames == null ? Object.keys(record) : getFieldNames(record);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = record[keys[i]];\n    }\n    return o;\n}\nfunction recordEquals(self, other, getFieldNames) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameType(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = getFieldNames == null ? Object.keys(self) : getFieldNames(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompare(self, other, getFieldNames) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameType(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = getFieldNames == null ? Object.keys(self) : getFieldNames(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport function Record() {\n}\nRecord.prototype.toString = function () {\n    return \"{\" + Object.keys(this).map(k => k + \" = \" + String(this[k])).join(\";\\n \") + \"}\";\n};\nRecord.prototype.toJSON = function () {\n    return recordToJson(this);\n};\nRecord.prototype.GetHashCode = function () {\n    const hashes = Object.keys(this).map(k => structuralHash(this[k]));\n    return combineHashCodes(hashes);\n};\nRecord.prototype.Equals = function (other) {\n    return recordEquals(this, other);\n};\nRecord.prototype.CompareTo = function (other) {\n    return recordCompare(this, other);\n};\nexport function anonRecord(o) {\n    return Object.assign(Object.create(Record.prototype), o);\n}\nexport const FSharpRef = declare(function FSharpRef(contents) {\n    this.contents = contents;\n}, Record);\n// EXCEPTIONS\nexport const Exception = declare(function Exception(msg) {\n    this.stack = Error().stack;\n    this.message = msg;\n});\nexport function isException(x) {\n    return x instanceof Error || x instanceof Exception;\n}\nfunction getFSharpExceptionFieldNames(self) {\n    return Object.keys(self).filter(k => k !== \"message\" && k !== \"stack\");\n}\nexport const FSharpException = declare(function FSharpException() {\n    Exception.call(this);\n}, Exception);\nFSharpException.prototype.toString = function () {\n    const fieldNames = getFSharpExceptionFieldNames(this);\n    const len = fieldNames.length;\n    if (len === 0) {\n        return this.message;\n    }\n    else if (len === 1) {\n        return this.message + \" \" + String(this[fieldNames[0]]);\n    }\n    else {\n        return this.message + \" (\" + fieldNames.map(k => String(this[k])).join(\",\") + \")\";\n    }\n};\nFSharpException.prototype.toJSON = function () {\n    return recordToJson(this, getFSharpExceptionFieldNames);\n};\nFSharpException.prototype.GetHashCode = function () {\n    const hashes = getFSharpExceptionFieldNames(this).map(k => structuralHash(this[k]));\n    return combineHashCodes(hashes);\n};\nFSharpException.prototype.Equals = function (other) {\n    return recordEquals(this, other, getFSharpExceptionFieldNames);\n};\nFSharpException.prototype.CompareTo = function (other) {\n    return recordCompare(this, other, getFSharpExceptionFieldNames);\n};\nexport const MatchFailureException = declare(function MatchFailureException(arg1, arg2, arg3) {\n    this.arg1 = arg1;\n    this.arg2 = arg2 | 0;\n    this.arg3 = arg3 | 0;\n    this.message = \"The match cases were incomplete\";\n}, FSharpException);\nexport const Attribute = declare(function Attribute() { });\n","import { Record, Union, anonRecord as makeAnonRecord } from \"./Types\";\nimport { compareArraysWith, equalArraysWith } from \"./Util\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, constructor, fields, cases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.constructor = constructor;\n        this.fields = fields;\n        this.cases = cases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n    CompareTo(other) {\n        return compare(this, other);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function equals(t1, t2) {\n    return t1.fullname === t2.fullname\n        && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n}\n// System.Type is not comparable in .NET, but let's implement this\n// in case users want to create a dictionary with types as keys\nexport function compare(t1, t2) {\n    if (t1.fullname !== t2.fullname) {\n        return t1.fullname < t2.fullname ? -1 : 1;\n    }\n    else {\n        return compareArraysWith(getGenerics(t1), getGenerics(t2), compare);\n    }\n}\nexport function type(fullname, generics) {\n    return new TypeInfo(fullname, generics);\n}\nexport function record(fullname, generics, constructor, fields) {\n    return new TypeInfo(fullname, generics, constructor, fields);\n}\nexport function anonRecord(...fields) {\n    return new TypeInfo(\"\", null, null, () => fields);\n}\nexport function union(fullname, generics, constructor, cases) {\n    const t = new TypeInfo(fullname, generics, constructor, null, () => cases().map((x, i) => typeof x === \"string\" ? new CaseInfo(t, i, x) : new CaseInfo(t, i, x[0], x[1])));\n    return t;\n}\nexport function tuple(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array(generic) {\n    return new TypeInfo(generic.fullname + \"[]\", [generic]);\n}\nexport const obj = new TypeInfo(\"System.Object\");\nexport const unit = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char = new TypeInfo(\"System.Char\");\nexport const string = new TypeInfo(\"System.String\");\nexport const bool = new TypeInfo(\"System.Boolean\");\nexport const int8 = new TypeInfo(\"System.SByte\");\nexport const uint8 = new TypeInfo(\"System.Byte\");\nexport const int16 = new TypeInfo(\"System.Int16\");\nexport const uint16 = new TypeInfo(\"System.UInt16\");\nexport const int32 = new TypeInfo(\"System.Int32\");\nexport const uint32 = new TypeInfo(\"System.UInt32\");\nexport const float32 = new TypeInfo(\"System.Single\");\nexport const float64 = new TypeInfo(\"System.Double\");\nexport const decimal = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof CaseInfo) {\n        return info.name;\n    }\n    else {\n        const i = info.fullname.lastIndexOf(\".\");\n        return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n    }\n}\nexport function fullName(t) {\n    const gen = t.generics != null && !isArray(t) ? t.generics : [];\n    if (gen.length > 0) {\n        return t.fullname + \"[\" + gen.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n    else {\n        return t.fullname;\n    }\n}\nexport function namespace(t) {\n    const i = t.fullname.lastIndexOf(\".\");\n    return i === -1 ? \"\" : t.fullname.substr(0, i);\n}\nexport function isArray(t) {\n    return t.fullname.endsWith(\"[]\");\n}\nexport function getElementType(t) {\n    return isArray(t) ? t.generics[0] : null;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj));\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t)) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t)) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\");\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields.map((t, i) => [\"Data\" + i, t]);\n}\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return new uci.declaringType.constructor(uci.tag, uci.name, ...values);\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.constructor != null\n        ? new t.constructor(...values)\n        : makeAnonRecord(fields.reduce((obj, [key,], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {}));\n}\nexport function makeTuple(values, t) {\n    return values;\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.name;\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","import { declare, Union } from \"./Types\";\nimport { compare, equals, structuralHash } from \"./Util\";\n// Options are erased in runtime by Fable, but we have\n// the `Some` type below to wrap values that would evaluate\n// to null in runtime. These two rules must be followed:\n// 1- None is always null in runtime, a non-strict null check\n//    (`x == null`) is enough to check the case of an option.\n// 2- To get the value of an option the `getValue` helper\n//    below must **always** be used.\n// export type Option<T> = T | Some<T>;\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    toJSON() {\n        return this.value;\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        return other == null\n            ? false\n            : equals(this.value, other instanceof Some ? other.value : other);\n    }\n    CompareTo(other) {\n        return other == null\n            ? 1\n            : compare(this.value, other instanceof Some ? other.value : other);\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x, acceptNull) {\n    if (x == null) {\n        if (!acceptNull) {\n            throw new Error(\"Option has no value\");\n        }\n        return null;\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function defaultArg(arg, defaultValue, f) {\n    return arg == null ? defaultValue : (f != null ? f(value(arg)) : value(arg));\n}\nexport function defaultArgWith(arg, defThunk) {\n    return arg == null ? defThunk() : value(arg);\n}\nexport function filter(predicate, arg) {\n    return arg != null ? (!predicate(value(arg)) ? null : arg) : arg;\n}\nexport function map(predicate, ...args) {\n    return args.every(x => x != null) ? predicate.apply(null, args) : null;\n}\n// CHOICE\nexport const Choice = declare(function Choice(tag, name, field) {\n    Union.call(this, tag, name, field);\n}, Union);\nexport function choice1(x) {\n    return new Choice(0, \"Choice1Of2\", x);\n}\nexport function choice2(x) {\n    return new Choice(1, \"Choice2Of2\", x);\n}\nexport function tryValueIfChoice1(x) {\n    return x.tag === 0 ? some(x.fields[0]) : null;\n}\nexport function tryValueIfChoice2(x) {\n    return x.tag === 1 ? some(x.fields[0]) : null;\n}\n// RESULT\nexport const Result = declare(function Result(tag, name, field) {\n    Union.call(this, tag, name, field);\n}, Union);\nexport function ok(x) {\n    return new Result(0, \"Ok\", x);\n}\nexport function error(x) {\n    return new Result(1, \"Error\", x);\n}\nexport function mapOk(f, result) {\n    return result.tag === 0 ? ok(f(result.fields[0])) : result;\n}\nexport function mapError(f, result) {\n    return result.tag === 1 ? error(f(result.fields[0])) : result;\n}\nexport function bindOk(f, result) {\n    return result.tag === 0 ? f(result.fields[0]) : result;\n}\n","export var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [_all, sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(\"_\", \"\"));\n    if (res != null) {\n        const [_all, sign, prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize) {\n    try {\n        const v = parse(str, style, unsigned, bitsize);\n        return [true, v];\n    }\n    catch (_a) {\n        // supress error\n    }\n    return [false, 0];\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\n","// Adapted from: https://github.com/dcodeIO/long.js/blob/f572e3a17d313730cf11eb838f6d2a5e31626f8a/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\n/* tslint:disable */\nimport { isValid } from \"./Int32\";\nimport { combineHashCodes } from \"./Util\";\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport default function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    return combineHashCodes([this.unsigned ? 1 : 0, this.high, this.low]);\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\nexport const neg = op_UnaryNegation;\nexport const not = op_LogicalNot;\nexport const add = op_Addition;\nexport const sub = op_Subtraction;\nexport const mul = op_Multiply;\nexport const div = op_Division;\nexport const mod = op_Modulus;\nexport const shl = op_LeftShift;\nexport const shr = op_RightShift;\nexport const and = op_BitwiseAnd;\nexport const or = op_BitwiseOr;\nexport const xor = op_ExclusiveOr;\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return op_UnaryNegation(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * @param {number} value\n * @param {boolean} unsigned\n * @param {number} kind\n * @returns {!Long}\n * @inner\n */\nexport function fromInteger(value, unsigned, kind) {\n    var x;\n    var xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6: x = value >>> 0;\n    }\n    return fromBits(x, xh >> 31, unsigned);\n}\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return op_UnaryNegation(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = op_Addition(op_Multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = op_Multiply(result, radixToPower);\n            result = op_Addition(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= maxValue.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits, maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize) {\n    try {\n        const v = parse(str, style, unsigned, bitsize);\n        return [true, v];\n    }\n    catch (_a) {\n        // supress error\n    }\n    return [false, ZERO];\n}\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = op_Division($this, radixLong), rem1 = op_Subtraction(op_Multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(op_UnaryNegation($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = op_Division(rem, radixToPower), intval = toInt(op_Subtraction(rem, op_Multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(op_UnaryNegation($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value is negative.\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value differs from the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value is less than the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Compares this Long's value with the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(op_Subtraction($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Absolute value of the given number.\n */\nexport function abs($this) {\n    if (!$this.unsigned && isNegative($this))\n        return op_UnaryNegation($this);\n    else\n        return $this;\n}\n/**\n * Negates this Long's value.\n * @returns {!Long} Negated Long\n */\nexport function op_UnaryNegation($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return op_Addition(op_LogicalNot($this), ONE);\n}\n;\n/**\n * Returns the sum of this and the specified Long.\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function op_Addition($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function op_Subtraction($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return op_Addition($this, op_UnaryNegation(subtrahend));\n}\n;\n/**\n * Returns the product of this and the specified Long.\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function op_Multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return op_Multiply(op_UnaryNegation($this), op_UnaryNegation(multiplier));\n        else\n            return op_UnaryNegation(op_Multiply(op_UnaryNegation($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return op_UnaryNegation(op_Multiply($this, op_UnaryNegation(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function op_Division($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = op_RightShift($this, 1);\n                approx = op_LeftShift(op_Division(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = op_Subtraction($this, op_Multiply(divisor, approx));\n                    res = op_Addition(approx, op_Division(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return op_Division(op_UnaryNegation($this), op_UnaryNegation(divisor));\n            return op_UnaryNegation(op_Division(op_UnaryNegation($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return op_UnaryNegation(op_Division($this, op_UnaryNegation(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, op_RightShiftUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = op_Multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = op_Multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = op_Addition(res, approxRes);\n        rem = op_Subtraction(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long modulo the specified.\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function op_Modulus($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return op_Subtraction($this, op_Multiply(op_Division($this, divisor), divisor));\n}\n;\n/**\n * Returns the bitwise NOT of this Long.\n * @returns {!Long}\n */\nexport function op_LogicalNot($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function op_BitwiseAnd($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function op_BitwiseOr($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function op_ExclusiveOr($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function op_LeftShift($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function op_RightShift($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function op_RightShiftUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Converts this Long to signed.\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\nexport function makeRangeStepFunction(step, last, unsigned) {\n    const zero = unsigned ? UZERO : ZERO;\n    return (x) => greaterThan(step, zero) && lessThanOrEqual(x, last)\n        || lessThan(step, zero) && greaterThanOrEqual(x, last)\n        ? [x, op_Addition(x, step)] : null;\n}\n","import { makeRangeStepFunction } from \"./Long\";\nimport { some, value } from \"./Option\";\nimport { compare, equals } from \"./Util\";\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    MoveNext() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    get Current() {\n        return this.current;\n    }\n    Reset() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        next() {\n            return en.MoveNext()\n                ? { done: false, value: en.Current }\n                : { done: true, value: null };\n        },\n    };\n}\n// export function toIterable<T>(en: IEnumerable<T>): Iterable<T> {\n//   return {\n//     [Symbol.iterator]() {\n//       return toIterator(en.GetEnumerator());\n//     },\n//   };\n// }\nfunction __failIfNone(res) {\n    if (res == null) {\n        throw new Error(\"Seq did not contain any matching element\");\n    }\n    return value(res);\n}\nexport function ofArray(xs) {\n    return delay(() => unfold((i) => i < xs.length ? [xs[i], i + 1] : null, 0));\n}\nexport function allPairs(xs, ys) {\n    let firstEl = true;\n    const ysCache = [];\n    return collect((x) => {\n        if (firstEl) {\n            firstEl = false;\n            return map((y) => {\n                ysCache.push(y);\n                return [x, y];\n            }, ys);\n        }\n        else {\n            return ysCache.map(y => [x, y]);\n            // return map(function (i) {\n            //     return [x, ysCache[i]];\n            // }, rangeNumber(0, 1, ysCache.length - 1));\n        }\n    }, xs);\n}\nexport function append(xs, ys) {\n    return delay(() => {\n        let firstDone = false;\n        const i = xs[Symbol.iterator]();\n        let iters = [i, null];\n        return unfold(() => {\n            let cur;\n            if (!firstDone) {\n                cur = iters[0].next();\n                if (!cur.done) {\n                    return [cur.value, iters];\n                }\n                else {\n                    firstDone = true;\n                    iters = [null, ys[Symbol.iterator]()];\n                }\n            }\n            cur = iters[1].next();\n            return !cur.done ? [cur.value, iters] : null;\n        }, iters);\n    });\n}\nexport function average(xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function concat(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        let output = { value: null };\n        return unfold((innerIter) => {\n            let hasFinished = false;\n            while (!hasFinished) {\n                if (innerIter == null) {\n                    const cur = iter.next();\n                    if (!cur.done) {\n                        innerIter = cur.value[Symbol.iterator]();\n                    }\n                    else {\n                        hasFinished = true;\n                    }\n                }\n                else {\n                    const cur = innerIter.next();\n                    if (!cur.done) {\n                        output = { value: cur.value };\n                        hasFinished = true;\n                    }\n                    else {\n                        innerIter = null;\n                    }\n                }\n            }\n            return innerIter != null && output != null ? [output.value, innerIter] : null;\n        }, null);\n    });\n}\nexport function collect(f, xs) {\n    return concat(map(f, xs));\n}\nexport function choose(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            const y = f(cur.value);\n            if (y != null) {\n                return [value(y), iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function compareWith(f, xs, ys) {\n    const nonZero = tryFind((i) => i !== 0, map2((x, y) => f(x, y), xs, ys));\n    return nonZero != null ? value(nonZero) : length(xs) - length(ys);\n}\nexport function delay(f) {\n    return {\n        [Symbol.iterator]: () => f()[Symbol.iterator](),\n    };\n}\nexport function empty() {\n    return unfold(() => void 0);\n}\nexport function enumerateWhile(cond, xs) {\n    return concat(unfold(() => cond() ? [xs, true] : null));\n}\nexport function enumerateThenFinally(xs, finalFn) {\n    return delay(() => {\n        let iter;\n        try {\n            iter = xs[Symbol.iterator]();\n        }\n        catch (err) {\n            return void 0;\n        }\n        finally {\n            finalFn();\n        }\n        return unfold((it) => {\n            try {\n                const cur = it.next();\n                return !cur.done ? [cur.value, it] : null;\n            }\n            catch (err) {\n                return void 0;\n            }\n            finally {\n                finalFn();\n            }\n        }, iter);\n    });\n}\nexport function enumerateUsing(disp, work) {\n    let isDisposed = false;\n    const disposeOnce = () => {\n        if (!isDisposed) {\n            isDisposed = true;\n            disp.Dispose();\n        }\n    };\n    try {\n        return enumerateThenFinally(work(disp), disposeOnce);\n    }\n    catch (err) {\n        return void 0;\n    }\n    finally {\n        disposeOnce();\n    }\n}\nexport function exactlyOne(xs) {\n    const iter = xs[Symbol.iterator]();\n    const fst = iter.next();\n    if (fst.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    const snd = iter.next();\n    if (!snd.done) {\n        throw new Error(\"Seq had multiple items\");\n    }\n    return fst.value;\n}\nexport function except(itemsToExclude, source) {\n    const exclusionItems = Array.from(itemsToExclude);\n    const testIsNotInExclusionItems = (element) => !exclusionItems.some((excludedItem) => equals(excludedItem, element));\n    return filter(testIsNotInExclusionItems, source);\n}\nexport function exists(f, xs) {\n    let cur;\n    for (const iter = xs[Symbol.iterator]();;) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function exists2(f, xs, ys) {\n    let cur1;\n    let cur2;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        if (f(cur1.value, cur2.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function forAll(f, xs) {\n    return !exists((x) => !f(x), xs);\n}\nexport function forAll2(f, xs, ys) {\n    return !exists2((x, y) => !f(x, y), xs, ys);\n}\nexport function contains(i, xs) {\n    return exists((x) => equals(x, i), xs);\n}\nexport function filter(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            if (f(cur.value)) {\n                return [cur.value, iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function where(f, xs) {\n    return filter(f, xs);\n}\nexport function fold(f, acc, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f, acc);\n    }\n    else {\n        let cur;\n        for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n            cur = iter.next();\n            if (cur.done) {\n                break;\n            }\n            acc = f(acc, cur.value, i);\n        }\n        return acc;\n    }\n}\nexport function foldBack(f, xs, acc) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        acc = f(arr[i], acc, i);\n    }\n    return acc;\n}\nexport function fold2(f, acc, xs, ys) {\n    const iter1 = xs[Symbol.iterator]();\n    const iter2 = ys[Symbol.iterator]();\n    let cur1;\n    let cur2;\n    for (let i = 0;; i++) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        acc = f(acc, cur1.value, cur2.value, i);\n    }\n    return acc;\n}\nexport function foldBack2(f, xs, ys, acc) {\n    const ar1 = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const ar2 = Array.isArray(ys) || ArrayBuffer.isView(ys) ? ys : Array.from(ys);\n    for (let i = ar1.length - 1; i >= 0; i--) {\n        acc = f(ar1[i], ar2[i], acc, i);\n    }\n    return acc;\n}\nexport function tryHead(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    return cur.done ? null : some(cur.value);\n}\nexport function head(xs) {\n    return __failIfNone(tryHead(xs));\n}\nexport function initialize(n, f) {\n    return delay(() => unfold((i) => i < n ? [f(i), i + 1] : null, 0));\n}\nexport function initializeInfinite(f) {\n    return delay(() => unfold((i) => [f(i), i + 1], 0));\n}\nexport function tryItem(i, xs) {\n    if (i < 0) {\n        return null;\n    }\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return i < xs.length ? some(xs[i]) : null;\n    }\n    for (let j = 0, iter = xs[Symbol.iterator]();; j++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (j === i) {\n            return some(cur.value);\n        }\n    }\n    return null;\n}\nexport function item(i, xs) {\n    return __failIfNone(tryItem(i, xs));\n}\nexport function iterate(f, xs) {\n    fold((_, x) => f(x), null, xs);\n}\nexport function iterate2(f, xs, ys) {\n    fold2((_, x, y) => f(x, y), null, xs, ys);\n}\nexport function iterateIndexed(f, xs) {\n    fold((_, x, i) => f(i, x), null, xs);\n}\nexport function iterateIndexed2(f, xs, ys) {\n    fold2((_, x, y, i) => f(i, x, y), null, xs, ys);\n}\nexport function isEmpty(xs) {\n    const i = xs[Symbol.iterator]();\n    return i.next().done;\n}\nexport function tryLast(xs) {\n    return isEmpty(xs) ? null : some(reduce((_, x) => x, xs));\n}\nexport function last(xs) {\n    return __failIfNone(tryLast(xs));\n}\nexport function length(xs) {\n    return Array.isArray(xs) || ArrayBuffer.isView(xs)\n        ? xs.length\n        : fold((acc, x) => acc + 1, 0, xs);\n}\nexport function map(f, xs) {\n    return delay(() => unfold((iter) => {\n        const cur = iter.next();\n        return !cur.done ? [f(cur.value), iter] : null;\n    }, xs[Symbol.iterator]()));\n}\nexport function mapIndexed(f, xs) {\n    return delay(() => {\n        let i = 0;\n        return unfold((iter) => {\n            const cur = iter.next();\n            return !cur.done ? [f(i++, cur.value), iter] : null;\n        }, xs[Symbol.iterator]());\n    });\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(f, xs, ys) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function mapIndexed2(f, xs, ys) {\n    return delay(() => {\n        let i = 0;\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function map3(f, xs, ys, zs) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        const iter3 = zs[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            const cur3 = iter3.next();\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), null] : null;\n        });\n    });\n}\nexport function mapFold(f, acc, xs, transform) {\n    const result = [];\n    let r;\n    let cur;\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        [r, acc] = f(acc, cur.value);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function mapFoldBack(f, xs, acc, transform) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const result = [];\n    let r;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        [r, acc] = f(arr[i], acc);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function max(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === 1 ? acc : x, xs);\n}\nexport function maxBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === 1 ? acc : x, xs);\n}\nexport function min(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === -1 ? acc : x, xs);\n}\nexport function minBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === -1 ? acc : x, xs);\n}\nexport function pairwise(xs) {\n    return skip(2, scan((last, next) => [last[1], next], [0, 0], xs));\n}\nexport function rangeChar(first, last) {\n    return delay(() => unfold((x) => x <= last ? [x, String.fromCharCode(x.charCodeAt(0) + 1)] : null, first));\n}\nexport function rangeLong(first, step, last, unsigned) {\n    const stepFn = makeRangeStepFunction(step, last, unsigned);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeNumber(first, step, last) {\n    if (step === 0) {\n        throw new Error(\"Step cannot be 0\");\n    }\n    return delay(() => unfold((x) => step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : null, first));\n}\nexport function readOnly(xs) {\n    return map((x) => x, xs);\n}\nexport function reduce(f, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f);\n    }\n    const iter = xs[Symbol.iterator]();\n    let cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = cur.value;\n    while (true) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        acc = f(acc, cur.value);\n    }\n    return acc;\n}\nexport function reduceBack(f, xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    if (ar.length === 0) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = ar[ar.length - 1];\n    for (let i = ar.length - 2; i >= 0; i--) {\n        acc = f(ar[i], acc, i);\n    }\n    return acc;\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function reverse(xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return ofArray(ar.reverse());\n}\nexport function scan(f, seed, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((acc) => {\n            if (acc == null) {\n                return [seed, seed];\n            }\n            const cur = iter.next();\n            if (!cur.done) {\n                acc = f(acc, cur.value);\n                return [acc, acc];\n            }\n            return void 0;\n        }, null);\n    });\n}\nexport function scanBack(f, xs, seed) {\n    return reverse(scan((acc, x) => f(x, acc), seed, reverse(xs)));\n}\nexport function singleton(y) {\n    return [y];\n}\nexport function skip(n, xs) {\n    return {\n        [Symbol.iterator]: () => {\n            const iter = xs[Symbol.iterator]();\n            for (let i = 1; i <= n; i++) {\n                if (iter.next().done) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return iter;\n        },\n    };\n}\nexport function skipWhile(f, xs) {\n    return delay(() => {\n        let hasPassed = false;\n        return filter((x) => hasPassed || (hasPassed = !f(x)), xs);\n    });\n}\nexport function sortWith(f, xs) {\n    const ys = Array.from(xs);\n    return ofArray(ys.sort(f));\n}\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\nexport function tail(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    return {\n        [Symbol.iterator]: () => iter,\n    };\n}\nexport function take(n, xs, truncate = false) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            if (i < n) {\n                const cur = iter.next();\n                if (!cur.done) {\n                    return [cur.value, i + 1];\n                }\n                if (!truncate) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return void 0;\n        }, 0);\n    });\n}\nexport function truncate(n, xs) {\n    return take(n, xs, true);\n}\nexport function takeWhile(f, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            const cur = iter.next();\n            if (!cur.done && f(cur.value)) {\n                return [cur.value, null];\n            }\n            return void 0;\n        }, 0);\n    });\n}\nexport function tryFind(f, xs, defaultValue) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return some(cur.value);\n        }\n    }\n    return defaultValue === void 0 ? null : some(defaultValue);\n}\nexport function find(f, xs) {\n    return __failIfNone(tryFind(f, xs));\n}\nexport function tryFindBack(f, xs, defaultValue) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return tryFind(f, arr.reverse(), defaultValue);\n}\nexport function findBack(f, xs) {\n    return __failIfNone(tryFindBack(f, xs));\n}\nexport function tryFindIndex(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndex(f, xs) {\n    return __failIfNone(tryFindIndex(f, xs));\n}\nexport function tryFindIndexBack(f, xs) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (f(arr[i], i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndexBack(f, xs) {\n    return __failIfNone(tryFindIndexBack(f, xs));\n}\nexport function tryPick(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        const y = f(cur.value, i);\n        if (y != null) {\n            return y;\n        }\n    }\n    return null;\n}\nexport function pick(f, xs) {\n    return __failIfNone(tryPick(f, xs));\n}\nexport function unfold(f, fst) {\n    return {\n        [Symbol.iterator]: () => {\n            // Capture a copy of the first value in the closure\n            // so the sequence is restarted every time, see #1230\n            let acc = fst;\n            return {\n                next: () => {\n                    const res = f(acc);\n                    if (res != null) {\n                        acc = res[1];\n                        return { done: false, value: res[0] };\n                    }\n                    return { done: true };\n                },\n            };\n        },\n    };\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw new Error(\"windowSize must be positive\");\n    }\n    return {\n        [Symbol.iterator]: () => {\n            let window = [];\n            const iter = source[Symbol.iterator]();\n            return {\n                next: () => {\n                    let cur;\n                    while (window.length < windowSize) {\n                        if ((cur = iter.next()).done) {\n                            return { done: true };\n                        }\n                        window.push(cur.value);\n                    }\n                    const value = window;\n                    window = window.slice(1);\n                    return { done: false, value };\n                },\n            };\n        },\n    };\n}\n","export function create(pattern, options) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline and ECMAScript\");\n    }\n    let flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.test(str);\n}\nexport function match(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.exec(str);\n}\nexport function matches(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    let m = reg.exec(str);\n    const matches = [];\n    while (m !== null) {\n        matches.push(m);\n        m = reg.exec(str);\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit !== 0) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            for (let i = 0; i < len - 2; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[len - 2];\n            match.input = arguments[len - 1];\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        // $0 doesn't work with JS regex, see #1155\n        replacement = replacement.replace(/\\$0/g, (s) => \"$&\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","import { toString as dateToString } from \"./Date\";\nimport Long, { fromBytes as longFromBytes, toBytes as longToBytes, toString as longToString } from \"./Long\";\nimport { escape } from \"./RegExp\";\nconst fsFormatRegExp = /(^|[^%])%([0+ ]*)(-?\\d+)?(?:\\.(\\d+))?(\\w)/;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\n// RFC 4122 compliant. From https://stackoverflow.com/a/13653180/3922220\n// const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n// Relax GUID parsing, see #1637\nconst guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nfunction toHex(x) {\n    if (x instanceof Long) {\n        return longToString(x.unsigned ? x : longFromBytes(longToBytes(x), true), 16);\n    }\n    else {\n        return (Number(x) >>> 0).toString(16);\n    }\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return arg.cont((x) => { console.log(x); });\n}\nexport function toConsoleError(arg) {\n    return arg.cont((x) => { console.error(x); });\n}\nexport function toText(arg) {\n    return arg.cont((x) => x);\n}\nexport function toFail(arg) {\n    return arg.cont((x) => { throw new Error(x); });\n}\nfunction formatOnce(str2, rep) {\n    return str2.replace(fsFormatRegExp, (_, prefix, flags, pad, precision, format) => {\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                rep = Number(rep).toFixed(precision || 6);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = Number(rep).toPrecision(precision);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = Number(rep).toExponential(precision);\n                break;\n            case \"O\":\n            case \"A\":\n                rep = String(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n        }\n        const plusPrefix = flags.indexOf(\"+\") >= 0 && parseInt(rep, 10) >= 0;\n        pad = parseInt(pad, 10);\n        if (!isNaN(pad)) {\n            const ch = pad >= 0 && flags.indexOf(\"0\") >= 0 ? \"0\" : \" \";\n            rep = padLeft(String(rep), Math.abs(pad) - (plusPrefix ? 1 : 0), ch, pad < 0);\n        }\n        const once = prefix + (plusPrefix ? \"+\" + rep : rep);\n        return once.replace(/%/g, \"%%\");\n    });\n}\nfunction createPrinter(str, cont) {\n    return (...args) => {\n        // Make a copy as the function may be used several times\n        let strCopy = str;\n        for (const arg of args) {\n            strCopy = formatOnce(strCopy, arg);\n        }\n        return fsFormatRegExp.test(strCopy)\n            ? createPrinter(strCopy, cont)\n            : cont(strCopy.replace(/%%/g, \"%\"));\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        return fsFormatRegExp.test(str)\n            ? createPrinter(str, cont)\n            : cont(str);\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (match, idx, pad, format, precision, pattern) => {\n        let rep = args[idx];\n        let padSymbol = \" \";\n        const isNumericType = (typeof rep === \"number\") || (rep instanceof Long);\n        // TODO: || (rep instanceof Decimal) || (rep instanceof BigInt);\n        if (isNumericType) {\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    rep = precision ? rep.toFixed(precision) : rep.toFixed(2);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision ? rep.toPrecision(precision) : rep.toPrecision();\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision ? rep.toExponential(precision) : rep.toExponential();\n                    break;\n                case \"p\":\n                case \"P\":\n                    rep = (precision ? (rep * 100).toFixed(precision) : (rep * 100).toFixed(2)) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision ? padLeft(rep.toString(), precision, \"0\") : rep.toString();\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    const m = /^(0+)(\\.0+)?$/.exec(pattern);\n                    if (m != null) {\n                        let decs = 0;\n                        if (m[2] != null) {\n                            rep = rep.toFixed(decs = m[2].length - 1);\n                        }\n                        pad = \",\" + (m[1].length + (decs ? decs + 1 : 0)).toString();\n                        padSymbol = \"0\";\n                    }\n                    else if (pattern) {\n                        rep = pattern;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        pad = parseInt((pad || \"\").substring(1), 10);\n        if (!isNaN(pad)) {\n            rep = padLeft(String(rep), Math.abs(pad), padSymbol, pad < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function join(delimiter, ...xs) {\n    return xs.map((x) => String(x)).join(delimiter);\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return join(delimiter, ...xs.slice(startIndex, endIndexPlusOne));\n}\n/** Validates UUID as specified in RFC4122 (versions 1-5). Trims braces. */\nexport function validateGuid(str, doNotThrow) {\n    const trimmedAndLowered = trim(str, \"{\", \"}\").toLowerCase();\n    if (guidRegex.test(trimmedAndLowered)) {\n        return doNotThrow ? [true, trimmedAndLowered] : trimmedAndLowered;\n    }\n    else if (doNotThrow) {\n        return [false, \"00000000-0000-0000-0000-000000000000\"];\n    }\n    throw new Error(\"Guid should contain 32 digits with 4 dashes: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n}\n// From https://gist.github.com/LeverOne/1308368\nexport function newGuid() {\n    let b = \"\";\n    for (let a = 0; a++ < 36;) {\n        b += a * 51 & 52\n            ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16)\n            : \"-\";\n    }\n    return b;\n}\n// Maps for number <-> hex string conversion\nlet _convertMapsInitialized = false;\nlet _byteToHex;\nlet _hexToByte;\nfunction initConvertMaps() {\n    _byteToHex = new Array(256);\n    _hexToByte = {};\n    for (let i = 0; i < 256; i++) {\n        _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n        _hexToByte[_byteToHex[i]] = i;\n    }\n    _convertMapsInitialized = true;\n}\n/** Parse a UUID into it's component bytes */\n// Adapted from https://github.com/zefferus/uuid-parse\nexport function guidToArray(s) {\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    let i = 0;\n    const buf = new Uint8Array(16);\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, ((oct) => {\n        switch (i) {\n            // .NET saves first three byte groups with different endianness\n            // See https://stackoverflow.com/a/16722909/3922220\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n                buf[3 - i++] = _hexToByte[oct];\n                break;\n            case 4:\n            case 5:\n                buf[9 - i++] = _hexToByte[oct];\n                break;\n            case 6:\n            case 7:\n                buf[13 - i++] = _hexToByte[oct];\n                break;\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                buf[i++] = _hexToByte[oct];\n                break;\n        }\n    }));\n    // Zero out remaining bytes if string was short\n    while (i < 16) {\n        buf[i++] = 0;\n    }\n    return buf;\n}\n/** Convert UUID byte array into a string */\nexport function arrayToGuid(buf) {\n    if (buf.length !== 16) {\n        throw new Error(\"Byte array for GUID must be exactly 16 bytes long\");\n    }\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    return _byteToHex[buf[3]] + _byteToHex[buf[2]] +\n        _byteToHex[buf[1]] + _byteToHex[buf[0]] + \"-\" +\n        _byteToHex[buf[5]] + _byteToHex[buf[4]] + \"-\" +\n        _byteToHex[buf[7]] + _byteToHex[buf[6]] + \"-\" +\n        _byteToHex[buf[8]] + _byteToHex[buf[9]] + \"-\" +\n        _byteToHex[buf[10]] + _byteToHex[buf[11]] +\n        _byteToHex[buf[12]] + _byteToHex[buf[13]] +\n        _byteToHex[buf[14]] + _byteToHex[buf[15]];\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, removeEmpty) {\n    count = typeof count === \"number\" ? count : null;\n    removeEmpty = typeof removeEmpty === \"number\" ? removeEmpty : null;\n    if (count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    if (!Array.isArray(splitters)) {\n        if (removeEmpty === 0) {\n            return str.split(splitters, count);\n        }\n        const len = arguments.length;\n        splitters = Array(len - 1);\n        for (let key = 1; key < len; key++) {\n            splitters[key - 1] = arguments[key];\n        }\n    }\n    splitters = splitters.map((x) => escape(x));\n    splitters = splitters.length > 0 ? splitters : [\" \"];\n    let i = 0;\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    while (count == null || count > 1) {\n        const m = reg.exec(str);\n        if (m === null) {\n            break;\n        }\n        if (!removeEmpty || (m.index - i) > 0) {\n            count = count != null ? count - 1 : count;\n            splits.push(str.substring(i, m.index));\n        }\n        i = reg.lastIndex;\n    }\n    if (!removeEmpty || (str.length - i) > 0) {\n        splits.push(str.substring(i));\n    }\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\n","import { Record, List, declare, Union } from \"./Types.js\";\nimport { type, record, bool, list, union, int32 } from \"./Reflection.js\";\nimport { value as value$$3, some } from \"./Option.js\";\nimport { iterate as iterate$$1, empty as empty$$1, toIterator, map as map$$1, unfold, getEnumerator, fold as fold$$1 } from \"./Seq.js\";\nimport { compare, structuralHash, isDisposable } from \"./Util.js\";\nimport { join, toText, printf } from \"./String.js\";\nexport const MapTree$00602 = declare(function Map_MapTree(tag, name, ...fields) {\n  Union.call(this, tag, name, ...fields);\n}, Union);\nexport function MapTree$00602$reflection($gen$$3, $gen$$4) {\n  return union(\"Map.MapTree`2\", [$gen$$3, $gen$$4], MapTree$00602, () => [\"MapEmpty\", [\"MapOne\", [$gen$$3, $gen$$4]], [\"MapNode\", [$gen$$3, $gen$$4, MapTree$00602$reflection($gen$$3, $gen$$4), MapTree$00602$reflection($gen$$3, $gen$$4), int32]]]);\n}\nexport function MapTreeModule$$$sizeAux(acc, m) {\n  MapTreeModule$$$sizeAux: while (true) {\n    switch (m.tag) {\n      case 1:\n        {\n          return acc + 1 | 0;\n        }\n\n      case 2:\n        {\n          const r = m.fields[3];\n          const l = m.fields[2];\n          const $acc$$5 = acc;\n          acc = MapTreeModule$$$sizeAux($acc$$5 + 1, l);\n          m = r;\n          continue MapTreeModule$$$sizeAux;\n        }\n\n      default:\n        {\n          return acc | 0;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$size(x) {\n  return MapTreeModule$$$sizeAux(0, x);\n}\nexport function MapTreeModule$$$empty() {\n  return new MapTree$00602(0, \"MapEmpty\");\n}\nexport function MapTreeModule$$$height(_arg1) {\n  switch (_arg1.tag) {\n    case 1:\n      {\n        return 1;\n      }\n\n    case 2:\n      {\n        const h = _arg1.fields[4] | 0;\n        return h | 0;\n      }\n\n    default:\n      {\n        return 0;\n      }\n  }\n}\nexport function MapTreeModule$$$isEmpty(m$$1) {\n  if (m$$1.tag === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function MapTreeModule$$$mk(l$$1, k, v, r$$1) {\n  const matchValue = [l$$1, r$$1];\n  var $target$$6;\n\n  if (matchValue[0].tag === 0) {\n    if (matchValue[1].tag === 0) {\n      $target$$6 = 0;\n    } else {\n      $target$$6 = 1;\n    }\n  } else {\n    $target$$6 = 1;\n  }\n\n  switch ($target$$6) {\n    case 0:\n      {\n        return new MapTree$00602(1, \"MapOne\", k, v);\n      }\n\n    case 1:\n      {\n        const hl = MapTreeModule$$$height(l$$1) | 0;\n        const hr = MapTreeModule$$$height(r$$1) | 0;\n        const m$$2 = (hl < hr ? hr : hl) | 0;\n        return new MapTree$00602(2, \"MapNode\", k, v, l$$1, r$$1, m$$2 + 1);\n      }\n  }\n}\nexport function MapTreeModule$$$rebalance(t1, k$$1, v$$1, t2) {\n  const t1h = MapTreeModule$$$height(t1) | 0;\n  const t2h = MapTreeModule$$$height(t2) | 0;\n\n  if (t2h > t1h + 2) {\n    if (t2.tag === 2) {\n      const t2v = t2.fields[1];\n      const t2r = t2.fields[3];\n      const t2l = t2.fields[2];\n      const t2k = t2.fields[0];\n\n      if (MapTreeModule$$$height(t2l) > t1h + 1) {\n        if (t2l.tag === 2) {\n          const t2lv = t2l.fields[1];\n          const t2lr = t2l.fields[3];\n          const t2ll = t2l.fields[2];\n          const t2lk = t2l.fields[0];\n          return MapTreeModule$$$mk(MapTreeModule$$$mk(t1, k$$1, v$$1, t2ll), t2lk, t2lv, MapTreeModule$$$mk(t2lr, t2k, t2v, t2r));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return MapTreeModule$$$mk(MapTreeModule$$$mk(t1, k$$1, v$$1, t2l), t2k, t2v, t2r);\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else if (t1h > t2h + 2) {\n    if (t1.tag === 2) {\n      const t1v = t1.fields[1];\n      const t1r = t1.fields[3];\n      const t1l = t1.fields[2];\n      const t1k = t1.fields[0];\n\n      if (MapTreeModule$$$height(t1r) > t2h + 1) {\n        if (t1r.tag === 2) {\n          const t1rv = t1r.fields[1];\n          const t1rr = t1r.fields[3];\n          const t1rl = t1r.fields[2];\n          const t1rk = t1r.fields[0];\n          return MapTreeModule$$$mk(MapTreeModule$$$mk(t1l, t1k, t1v, t1rl), t1rk, t1rv, MapTreeModule$$$mk(t1rr, k$$1, v$$1, t2));\n        } else {\n          throw new Error(\"re  balance\");\n        }\n      } else {\n        return MapTreeModule$$$mk(t1l, t1k, t1v, MapTreeModule$$$mk(t1r, k$$1, v$$1, t2));\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else {\n    return MapTreeModule$$$mk(t1, k$$1, v$$1, t2);\n  }\n}\nexport function MapTreeModule$$$add(comparer, k$$2, v$$2, m$$3) {\n  switch (m$$3.tag) {\n    case 1:\n      {\n        const k2 = m$$3.fields[0];\n        const c = comparer.Compare(k$$2, k2) | 0;\n\n        if (c < 0) {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, new MapTree$00602(0, \"MapEmpty\"), m$$3, 2);\n        } else if (c === 0) {\n          return new MapTree$00602(1, \"MapOne\", k$$2, v$$2);\n        } else {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, m$$3, new MapTree$00602(0, \"MapEmpty\"), 2);\n        }\n      }\n\n    case 2:\n      {\n        const v2 = m$$3.fields[1];\n        const r$$2 = m$$3.fields[3];\n        const l$$2 = m$$3.fields[2];\n        const k2$$1 = m$$3.fields[0];\n        const h$$1 = m$$3.fields[4] | 0;\n        const c$$1 = comparer.Compare(k$$2, k2$$1) | 0;\n\n        if (c$$1 < 0) {\n          return MapTreeModule$$$rebalance(MapTreeModule$$$add(comparer, k$$2, v$$2, l$$2), k2$$1, v2, r$$2);\n        } else if (c$$1 === 0) {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, l$$2, r$$2, h$$1);\n        } else {\n          return MapTreeModule$$$rebalance(l$$2, k2$$1, v2, MapTreeModule$$$add(comparer, k$$2, v$$2, r$$2));\n        }\n      }\n\n    default:\n      {\n        return new MapTree$00602(1, \"MapOne\", k$$2, v$$2);\n      }\n  }\n}\nexport function MapTreeModule$$$find(comparer$$1, k$$3, m$$4) {\n  MapTreeModule$$$find: while (true) {\n    switch (m$$4.tag) {\n      case 1:\n        {\n          const v2$$1 = m$$4.fields[1];\n          const k2$$2 = m$$4.fields[0];\n          const c$$2 = comparer$$1.Compare(k$$3, k2$$2) | 0;\n\n          if (c$$2 === 0) {\n            return v2$$1;\n          } else {\n            throw new Error(\"key not found\");\n          }\n        }\n\n      case 2:\n        {\n          const v2$$2 = m$$4.fields[1];\n          const r$$3 = m$$4.fields[3];\n          const l$$3 = m$$4.fields[2];\n          const k2$$3 = m$$4.fields[0];\n          const c$$3 = comparer$$1.Compare(k$$3, k2$$3) | 0;\n\n          if (c$$3 < 0) {\n            const $comparer$$1$$7 = comparer$$1;\n            const $k$$3$$8 = k$$3;\n            comparer$$1 = $comparer$$1$$7;\n            k$$3 = $k$$3$$8;\n            m$$4 = l$$3;\n            continue MapTreeModule$$$find;\n          } else if (c$$3 === 0) {\n            return v2$$2;\n          } else {\n            const $comparer$$1$$9 = comparer$$1;\n            const $k$$3$$10 = k$$3;\n            comparer$$1 = $comparer$$1$$9;\n            k$$3 = $k$$3$$10;\n            m$$4 = r$$3;\n            continue MapTreeModule$$$find;\n          }\n        }\n\n      default:\n        {\n          throw new Error(\"key not found\");\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$tryFind(comparer$$2, k$$4, m$$5) {\n  MapTreeModule$$$tryFind: while (true) {\n    switch (m$$5.tag) {\n      case 1:\n        {\n          const v2$$3 = m$$5.fields[1];\n          const k2$$4 = m$$5.fields[0];\n          const c$$4 = comparer$$2.Compare(k$$4, k2$$4) | 0;\n\n          if (c$$4 === 0) {\n            return some(v2$$3);\n          } else {\n            return null;\n          }\n        }\n\n      case 2:\n        {\n          const v2$$4 = m$$5.fields[1];\n          const r$$4 = m$$5.fields[3];\n          const l$$4 = m$$5.fields[2];\n          const k2$$5 = m$$5.fields[0];\n          const c$$5 = comparer$$2.Compare(k$$4, k2$$5) | 0;\n\n          if (c$$5 < 0) {\n            const $comparer$$2$$11 = comparer$$2;\n            const $k$$4$$12 = k$$4;\n            comparer$$2 = $comparer$$2$$11;\n            k$$4 = $k$$4$$12;\n            m$$5 = l$$4;\n            continue MapTreeModule$$$tryFind;\n          } else if (c$$5 === 0) {\n            return some(v2$$4);\n          } else {\n            const $comparer$$2$$13 = comparer$$2;\n            const $k$$4$$14 = k$$4;\n            comparer$$2 = $comparer$$2$$13;\n            k$$4 = $k$$4$$14;\n            m$$5 = r$$4;\n            continue MapTreeModule$$$tryFind;\n          }\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$partition1(comparer$$3, f, k$$5, v$$3, acc1, acc2) {\n  if (f(k$$5, v$$3)) {\n    return [MapTreeModule$$$add(comparer$$3, k$$5, v$$3, acc1), acc2];\n  } else {\n    return [acc1, MapTreeModule$$$add(comparer$$3, k$$5, v$$3, acc2)];\n  }\n}\nexport function MapTreeModule$$$partitionAux($arg$$21, $arg$$22, $arg$$23, $arg$$24, $arg$$25) {\n  MapTreeModule$$$partitionAux: while (true) {\n    const comparer$$4 = $arg$$21,\n          f$$1 = $arg$$22,\n          s = $arg$$23,\n          acc_0 = $arg$$24,\n          acc_1 = $arg$$25;\n    const acc$$1 = [acc_0, acc_1];\n\n    switch (s.tag) {\n      case 1:\n        {\n          const v$$4 = s.fields[1];\n          const k$$6 = s.fields[0];\n          return MapTreeModule$$$partition1(comparer$$4, f$$1, k$$6, v$$4, acc$$1[0], acc$$1[1]);\n        }\n\n      case 2:\n        {\n          const v$$5 = s.fields[1];\n          const r$$5 = s.fields[3];\n          const l$$5 = s.fields[2];\n          const k$$7 = s.fields[0];\n          const acc$$2 = MapTreeModule$$$partitionAux(comparer$$4, f$$1, r$$5, acc$$1[0], acc$$1[1]);\n          const acc$$3 = MapTreeModule$$$partition1(comparer$$4, f$$1, k$$7, v$$5, acc$$2[0], acc$$2[1]);\n          $arg$$21 = comparer$$4;\n          $arg$$22 = f$$1;\n          $arg$$23 = l$$5;\n          $arg$$24 = acc$$3[0];\n          $arg$$25 = acc$$3[1];\n          continue MapTreeModule$$$partitionAux;\n        }\n\n      default:\n        {\n          return acc$$1;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$partition(comparer$$5, f$$2, s$$1) {\n  return MapTreeModule$$$partitionAux(comparer$$5, f$$2, s$$1, MapTreeModule$$$empty(), MapTreeModule$$$empty());\n}\nexport function MapTreeModule$$$filter1(comparer$$6, f$$3, k$$8, v$$6, acc$$4) {\n  if (f$$3(k$$8, v$$6)) {\n    return MapTreeModule$$$add(comparer$$6, k$$8, v$$6, acc$$4);\n  } else {\n    return acc$$4;\n  }\n}\nexport function MapTreeModule$$$filterAux($arg$$34, $arg$$35, $arg$$36, $arg$$37) {\n  MapTreeModule$$$filterAux: while (true) {\n    const comparer$$7 = $arg$$34,\n          f$$4 = $arg$$35,\n          s$$2 = $arg$$36,\n          acc$$5 = $arg$$37;\n\n    switch (s$$2.tag) {\n      case 1:\n        {\n          const v$$7 = s$$2.fields[1];\n          const k$$9 = s$$2.fields[0];\n          return MapTreeModule$$$filter1(comparer$$7, f$$4, k$$9, v$$7, acc$$5);\n        }\n\n      case 2:\n        {\n          const v$$8 = s$$2.fields[1];\n          const r$$6 = s$$2.fields[3];\n          const l$$6 = s$$2.fields[2];\n          const k$$10 = s$$2.fields[0];\n          const acc$$6 = MapTreeModule$$$filterAux(comparer$$7, f$$4, l$$6, acc$$5);\n          const acc$$7 = MapTreeModule$$$filter1(comparer$$7, f$$4, k$$10, v$$8, acc$$6);\n          $arg$$34 = comparer$$7;\n          $arg$$35 = f$$4;\n          $arg$$36 = r$$6;\n          $arg$$37 = acc$$7;\n          continue MapTreeModule$$$filterAux;\n        }\n\n      default:\n        {\n          return acc$$5;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$filter(comparer$$8, f$$5, s$$3) {\n  return MapTreeModule$$$filterAux(comparer$$8, f$$5, s$$3, MapTreeModule$$$empty());\n}\nexport function MapTreeModule$$$spliceOutSuccessor(m$$6) {\n  switch (m$$6.tag) {\n    case 1:\n      {\n        const v2$$5 = m$$6.fields[1];\n        const k2$$6 = m$$6.fields[0];\n        return [k2$$6, v2$$5, new MapTree$00602(0, \"MapEmpty\")];\n      }\n\n    case 2:\n      {\n        const v2$$6 = m$$6.fields[1];\n        const r$$7 = m$$6.fields[3];\n        const l$$7 = m$$6.fields[2];\n        const k2$$7 = m$$6.fields[0];\n\n        if (l$$7.tag === 0) {\n          return [k2$$7, v2$$6, r$$7];\n        } else {\n          const patternInput = MapTreeModule$$$spliceOutSuccessor(l$$7);\n          return [patternInput[0], patternInput[1], MapTreeModule$$$mk(patternInput[2], k2$$7, v2$$6, r$$7)];\n        }\n      }\n\n    default:\n      {\n        throw new Error(\"internal error: Map.spliceOutSuccessor\");\n      }\n  }\n}\nexport function MapTreeModule$$$remove(comparer$$9, k$$11, m$$7) {\n  switch (m$$7.tag) {\n    case 1:\n      {\n        const k2$$8 = m$$7.fields[0];\n        const c$$6 = comparer$$9.Compare(k$$11, k2$$8) | 0;\n\n        if (c$$6 === 0) {\n          return new MapTree$00602(0, \"MapEmpty\");\n        } else {\n          return m$$7;\n        }\n      }\n\n    case 2:\n      {\n        const v2$$7 = m$$7.fields[1];\n        const r$$8 = m$$7.fields[3];\n        const l$$8 = m$$7.fields[2];\n        const k2$$9 = m$$7.fields[0];\n        const c$$7 = comparer$$9.Compare(k$$11, k2$$9) | 0;\n\n        if (c$$7 < 0) {\n          return MapTreeModule$$$rebalance(MapTreeModule$$$remove(comparer$$9, k$$11, l$$8), k2$$9, v2$$7, r$$8);\n        } else if (c$$7 === 0) {\n          const matchValue$$1 = [l$$8, r$$8];\n\n          if (matchValue$$1[0].tag === 0) {\n            return r$$8;\n          } else if (matchValue$$1[1].tag === 0) {\n            return l$$8;\n          } else {\n            const patternInput$$1 = MapTreeModule$$$spliceOutSuccessor(r$$8);\n            return MapTreeModule$$$mk(l$$8, patternInput$$1[0], patternInput$$1[1], patternInput$$1[2]);\n          }\n        } else {\n          return MapTreeModule$$$rebalance(l$$8, k2$$9, v2$$7, MapTreeModule$$$remove(comparer$$9, k$$11, r$$8));\n        }\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$mem(comparer$$10, k$$12, m$$8) {\n  MapTreeModule$$$mem: while (true) {\n    switch (m$$8.tag) {\n      case 1:\n        {\n          const k2$$10 = m$$8.fields[0];\n          return comparer$$10.Compare(k$$12, k2$$10) === 0;\n        }\n\n      case 2:\n        {\n          const r$$9 = m$$8.fields[3];\n          const l$$9 = m$$8.fields[2];\n          const k2$$11 = m$$8.fields[0];\n          const c$$8 = comparer$$10.Compare(k$$12, k2$$11) | 0;\n\n          if (c$$8 < 0) {\n            const $comparer$$10$$41 = comparer$$10;\n            const $k$$12$$42 = k$$12;\n            comparer$$10 = $comparer$$10$$41;\n            k$$12 = $k$$12$$42;\n            m$$8 = l$$9;\n            continue MapTreeModule$$$mem;\n          } else if (c$$8 === 0) {\n            return true;\n          } else {\n            const $comparer$$10$$43 = comparer$$10;\n            const $k$$12$$44 = k$$12;\n            comparer$$10 = $comparer$$10$$43;\n            k$$12 = $k$$12$$44;\n            m$$8 = r$$9;\n            continue MapTreeModule$$$mem;\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$iter($arg$$45, $arg$$46) {\n  MapTreeModule$$$iter: while (true) {\n    const f$$6 = $arg$$45,\n          m$$9 = $arg$$46;\n\n    switch (m$$9.tag) {\n      case 1:\n        {\n          const v2$$8 = m$$9.fields[1];\n          const k2$$12 = m$$9.fields[0];\n          f$$6(k2$$12, v2$$8);\n          break;\n        }\n\n      case 2:\n        {\n          const v2$$9 = m$$9.fields[1];\n          const r$$10 = m$$9.fields[3];\n          const l$$10 = m$$9.fields[2];\n          const k2$$13 = m$$9.fields[0];\n          MapTreeModule$$$iter(f$$6, l$$10);\n          f$$6(k2$$13, v2$$9);\n          $arg$$45 = f$$6;\n          $arg$$46 = r$$10;\n          continue MapTreeModule$$$iter;\n          break;\n        }\n\n      default:\n        {}\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$tryPick($arg$$47, $arg$$48) {\n  MapTreeModule$$$tryPick: while (true) {\n    const f$$7 = $arg$$47,\n          m$$10 = $arg$$48;\n\n    switch (m$$10.tag) {\n      case 1:\n        {\n          const v2$$10 = m$$10.fields[1];\n          const k2$$14 = m$$10.fields[0];\n          return f$$7(k2$$14, v2$$10);\n        }\n\n      case 2:\n        {\n          const v2$$11 = m$$10.fields[1];\n          const r$$11 = m$$10.fields[3];\n          const l$$11 = m$$10.fields[2];\n          const k2$$15 = m$$10.fields[0];\n          const matchValue$$2 = MapTreeModule$$$tryPick(f$$7, l$$11);\n\n          if (matchValue$$2 == null) {\n            const matchValue$$3 = f$$7(k2$$15, v2$$11);\n\n            if (matchValue$$3 == null) {\n              $arg$$47 = f$$7;\n              $arg$$48 = r$$11;\n              continue MapTreeModule$$$tryPick;\n            } else {\n              const res$$1 = matchValue$$3;\n              return res$$1;\n            }\n          } else {\n            const res = matchValue$$2;\n            return res;\n          }\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$exists($arg$$49, $arg$$50) {\n  MapTreeModule$$$exists: while (true) {\n    const f$$8 = $arg$$49,\n          m$$11 = $arg$$50;\n\n    switch (m$$11.tag) {\n      case 1:\n        {\n          const v2$$12 = m$$11.fields[1];\n          const k2$$16 = m$$11.fields[0];\n          return f$$8(k2$$16, v2$$12);\n        }\n\n      case 2:\n        {\n          const v2$$13 = m$$11.fields[1];\n          const r$$12 = m$$11.fields[3];\n          const l$$12 = m$$11.fields[2];\n          const k2$$17 = m$$11.fields[0];\n\n          if (MapTreeModule$$$exists(f$$8, l$$12) ? true : f$$8(k2$$17, v2$$13)) {\n            return true;\n          } else {\n            $arg$$49 = f$$8;\n            $arg$$50 = r$$12;\n            continue MapTreeModule$$$exists;\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$forall($arg$$51, $arg$$52) {\n  MapTreeModule$$$forall: while (true) {\n    const f$$9 = $arg$$51,\n          m$$12 = $arg$$52;\n\n    switch (m$$12.tag) {\n      case 1:\n        {\n          const v2$$14 = m$$12.fields[1];\n          const k2$$18 = m$$12.fields[0];\n          return f$$9(k2$$18, v2$$14);\n        }\n\n      case 2:\n        {\n          const v2$$15 = m$$12.fields[1];\n          const r$$13 = m$$12.fields[3];\n          const l$$13 = m$$12.fields[2];\n          const k2$$19 = m$$12.fields[0];\n\n          if (MapTreeModule$$$forall(f$$9, l$$13) ? f$$9(k2$$19, v2$$15) : false) {\n            $arg$$51 = f$$9;\n            $arg$$52 = r$$13;\n            continue MapTreeModule$$$forall;\n          } else {\n            return false;\n          }\n        }\n\n      default:\n        {\n          return true;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$map(f$$10, m$$13) {\n  switch (m$$13.tag) {\n    case 1:\n      {\n        const v$$9 = m$$13.fields[1];\n        const k$$13 = m$$13.fields[0];\n        return new MapTree$00602(1, \"MapOne\", k$$13, f$$10(v$$9));\n      }\n\n    case 2:\n      {\n        const v$$10 = m$$13.fields[1];\n        const r$$14 = m$$13.fields[3];\n        const l$$14 = m$$13.fields[2];\n        const k$$14 = m$$13.fields[0];\n        const h$$2 = m$$13.fields[4] | 0;\n        const l2 = MapTreeModule$$$map(f$$10, l$$14);\n        const v2$$16 = f$$10(v$$10);\n        const r2 = MapTreeModule$$$map(f$$10, r$$14);\n        return new MapTree$00602(2, \"MapNode\", k$$14, v2$$16, l2, r2, h$$2);\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$mapi(f$$11, m$$14) {\n  switch (m$$14.tag) {\n    case 1:\n      {\n        const v$$11 = m$$14.fields[1];\n        const k$$15 = m$$14.fields[0];\n        return new MapTree$00602(1, \"MapOne\", k$$15, f$$11(k$$15, v$$11));\n      }\n\n    case 2:\n      {\n        const v$$12 = m$$14.fields[1];\n        const r$$15 = m$$14.fields[3];\n        const l$$15 = m$$14.fields[2];\n        const k$$16 = m$$14.fields[0];\n        const h$$3 = m$$14.fields[4] | 0;\n        const l2$$1 = MapTreeModule$$$mapi(f$$11, l$$15);\n        const v2$$17 = f$$11(k$$16, v$$12);\n        const r2$$1 = MapTreeModule$$$mapi(f$$11, r$$15);\n        return new MapTree$00602(2, \"MapNode\", k$$16, v2$$17, l2$$1, r2$$1, h$$3);\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$foldBack($arg$$57, $arg$$58, $arg$$59) {\n  MapTreeModule$$$foldBack: while (true) {\n    const f$$12 = $arg$$57,\n          m$$15 = $arg$$58,\n          x$$1 = $arg$$59;\n\n    switch (m$$15.tag) {\n      case 1:\n        {\n          const v$$13 = m$$15.fields[1];\n          const k$$17 = m$$15.fields[0];\n          return f$$12(k$$17, v$$13, x$$1);\n        }\n\n      case 2:\n        {\n          const v$$14 = m$$15.fields[1];\n          const r$$16 = m$$15.fields[3];\n          const l$$16 = m$$15.fields[2];\n          const k$$18 = m$$15.fields[0];\n          const x$$2 = MapTreeModule$$$foldBack(f$$12, r$$16, x$$1);\n          const x$$3 = f$$12(k$$18, v$$14, x$$2);\n          $arg$$57 = f$$12;\n          $arg$$58 = l$$16;\n          $arg$$59 = x$$3;\n          continue MapTreeModule$$$foldBack;\n        }\n\n      default:\n        {\n          return x$$1;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$fold($arg$$60, $arg$$61, $arg$$62) {\n  MapTreeModule$$$fold: while (true) {\n    const f$$13 = $arg$$60,\n          x$$4 = $arg$$61,\n          m$$16 = $arg$$62;\n\n    switch (m$$16.tag) {\n      case 1:\n        {\n          const v$$15 = m$$16.fields[1];\n          const k$$19 = m$$16.fields[0];\n          return f$$13(x$$4, k$$19, v$$15);\n        }\n\n      case 2:\n        {\n          const v$$16 = m$$16.fields[1];\n          const r$$17 = m$$16.fields[3];\n          const l$$17 = m$$16.fields[2];\n          const k$$20 = m$$16.fields[0];\n          const x$$5 = MapTreeModule$$$fold(f$$13, x$$4, l$$17);\n          const x$$6 = f$$13(x$$5, k$$20, v$$16);\n          $arg$$60 = f$$13;\n          $arg$$61 = x$$6;\n          $arg$$62 = r$$17;\n          continue MapTreeModule$$$fold;\n        }\n\n      default:\n        {\n          return x$$4;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, m$$17, x$$7) {\n  switch (m$$17.tag) {\n    case 1:\n      {\n        const v$$17 = m$$17.fields[1];\n        const k$$21 = m$$17.fields[0];\n        const cLoKey = comparer$$11.Compare(lo, k$$21) | 0;\n        const cKeyHi = comparer$$11.Compare(k$$21, hi) | 0;\n        const x$$8 = (cLoKey <= 0 ? cKeyHi <= 0 : false) ? f$$14(k$$21, v$$17, x$$7) : x$$7;\n        return x$$8;\n      }\n\n    case 2:\n      {\n        const v$$18 = m$$17.fields[1];\n        const r$$18 = m$$17.fields[3];\n        const l$$18 = m$$17.fields[2];\n        const k$$22 = m$$17.fields[0];\n        const cLoKey$$1 = comparer$$11.Compare(lo, k$$22) | 0;\n        const cKeyHi$$1 = comparer$$11.Compare(k$$22, hi) | 0;\n        const x$$9 = cLoKey$$1 < 0 ? MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, l$$18, x$$7) : x$$7;\n        const x$$10 = (cLoKey$$1 <= 0 ? cKeyHi$$1 <= 0 : false) ? f$$14(k$$22, v$$18, x$$9) : x$$9;\n        const x$$11 = cKeyHi$$1 < 0 ? MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, r$$18, x$$10) : x$$10;\n        return x$$11;\n      }\n\n    default:\n      {\n        return x$$7;\n      }\n  }\n}\nexport function MapTreeModule$$$foldSection(comparer$$12, lo$$1, hi$$1, f$$15, m$$18, x$$12) {\n  if (comparer$$12.Compare(lo$$1, hi$$1) === 1) {\n    return x$$12;\n  } else {\n    return MapTreeModule$$$foldFromTo(comparer$$12, lo$$1, hi$$1, f$$15, m$$18, x$$12);\n  }\n}\nexport function MapTreeModule$$$loop(m$$19, acc$$8) {\n  MapTreeModule$$$loop: while (true) {\n    switch (m$$19.tag) {\n      case 1:\n        {\n          const v$$19 = m$$19.fields[1];\n          const k$$23 = m$$19.fields[0];\n          return new List([k$$23, v$$19], acc$$8);\n        }\n\n      case 2:\n        {\n          const v$$20 = m$$19.fields[1];\n          const r$$19 = m$$19.fields[3];\n          const l$$19 = m$$19.fields[2];\n          const k$$24 = m$$19.fields[0];\n          const $acc$$8$$75 = acc$$8;\n          m$$19 = l$$19;\n          acc$$8 = new List([k$$24, v$$20], MapTreeModule$$$loop(r$$19, $acc$$8$$75));\n          continue MapTreeModule$$$loop;\n        }\n\n      default:\n        {\n          return acc$$8;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$toList(m$$20) {\n  return MapTreeModule$$$loop(m$$20, new List());\n}\nexport function MapTreeModule$$$ofList(comparer$$13, l$$20) {\n  return fold$$1(function (acc$$9, tupledArg) {\n    return MapTreeModule$$$add(comparer$$13, tupledArg[0], tupledArg[1], acc$$9);\n  }, MapTreeModule$$$empty(), l$$20);\n}\nexport function MapTreeModule$$$mkFromEnumerator(comparer$$14, acc$$10, e) {\n  MapTreeModule$$$mkFromEnumerator: while (true) {\n    if (e.MoveNext()) {\n      const patternInput$$2 = e.Current;\n      const $acc$$10$$77 = acc$$10;\n      const $comparer$$14$$76 = comparer$$14;\n      const $e$$78 = e;\n      comparer$$14 = $comparer$$14$$76;\n      acc$$10 = MapTreeModule$$$add($comparer$$14$$76, patternInput$$2[0], patternInput$$2[1], $acc$$10$$77);\n      e = $e$$78;\n      continue MapTreeModule$$$mkFromEnumerator;\n    } else {\n      return acc$$10;\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$ofArray(comparer$$15, arr) {\n  let res$$2 = MapTreeModule$$$empty();\n\n  for (let i = 0; i <= arr.length - 1; i++) {\n    const patternInput$$3 = arr[i];\n    res$$2 = MapTreeModule$$$add(comparer$$15, patternInput$$3[0], patternInput$$3[1], res$$2);\n  }\n\n  return res$$2;\n}\nexport function MapTreeModule$$$ofSeq(comparer$$16, c$$9) {\n  const ie = getEnumerator(c$$9);\n\n  try {\n    return MapTreeModule$$$mkFromEnumerator(comparer$$16, MapTreeModule$$$empty(), ie);\n  } finally {\n    if (isDisposable(ie)) {\n      ie.Dispose();\n    }\n  }\n}\nexport function MapTreeModule$$$copyToArray(s$$4, arr$$1, i$$1) {\n  let j = i$$1 | 0;\n  MapTreeModule$$$iter(function f$$16(x$$15, y$$2) {\n    arr$$1[j] = [x$$15, y$$2];\n    j = j + 1;\n  }, s$$4);\n}\nexport const MapTreeModule$002EMapIterator$00602 = declare(function Map_MapTreeModule_MapIterator(arg1, arg2) {\n  this.stack = arg1;\n  this.started = arg2;\n}, Record);\nexport function MapTreeModule$002EMapIterator$00602$reflection($gen$$79, $gen$$80) {\n  return record(\"Map.MapTreeModule.MapIterator`2\", [$gen$$79, $gen$$80], MapTreeModule$002EMapIterator$00602, () => [[\"stack\", list(MapTree$00602$reflection($gen$$79, $gen$$80))], [\"started\", bool]]);\n}\nexport function MapTreeModule$$$collapseLHS(stack) {\n  MapTreeModule$$$collapseLHS: while (true) {\n    if (stack.tail != null) {\n      if (stack.head.tag === 1) {\n        return stack;\n      } else if (stack.head.tag === 2) {\n        const $stack$$81 = stack;\n        stack = new List($stack$$81.head.fields[2], new List(new MapTree$00602(1, \"MapOne\", $stack$$81.head.fields[0], $stack$$81.head.fields[1]), new List($stack$$81.head.fields[3], $stack$$81.tail)));\n        continue MapTreeModule$$$collapseLHS;\n      } else {\n        const $stack$$82 = stack;\n        stack = $stack$$82.tail;\n        continue MapTreeModule$$$collapseLHS;\n      }\n    } else {\n      return new List();\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$mkIterator(s$$5) {\n  return new MapTreeModule$002EMapIterator$00602(MapTreeModule$$$collapseLHS(new List(s$$5, new List())), false);\n}\nexport function MapTreeModule$$$notStarted() {\n  throw new Error(\"enumeration not started\");\n}\nexport function MapTreeModule$$$alreadyFinished() {\n  throw new Error(\"enumeration already finished\");\n}\nexport function MapTreeModule$$$current(i$$2) {\n  if (i$$2.started) {\n    const matchValue$$4 = i$$2.stack;\n\n    if (matchValue$$4.tail == null) {\n      return MapTreeModule$$$alreadyFinished();\n    } else if (matchValue$$4.head.tag === 1) {\n      return [matchValue$$4.head.fields[0], matchValue$$4.head.fields[1]];\n    } else {\n      throw new Error(\"Please report error: Map iterator, unexpected stack for current\");\n    }\n  } else {\n    return MapTreeModule$$$notStarted();\n  }\n}\nexport function MapTreeModule$$$moveNext(i$$3) {\n  if (i$$3.started) {\n    const matchValue$$5 = i$$3.stack;\n\n    if (matchValue$$5.tail == null) {\n      return false;\n    } else if (matchValue$$5.head.tag === 1) {\n      i$$3.stack = MapTreeModule$$$collapseLHS(matchValue$$5.tail);\n      return !(i$$3.stack.tail == null);\n    } else {\n      throw new Error(\"Please report error: Map iterator, unexpected stack for moveNext\");\n    }\n  } else {\n    i$$3.started = true;\n    return !(i$$3.stack.tail == null);\n  }\n}\nexport const MapTreeModule$002EmkIEnumerator$0027$00602 = declare(function Map_MapTreeModule_mkIEnumerator_(s$$6) {\n  const $this$$1 = this;\n  $this$$1.s = s$$6;\n  $this$$1.i = MapTreeModule$$$mkIterator($this$$1.s);\n});\nexport function MapTreeModule$002EmkIEnumerator$0027$00602$reflection($gen$$83, $gen$$84) {\n  return type(\"Map.MapTreeModule.mkIEnumerator'`2\", [$gen$$83, $gen$$84]);\n}\nexport function MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C(s$$6) {\n  return this instanceof MapTreeModule$002EmkIEnumerator$0027$00602 ? MapTreeModule$002EmkIEnumerator$0027$00602.call(this, s$$6) : new MapTreeModule$002EmkIEnumerator$0027$00602(s$$6);\n}\nObject.defineProperty(MapTreeModule$002EmkIEnumerator$0027$00602.prototype, \"Current\", {\n  \"get\": function () {\n    const __ = this;\n    return MapTreeModule$$$current(__.i);\n  }\n});\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.MoveNext = function () {\n  const __$$1 = this;\n  return MapTreeModule$$$moveNext(__$$1.i);\n};\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.Reset = function () {\n  const __$$2 = this;\n  __$$2.i = MapTreeModule$$$mkIterator(__$$2.s);\n};\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.Dispose = function () {};\n\nexport function MapTreeModule$$$mkIEnumerator(s$$7) {\n  return MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C(s$$7);\n}\nexport function MapTreeModule$$$toSeq(s$$8) {\n  const en = MapTreeModule$$$mkIEnumerator(s$$8);\n  return unfold(function generator(en$$1) {\n    if (en$$1.MoveNext()) {\n      return [en$$1.Current, en$$1];\n    } else {\n      return null;\n    }\n  }, en);\n}\nexport const FSharpMap = declare(function Map_Map(comparer$$17, tree) {\n  const $this$$2 = this;\n  $this$$2.comparer = comparer$$17;\n  $this$$2.tree = tree;\n});\nexport function FSharpMap$reflection($gen$$85, $gen$$86) {\n  return type(\"Map.FSharpMap\", [$gen$$85, $gen$$86]);\n}\nexport function FSharpMap$$$$002Ector$$58ADD115(comparer$$17, tree) {\n  return this instanceof FSharpMap ? FSharpMap.call(this, comparer$$17, tree) : new FSharpMap(comparer$$17, tree);\n}\nexport function FSharpMap$$get_Comparer(__$$4) {\n  return __$$4.comparer;\n}\nexport function FSharpMap$$get_Tree(__$$5) {\n  return __$$5.tree;\n}\nexport function FSharpMap$$Add$$5BDDA1(__$$6, k$$28, v$$24) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$6.comparer, MapTreeModule$$$add(__$$6.comparer, k$$28, v$$24, __$$6.tree));\n}\nexport function FSharpMap$$get_IsEmpty(__$$7) {\n  return MapTreeModule$$$isEmpty(__$$7.tree);\n}\nexport function FSharpMap$$get_Item$$2B595(__$$8, k$$29) {\n  return MapTreeModule$$$find(__$$8.comparer, k$$29, __$$8.tree);\n}\nexport function FSharpMap$$TryGetValue$$5BDDA1(__$$9, k$$30, defValue) {\n  const matchValue$$6 = MapTreeModule$$$tryFind(__$$9.comparer, k$$30, __$$9.tree);\n\n  if (matchValue$$6 == null) {\n    return [false, defValue];\n  } else {\n    const v$$25 = value$$3(matchValue$$6);\n    return [true, v$$25];\n  }\n}\nexport function FSharpMap$$TryPick$$72321DD7(__$$10, f$$17) {\n  return MapTreeModule$$$tryPick(f$$17, __$$10.tree);\n}\nexport function FSharpMap$$Exists$$Z395DDC35(__$$11, f$$18) {\n  return MapTreeModule$$$exists(f$$18, __$$11.tree);\n}\nexport function FSharpMap$$Filter$$Z395DDC35(__$$12, f$$19) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$12.comparer, MapTreeModule$$$filter(__$$12.comparer, f$$19, __$$12.tree));\n}\nexport function FSharpMap$$ForAll$$Z395DDC35(__$$13, f$$20) {\n  return MapTreeModule$$$forall(f$$20, __$$13.tree);\n}\nexport function FSharpMap$$Fold(__$$14, f$$21, acc$$11) {\n  return MapTreeModule$$$foldBack(f$$21, __$$14.tree, acc$$11);\n}\nexport function FSharpMap$$FoldSection(__$$15, lo$$2, hi$$2, f$$22, acc$$12) {\n  return MapTreeModule$$$foldSection(__$$15.comparer, lo$$2, hi$$2, f$$22, __$$15.tree, acc$$12);\n}\nexport function FSharpMap$$Iterate$$1DCFB91D(__$$16, f$$23) {\n  MapTreeModule$$$iter(f$$23, __$$16.tree);\n}\nexport function FSharpMap$$MapRange$$6DC7247(__$$17, f$$24) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$17.comparer, MapTreeModule$$$map(f$$24, __$$17.tree));\n}\nexport function FSharpMap$$Map$$Z6F6B671C(__$$18, f$$25) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$18.comparer, MapTreeModule$$$mapi(f$$25, __$$18.tree));\n}\nexport function FSharpMap$$Partition$$Z395DDC35(__$$19, f$$26) {\n  const patternInput$$4 = MapTreeModule$$$partition(__$$19.comparer, f$$26, __$$19.tree);\n  return [FSharpMap$$$$002Ector$$58ADD115(__$$19.comparer, patternInput$$4[0]), FSharpMap$$$$002Ector$$58ADD115(__$$19.comparer, patternInput$$4[1])];\n}\nexport function FSharpMap$$get_Count(__$$20) {\n  return MapTreeModule$$$size(__$$20.tree);\n}\nexport function FSharpMap$$ContainsKey$$2B595(__$$21, k$$31) {\n  return MapTreeModule$$$mem(__$$21.comparer, k$$31, __$$21.tree);\n}\nexport function FSharpMap$$Remove$$2B595(__$$22, k$$32) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$22.comparer, MapTreeModule$$$remove(__$$22.comparer, k$$32, __$$22.tree));\n}\nexport function FSharpMap$$TryFind$$2B595(__$$23, k$$33) {\n  return MapTreeModule$$$tryFind(__$$23.comparer, k$$33, __$$23.tree);\n}\nexport function FSharpMap$$ToList(__$$24) {\n  return MapTreeModule$$$toList(__$$24.tree);\n}\n\nFSharpMap.prototype.toString = function () {\n  const this$ = this;\n  return \"map [\" + join(\"; \", ...map$$1(function mapping(kv) {\n    return toText(printf(\"(%A, %A)\"))(kv[0])(kv[1]);\n  }, this$)) + \"]\";\n};\n\nFSharpMap.prototype.GetHashCode = function () {\n  const this$$$1 = this;\n\n  const combineHash = function combineHash(x$$16, y$$3) {\n    return (x$$16 << 1) + y$$3 + 631;\n  };\n\n  let res$$3 = 0;\n  const e$$1 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(this$$$1));\n\n  while (e$$1.MoveNext()) {\n    const patternInput$$5 = e$$1.Current;\n    const activePatternResult3097 = patternInput$$5;\n    res$$3 = combineHash(res$$3, structuralHash(activePatternResult3097[0]));\n    res$$3 = combineHash(res$$3, structuralHash(activePatternResult3097[1]));\n  }\n\n  return Math.abs(res$$3) | 0;\n};\n\nFSharpMap.prototype.Equals = function (that) {\n  const this$$$2 = this;\n  return this$$$2.CompareTo(that) === 0;\n};\n\nFSharpMap.prototype[Symbol.iterator] = function () {\n  const __$$25 = this;\n  return toIterator(MapTreeModule$$$mkIEnumerator(__$$25.tree));\n};\n\nFSharpMap.prototype.CompareTo = function (obj) {\n  const m$$22 = this;\n  const m2 = obj;\n  let res$$4 = 0;\n  let finished = false;\n  const e1 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(m$$22));\n\n  try {\n    const e2 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(m2));\n\n    try {\n      while (!finished ? res$$4 === 0 : false) {\n        const matchValue$$7 = [e1.MoveNext(), e2.MoveNext()];\n\n        if (matchValue$$7[0]) {\n          if (matchValue$$7[1]) {\n            const kvp1 = e1.Current;\n            const kvp2 = e2.Current;\n            const c$$10 = m$$22.comparer.Compare(kvp1[0], kvp2[0]) | 0;\n            res$$4 = c$$10 !== 0 ? c$$10 : compare(kvp1[1], kvp2[1]);\n          } else {\n            res$$4 = 1;\n          }\n        } else if (matchValue$$7[1]) {\n          res$$4 = -1;\n        } else {\n          finished = true;\n        }\n      }\n\n      return res$$4 | 0;\n    } finally {\n      if (isDisposable(e2)) {\n        e2.Dispose();\n      }\n    }\n  } finally {\n    if (isDisposable(e1)) {\n      e1.Dispose();\n    }\n  }\n};\n\nexport function isEmpty(m$$23) {\n  return FSharpMap$$get_IsEmpty(m$$23);\n}\nexport function add(k$$34, v$$26, m$$24) {\n  return FSharpMap$$Add$$5BDDA1(m$$24, k$$34, v$$26);\n}\nexport function find(k$$35, m$$25) {\n  return FSharpMap$$get_Item$$2B595(m$$25, k$$35);\n}\nexport function tryFind(k$$36, m$$26) {\n  return FSharpMap$$TryFind$$2B595(m$$26, k$$36);\n}\nexport function remove(k$$37, m$$27) {\n  return FSharpMap$$Remove$$2B595(m$$27, k$$37);\n}\nexport function containsKey(k$$38, m$$28) {\n  return FSharpMap$$ContainsKey$$2B595(m$$28, k$$38);\n}\nexport function iterate(f$$27, m$$29) {\n  FSharpMap$$Iterate$$1DCFB91D(m$$29, f$$27);\n}\nexport function tryPick(f$$28, m$$30) {\n  return FSharpMap$$TryPick$$72321DD7(m$$30, f$$28);\n}\nexport function pick(f$$29, m$$31) {\n  const matchValue$$8 = tryPick(f$$29, m$$31);\n\n  if (matchValue$$8 != null) {\n    const res$$5 = value$$3(matchValue$$8);\n    return res$$5;\n  } else {\n    throw new Error(\"key not found\");\n  }\n}\nexport function exists(f$$30, m$$32) {\n  return FSharpMap$$Exists$$Z395DDC35(m$$32, f$$30);\n}\nexport function filter(f$$31, m$$33) {\n  return FSharpMap$$Filter$$Z395DDC35(m$$33, f$$31);\n}\nexport function partition(f$$32, m$$34) {\n  return FSharpMap$$Partition$$Z395DDC35(m$$34, f$$32);\n}\nexport function forAll(f$$33, m$$35) {\n  return FSharpMap$$ForAll$$Z395DDC35(m$$35, f$$33);\n}\nexport function mapRange(f$$34, m$$36) {\n  return FSharpMap$$MapRange$$6DC7247(m$$36, f$$34);\n}\nexport function map(f$$35, m$$37) {\n  return FSharpMap$$Map$$Z6F6B671C(m$$37, f$$35);\n}\nexport function fold(f$$36, z, m$$38) {\n  return MapTreeModule$$$fold(f$$36, z, FSharpMap$$get_Tree(m$$38));\n}\nexport function foldBack(f$$37, m$$39, z$$1) {\n  return MapTreeModule$$$foldBack(f$$37, FSharpMap$$get_Tree(m$$39), z$$1);\n}\nexport function toSeq(m$$40) {\n  return MapTreeModule$$$toSeq(FSharpMap$$get_Tree(m$$40));\n}\nexport function findKey(f$$38, m$$41) {\n  const _arg1$$1 = MapTreeModule$$$tryPick(function f$$39(k$$39, v$$27) {\n    if (f$$38(k$$39, v$$27)) {\n      return some(k$$39);\n    } else {\n      return null;\n    }\n  }, FSharpMap$$get_Tree(m$$41));\n\n  if (_arg1$$1 == null) {\n    throw new Error(\"Key not found\");\n  } else {\n    const k$$40 = value$$3(_arg1$$1);\n    return k$$40;\n  }\n}\nexport function tryFindKey(f$$40, m$$43) {\n  return MapTreeModule$$$tryPick(function f$$41(k$$41, v$$28) {\n    if (f$$40(k$$41, v$$28)) {\n      return some(k$$41);\n    } else {\n      return null;\n    }\n  }, FSharpMap$$get_Tree(m$$43));\n}\nexport function ofList(l$$22, comparer$$18) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$18, MapTreeModule$$$ofList(comparer$$18, l$$22));\n}\nexport function ofSeq(l$$23, comparer$$19) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$19, MapTreeModule$$$ofSeq(comparer$$19, l$$23));\n}\nexport function ofArray(array, comparer$$20) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$20, MapTreeModule$$$ofArray(comparer$$20, array));\n}\nexport function toList(m$$45) {\n  return FSharpMap$$ToList(m$$45);\n}\nexport function toArray(m$$46) {\n  const res$$6 = new Array(FSharpMap$$get_Count(m$$46));\n  MapTreeModule$$$copyToArray(FSharpMap$$get_Tree(m$$46), res$$6, 0);\n  return res$$6;\n}\nexport function empty(comparer$$21) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$21, new MapTree$00602(0, \"MapEmpty\"));\n}\n\nfunction createMutablePrivate(comparer$$22, tree$0027) {\n  let tree$$1 = tree$0027;\n  return {\n    get size() {\n      return MapTreeModule$$$size(tree$$1);\n    },\n\n    clear() {\n      tree$$1 = new MapTree$00602(0, \"MapEmpty\");\n    },\n\n    delete(x$$18) {\n      if (MapTreeModule$$$mem(comparer$$22, x$$18, tree$$1)) {\n        tree$$1 = MapTreeModule$$$remove(comparer$$22, x$$18, tree$$1);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    entries() {\n      return MapTreeModule$$$toSeq(tree$$1);\n    },\n\n    get(k$$42) {\n      return MapTreeModule$$$find(comparer$$22, k$$42, tree$$1);\n    },\n\n    has(x$$19) {\n      return MapTreeModule$$$mem(comparer$$22, x$$19, tree$$1);\n    },\n\n    keys() {\n      return map$$1(function mapping$$1(kv$$1) {\n        return kv$$1[0];\n      }, MapTreeModule$$$toSeq(tree$$1));\n    },\n\n    set(k$$43, v$$29) {\n      const this$$$3 = this;\n      tree$$1 = MapTreeModule$$$add(comparer$$22, k$$43, v$$29, tree$$1);\n      return this$$$3;\n    },\n\n    values() {\n      return map$$1(function mapping$$2(kv$$2) {\n        return kv$$2[1];\n      }, MapTreeModule$$$toSeq(tree$$1));\n    },\n\n    [Symbol.iterator]() {\n      return toIterator(MapTreeModule$$$mkIEnumerator(tree$$1));\n    },\n\n    GetEnumerator() {\n      return MapTreeModule$$$mkIEnumerator(tree$$1);\n    }\n\n  };\n}\n\nexport function createMutable(source$$3, comparer$$23) {\n  return createMutablePrivate(comparer$$23, MapTreeModule$$$ofSeq(comparer$$23, source$$3));\n}\nexport function groupBy(projection, xs, comparer$$24) {\n  const dict = createMutable(empty$$1(), comparer$$24);\n  iterate$$1(function (v$$30) {\n    const key = projection(v$$30);\n\n    if (dict.has(key)) {\n      dict.get(key).push(v$$30);\n    } else {\n      dict.set(key, Array.from([v$$30])), null;\n    }\n  }, xs);\n  return map$$1(function mapping$$3(kv$$3) {\n    return [kv$$3[0], kv$$3[1]];\n  }, dict);\n}\nexport function countBy(projection$$1, xs$$1, comparer$$25) {\n  const dict$$1 = createMutable(empty$$1(), comparer$$25);\n  iterate$$1(function (value$$1) {\n    const key$$1 = projection$$1(value$$1);\n    dict$$1.has(key$$1) ? dict$$1.set(key$$1, dict$$1.get(key$$1) + 1) : dict$$1.set(key$$1, 1), null;\n  }, xs$$1);\n  return map$$1(function mapping$$4(kv$$4) {\n    return [kv$$4[0], kv$$4[1]];\n  }, dict$$1);\n}\nexport function count(m$$47) {\n  return FSharpMap$$get_Count(m$$47);\n}","import { List, Record, declare, Union } from \"./Types.js\";\nimport { type, record, bool, list, union as union$$1, int32 } from \"./Reflection.js\";\nimport { value as value$$2, some, Choice } from \"./Option.js\";\nimport { iterate as iterate$$1, empty as empty$$1, fold as fold$$1, toIterator, map as map$$1, reduce, getEnumerator, unfold } from \"./Seq.js\";\nimport { structuralHash, isDisposable } from \"./Util.js\";\nimport { join } from \"./String.js\";\nexport const SetTree$00601 = declare(function Set_SetTree(tag, name, ...fields) {\n  Union.call(this, tag, name, ...fields);\n}, Union);\nexport function SetTree$00601$reflection($gen$$3) {\n  return union$$1(\"Set.SetTree`1\", [$gen$$3], SetTree$00601, () => [\"SetEmpty\", [\"SetNode\", [$gen$$3, SetTree$00601$reflection($gen$$3), SetTree$00601$reflection($gen$$3), int32]], [\"SetOne\", [$gen$$3]]]);\n}\nexport function SetTreeModule$$$countAux(s, acc) {\n  SetTreeModule$$$countAux: while (true) {\n    switch (s.tag) {\n      case 2:\n        {\n          return acc + 1 | 0;\n        }\n\n      case 0:\n        {\n          return acc | 0;\n        }\n\n      default:\n        {\n          const r = s.fields[2];\n          const l = s.fields[1];\n          const $acc$$4 = acc;\n          s = l;\n          acc = SetTreeModule$$$countAux(r, $acc$$4 + 1);\n          continue SetTreeModule$$$countAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$count(s$$1) {\n  return SetTreeModule$$$countAux(s$$1, 0);\n}\nexport function SetTreeModule$$$SetOne(n) {\n  return new SetTree$00601(2, \"SetOne\", n);\n}\nexport function SetTreeModule$$$SetNode(x, l$$1, r$$1, h) {\n  return new SetTree$00601(1, \"SetNode\", x, l$$1, r$$1, h);\n}\nexport function SetTreeModule$$$height(t) {\n  switch (t.tag) {\n    case 2:\n      {\n        return 1;\n      }\n\n    case 1:\n      {\n        const h$$1 = t.fields[3] | 0;\n        return h$$1 | 0;\n      }\n\n    default:\n      {\n        return 0;\n      }\n  }\n}\nexport const SetTreeModule$$$tolerance = 2;\nexport function SetTreeModule$$$mk(l$$2, k, r$$2) {\n  const matchValue = [l$$2, r$$2];\n  var $target$$5;\n\n  if (matchValue[0].tag === 0) {\n    if (matchValue[1].tag === 0) {\n      $target$$5 = 0;\n    } else {\n      $target$$5 = 1;\n    }\n  } else {\n    $target$$5 = 1;\n  }\n\n  switch ($target$$5) {\n    case 0:\n      {\n        return SetTreeModule$$$SetOne(k);\n      }\n\n    case 1:\n      {\n        const hl = SetTreeModule$$$height(l$$2) | 0;\n        const hr = SetTreeModule$$$height(r$$2) | 0;\n        const m = (hl < hr ? hr : hl) | 0;\n        return SetTreeModule$$$SetNode(k, l$$2, r$$2, m + 1);\n      }\n  }\n}\nexport function SetTreeModule$$$rebalance(t1, k$$1, t2) {\n  const t1h = SetTreeModule$$$height(t1) | 0;\n  const t2h = SetTreeModule$$$height(t2) | 0;\n\n  if (t2h > t1h + SetTreeModule$$$tolerance) {\n    if (t2.tag === 1) {\n      const t2r = t2.fields[2];\n      const t2l = t2.fields[1];\n      const t2k = t2.fields[0];\n\n      if (SetTreeModule$$$height(t2l) > t1h + 1) {\n        if (t2l.tag === 1) {\n          const t2lr = t2l.fields[2];\n          const t2ll = t2l.fields[1];\n          const t2lk = t2l.fields[0];\n          return SetTreeModule$$$mk(SetTreeModule$$$mk(t1, k$$1, t2ll), t2lk, SetTreeModule$$$mk(t2lr, t2k, t2r));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return SetTreeModule$$$mk(SetTreeModule$$$mk(t1, k$$1, t2l), t2k, t2r);\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else if (t1h > t2h + SetTreeModule$$$tolerance) {\n    if (t1.tag === 1) {\n      const t1r = t1.fields[2];\n      const t1l = t1.fields[1];\n      const t1k = t1.fields[0];\n\n      if (SetTreeModule$$$height(t1r) > t2h + 1) {\n        if (t1r.tag === 1) {\n          const t1rr = t1r.fields[2];\n          const t1rl = t1r.fields[1];\n          const t1rk = t1r.fields[0];\n          return SetTreeModule$$$mk(SetTreeModule$$$mk(t1l, t1k, t1rl), t1rk, SetTreeModule$$$mk(t1rr, k$$1, t2));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return SetTreeModule$$$mk(t1l, t1k, SetTreeModule$$$mk(t1r, k$$1, t2));\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else {\n    return SetTreeModule$$$mk(t1, k$$1, t2);\n  }\n}\nexport function SetTreeModule$$$add(comparer, k$$2, t$$1) {\n  switch (t$$1.tag) {\n    case 2:\n      {\n        const k2$$1 = t$$1.fields[0];\n        const c$$1 = comparer.Compare(k$$2, k2$$1) | 0;\n\n        if (c$$1 < 0) {\n          return SetTreeModule$$$SetNode(k$$2, new SetTree$00601(0, \"SetEmpty\"), t$$1, 2);\n        } else if (c$$1 === 0) {\n          return t$$1;\n        } else {\n          return SetTreeModule$$$SetNode(k$$2, t$$1, new SetTree$00601(0, \"SetEmpty\"), 2);\n        }\n      }\n\n    case 0:\n      {\n        return SetTreeModule$$$SetOne(k$$2);\n      }\n\n    default:\n      {\n        const r$$3 = t$$1.fields[2];\n        const l$$3 = t$$1.fields[1];\n        const k2 = t$$1.fields[0];\n        const c = comparer.Compare(k$$2, k2) | 0;\n\n        if (c < 0) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$add(comparer, k$$2, l$$3), k2, r$$3);\n        } else if (c === 0) {\n          return t$$1;\n        } else {\n          return SetTreeModule$$$rebalance(l$$3, k2, SetTreeModule$$$add(comparer, k$$2, r$$3));\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$balance(comparer$$1, t1$$1, k$$3, t2$$1) {\n  const matchValue$$1 = [t1$$1, t2$$1];\n  var $target$$6, t2$$2, t1$$2, k1, t2$$3, k2$$2, t1$$3, h1, h2, k1$$1, k2$$3, t11, t12, t21, t22;\n\n  if (matchValue$$1[0].tag === 2) {\n    if (matchValue$$1[1].tag === 0) {\n      $target$$6 = 1;\n      t1$$2 = matchValue$$1[0];\n    } else if (matchValue$$1[1].tag === 2) {\n      $target$$6 = 2;\n      k1 = matchValue$$1[0].fields[0];\n      t2$$3 = matchValue$$1[1];\n    } else {\n      $target$$6 = 2;\n      k1 = matchValue$$1[0].fields[0];\n      t2$$3 = matchValue$$1[1];\n    }\n  } else if (matchValue$$1[0].tag === 1) {\n    if (matchValue$$1[1].tag === 2) {\n      $target$$6 = 3;\n      k2$$2 = matchValue$$1[1].fields[0];\n      t1$$3 = matchValue$$1[0];\n    } else if (matchValue$$1[1].tag === 1) {\n      $target$$6 = 4;\n      h1 = matchValue$$1[0].fields[3];\n      h2 = matchValue$$1[1].fields[3];\n      k1$$1 = matchValue$$1[0].fields[0];\n      k2$$3 = matchValue$$1[1].fields[0];\n      t11 = matchValue$$1[0].fields[1];\n      t12 = matchValue$$1[0].fields[2];\n      t21 = matchValue$$1[1].fields[1];\n      t22 = matchValue$$1[1].fields[2];\n    } else {\n      $target$$6 = 1;\n      t1$$2 = matchValue$$1[0];\n    }\n  } else {\n    $target$$6 = 0;\n    t2$$2 = matchValue$$1[1];\n  }\n\n  switch ($target$$6) {\n    case 0:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, t2$$2);\n      }\n\n    case 1:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, t1$$2);\n      }\n\n    case 2:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, SetTreeModule$$$add(comparer$$1, k1, t2$$3));\n      }\n\n    case 3:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, SetTreeModule$$$add(comparer$$1, k2$$2, t1$$3));\n      }\n\n    case 4:\n      {\n        if (h1 + SetTreeModule$$$tolerance < h2) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$balance(comparer$$1, t1$$1, k$$3, t21), k2$$3, t22);\n        } else if (h2 + SetTreeModule$$$tolerance < h1) {\n          return SetTreeModule$$$rebalance(t11, k1$$1, SetTreeModule$$$balance(comparer$$1, t12, k$$3, t2$$1));\n        } else {\n          return SetTreeModule$$$mk(t1$$1, k$$3, t2$$1);\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$split(comparer$$2, pivot, t$$2) {\n  switch (t$$2.tag) {\n    case 2:\n      {\n        const k1$$3 = t$$2.fields[0];\n        const c$$3 = comparer$$2.Compare(k1$$3, pivot) | 0;\n\n        if (c$$3 < 0) {\n          return [t$$2, false, new SetTree$00601(0, \"SetEmpty\")];\n        } else if (c$$3 === 0) {\n          return [new SetTree$00601(0, \"SetEmpty\"), true, new SetTree$00601(0, \"SetEmpty\")];\n        } else {\n          return [new SetTree$00601(0, \"SetEmpty\"), false, t$$2];\n        }\n      }\n\n    case 0:\n      {\n        return [new SetTree$00601(0, \"SetEmpty\"), false, new SetTree$00601(0, \"SetEmpty\")];\n      }\n\n    default:\n      {\n        const t12$$1 = t$$2.fields[2];\n        const t11$$1 = t$$2.fields[1];\n        const k1$$2 = t$$2.fields[0];\n        const c$$2 = comparer$$2.Compare(pivot, k1$$2) | 0;\n\n        if (c$$2 < 0) {\n          const patternInput = SetTreeModule$$$split(comparer$$2, pivot, t11$$1);\n          return [patternInput[0], patternInput[1], SetTreeModule$$$balance(comparer$$2, patternInput[2], k1$$2, t12$$1)];\n        } else if (c$$2 === 0) {\n          return [t11$$1, true, t12$$1];\n        } else {\n          const patternInput$$1 = SetTreeModule$$$split(comparer$$2, pivot, t12$$1);\n          return [SetTreeModule$$$balance(comparer$$2, t11$$1, k1$$2, patternInput$$1[0]), patternInput$$1[1], patternInput$$1[2]];\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$spliceOutSuccessor(t$$3) {\n  switch (t$$3.tag) {\n    case 2:\n      {\n        const k2$$4 = t$$3.fields[0];\n        return [k2$$4, new SetTree$00601(0, \"SetEmpty\")];\n      }\n\n    case 1:\n      {\n        const r$$4 = t$$3.fields[2];\n        const l$$4 = t$$3.fields[1];\n        const k2$$5 = t$$3.fields[0];\n\n        if (l$$4.tag === 0) {\n          return [k2$$5, r$$4];\n        } else {\n          const patternInput$$2 = SetTreeModule$$$spliceOutSuccessor(l$$4);\n          return [patternInput$$2[0], SetTreeModule$$$mk(patternInput$$2[1], k2$$5, r$$4)];\n        }\n      }\n\n    default:\n      {\n        throw new Error(\"internal error: Set.spliceOutSuccessor\");\n      }\n  }\n}\nexport function SetTreeModule$$$remove(comparer$$3, k$$4, t$$4) {\n  switch (t$$4.tag) {\n    case 2:\n      {\n        const k2$$6 = t$$4.fields[0];\n        const c$$4 = comparer$$3.Compare(k$$4, k2$$6) | 0;\n\n        if (c$$4 === 0) {\n          return new SetTree$00601(0, \"SetEmpty\");\n        } else {\n          return t$$4;\n        }\n      }\n\n    case 1:\n      {\n        const r$$5 = t$$4.fields[2];\n        const l$$5 = t$$4.fields[1];\n        const k2$$7 = t$$4.fields[0];\n        const c$$5 = comparer$$3.Compare(k$$4, k2$$7) | 0;\n\n        if (c$$5 < 0) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$remove(comparer$$3, k$$4, l$$5), k2$$7, r$$5);\n        } else if (c$$5 === 0) {\n          const matchValue$$2 = [l$$5, r$$5];\n\n          if (matchValue$$2[0].tag === 0) {\n            return r$$5;\n          } else if (matchValue$$2[1].tag === 0) {\n            return l$$5;\n          } else {\n            const patternInput$$3 = SetTreeModule$$$spliceOutSuccessor(r$$5);\n            return SetTreeModule$$$mk(l$$5, patternInput$$3[0], patternInput$$3[1]);\n          }\n        } else {\n          return SetTreeModule$$$rebalance(l$$5, k2$$7, SetTreeModule$$$remove(comparer$$3, k$$4, r$$5));\n        }\n      }\n\n    default:\n      {\n        return t$$4;\n      }\n  }\n}\nexport function SetTreeModule$$$mem(comparer$$4, k$$5, t$$5) {\n  SetTreeModule$$$mem: while (true) {\n    switch (t$$5.tag) {\n      case 2:\n        {\n          const k2$$9 = t$$5.fields[0];\n          return comparer$$4.Compare(k$$5, k2$$9) === 0;\n        }\n\n      case 0:\n        {\n          return false;\n        }\n\n      default:\n        {\n          const r$$6 = t$$5.fields[2];\n          const l$$6 = t$$5.fields[1];\n          const k2$$8 = t$$5.fields[0];\n          const c$$6 = comparer$$4.Compare(k$$5, k2$$8) | 0;\n\n          if (c$$6 < 0) {\n            const $comparer$$4$$7 = comparer$$4;\n            const $k$$5$$8 = k$$5;\n            comparer$$4 = $comparer$$4$$7;\n            k$$5 = $k$$5$$8;\n            t$$5 = l$$6;\n            continue SetTreeModule$$$mem;\n          } else if (c$$6 === 0) {\n            return true;\n          } else {\n            const $comparer$$4$$9 = comparer$$4;\n            const $k$$5$$10 = k$$5;\n            comparer$$4 = $comparer$$4$$9;\n            k$$5 = $k$$5$$10;\n            t$$5 = r$$6;\n            continue SetTreeModule$$$mem;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$iter($arg$$11, $arg$$12) {\n  SetTreeModule$$$iter: while (true) {\n    const f = $arg$$11,\n          t$$6 = $arg$$12;\n\n    switch (t$$6.tag) {\n      case 2:\n        {\n          const k2$$11 = t$$6.fields[0];\n          f(k2$$11);\n          break;\n        }\n\n      case 0:\n        {\n          break;\n        }\n\n      default:\n        {\n          const r$$7 = t$$6.fields[2];\n          const l$$7 = t$$6.fields[1];\n          const k2$$10 = t$$6.fields[0];\n          SetTreeModule$$$iter(f, l$$7);\n          f(k2$$10);\n          $arg$$11 = f;\n          $arg$$12 = r$$7;\n          continue SetTreeModule$$$iter;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$foldBack($arg$$13, $arg$$14, $arg$$15) {\n  SetTreeModule$$$foldBack: while (true) {\n    const f$$1 = $arg$$13,\n          m$$1 = $arg$$14,\n          x$$1 = $arg$$15;\n\n    switch (m$$1.tag) {\n      case 2:\n        {\n          const k$$7 = m$$1.fields[0];\n          return f$$1(k$$7, x$$1);\n        }\n\n      case 0:\n        {\n          return x$$1;\n        }\n\n      default:\n        {\n          const r$$8 = m$$1.fields[2];\n          const l$$8 = m$$1.fields[1];\n          const k$$6 = m$$1.fields[0];\n          $arg$$13 = f$$1;\n          $arg$$14 = l$$8;\n          $arg$$15 = f$$1(k$$6, SetTreeModule$$$foldBack(f$$1, r$$8, x$$1));\n          continue SetTreeModule$$$foldBack;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$fold($arg$$16, $arg$$17, $arg$$18) {\n  SetTreeModule$$$fold: while (true) {\n    const f$$2 = $arg$$16,\n          x$$2 = $arg$$17,\n          m$$2 = $arg$$18;\n\n    switch (m$$2.tag) {\n      case 2:\n        {\n          const k$$9 = m$$2.fields[0];\n          return f$$2(x$$2, k$$9);\n        }\n\n      case 0:\n        {\n          return x$$2;\n        }\n\n      default:\n        {\n          const r$$9 = m$$2.fields[2];\n          const l$$9 = m$$2.fields[1];\n          const k$$8 = m$$2.fields[0];\n          const x$$3 = SetTreeModule$$$fold(f$$2, x$$2, l$$9);\n          const x$$4 = f$$2(x$$3, k$$8);\n          $arg$$16 = f$$2;\n          $arg$$17 = x$$4;\n          $arg$$18 = r$$9;\n          continue SetTreeModule$$$fold;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$forall($arg$$19, $arg$$20) {\n  SetTreeModule$$$forall: while (true) {\n    const f$$3 = $arg$$19,\n          m$$3 = $arg$$20;\n\n    switch (m$$3.tag) {\n      case 2:\n        {\n          const k2$$13 = m$$3.fields[0];\n          return f$$3(k2$$13);\n        }\n\n      case 0:\n        {\n          return true;\n        }\n\n      default:\n        {\n          const r$$10 = m$$3.fields[2];\n          const l$$10 = m$$3.fields[1];\n          const k2$$12 = m$$3.fields[0];\n\n          if (f$$3(k2$$12) ? SetTreeModule$$$forall(f$$3, l$$10) : false) {\n            $arg$$19 = f$$3;\n            $arg$$20 = r$$10;\n            continue SetTreeModule$$$forall;\n          } else {\n            return false;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$exists($arg$$21, $arg$$22) {\n  SetTreeModule$$$exists: while (true) {\n    const f$$4 = $arg$$21,\n          m$$4 = $arg$$22;\n\n    switch (m$$4.tag) {\n      case 2:\n        {\n          const k2$$15 = m$$4.fields[0];\n          return f$$4(k2$$15);\n        }\n\n      case 0:\n        {\n          return false;\n        }\n\n      default:\n        {\n          const r$$11 = m$$4.fields[2];\n          const l$$11 = m$$4.fields[1];\n          const k2$$14 = m$$4.fields[0];\n\n          if (f$$4(k2$$14) ? true : SetTreeModule$$$exists(f$$4, l$$11)) {\n            return true;\n          } else {\n            $arg$$21 = f$$4;\n            $arg$$22 = r$$11;\n            continue SetTreeModule$$$exists;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$isEmpty(m$$5) {\n  if (m$$5.tag === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function SetTreeModule$$$subset(comparer$$5, a, b) {\n  return SetTreeModule$$$forall(function (x$$5) {\n    return SetTreeModule$$$mem(comparer$$5, x$$5, b);\n  }, a);\n}\nexport function SetTreeModule$$$psubset(comparer$$6, a$$1, b$$1) {\n  if (SetTreeModule$$$forall(function (x$$6) {\n    return SetTreeModule$$$mem(comparer$$6, x$$6, b$$1);\n  }, a$$1)) {\n    return SetTreeModule$$$exists(function (x$$7) {\n      return !SetTreeModule$$$mem(comparer$$6, x$$7, a$$1);\n    }, b$$1);\n  } else {\n    return false;\n  }\n}\nexport function SetTreeModule$$$filterAux($arg$$23, $arg$$24, $arg$$25, $arg$$26) {\n  SetTreeModule$$$filterAux: while (true) {\n    const comparer$$7 = $arg$$23,\n          f$$5 = $arg$$24,\n          s$$2 = $arg$$25,\n          acc$$1 = $arg$$26;\n\n    switch (s$$2.tag) {\n      case 2:\n        {\n          const k$$11 = s$$2.fields[0];\n\n          if (f$$5(k$$11)) {\n            return SetTreeModule$$$add(comparer$$7, k$$11, acc$$1);\n          } else {\n            return acc$$1;\n          }\n        }\n\n      case 0:\n        {\n          return acc$$1;\n        }\n\n      default:\n        {\n          const r$$12 = s$$2.fields[2];\n          const l$$12 = s$$2.fields[1];\n          const k$$10 = s$$2.fields[0];\n          const acc$$2 = f$$5(k$$10) ? SetTreeModule$$$add(comparer$$7, k$$10, acc$$1) : acc$$1;\n          $arg$$23 = comparer$$7;\n          $arg$$24 = f$$5;\n          $arg$$25 = l$$12;\n          $arg$$26 = SetTreeModule$$$filterAux(comparer$$7, f$$5, r$$12, acc$$2);\n          continue SetTreeModule$$$filterAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$filter(comparer$$8, f$$6, s$$3) {\n  return SetTreeModule$$$filterAux(comparer$$8, f$$6, s$$3, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function SetTreeModule$$$diffAux(comparer$$9, m$$6, acc$$3) {\n  SetTreeModule$$$diffAux: while (true) {\n    switch (m$$6.tag) {\n      case 2:\n        {\n          const k$$13 = m$$6.fields[0];\n          return SetTreeModule$$$remove(comparer$$9, k$$13, acc$$3);\n        }\n\n      case 0:\n        {\n          return acc$$3;\n        }\n\n      default:\n        {\n          const r$$13 = m$$6.fields[2];\n          const l$$13 = m$$6.fields[1];\n          const k$$12 = m$$6.fields[0];\n          const $acc$$3$$31 = acc$$3;\n          const $comparer$$9$$30 = comparer$$9;\n          comparer$$9 = $comparer$$9$$30;\n          m$$6 = l$$13;\n          acc$$3 = SetTreeModule$$$diffAux($comparer$$9$$30, r$$13, SetTreeModule$$$remove($comparer$$9$$30, k$$12, $acc$$3$$31));\n          continue SetTreeModule$$$diffAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$diff(comparer$$10, a$$2, b$$2) {\n  return SetTreeModule$$$diffAux(comparer$$10, b$$2, a$$2);\n}\nexport function SetTreeModule$$$union(comparer$$11, t1$$4, t2$$4) {\n  const matchValue$$3 = [t1$$4, t2$$4];\n  var $target$$32, h1$$1, h2$$1, k1$$4, k2$$16, t11$$2, t12$$2, t21$$1, t22$$1, t$$7, t$$8, k1$$5, t2$$5, k2$$17, t1$$5;\n\n  if (matchValue$$3[0].tag === 0) {\n    $target$$32 = 1;\n    t$$7 = matchValue$$3[1];\n  } else if (matchValue$$3[0].tag === 2) {\n    if (matchValue$$3[1].tag === 0) {\n      $target$$32 = 2;\n      t$$8 = matchValue$$3[0];\n    } else if (matchValue$$3[1].tag === 2) {\n      $target$$32 = 3;\n      k1$$5 = matchValue$$3[0].fields[0];\n      t2$$5 = matchValue$$3[1];\n    } else {\n      $target$$32 = 3;\n      k1$$5 = matchValue$$3[0].fields[0];\n      t2$$5 = matchValue$$3[1];\n    }\n  } else if (matchValue$$3[1].tag === 0) {\n    $target$$32 = 2;\n    t$$8 = matchValue$$3[0];\n  } else if (matchValue$$3[1].tag === 2) {\n    $target$$32 = 4;\n    k2$$17 = matchValue$$3[1].fields[0];\n    t1$$5 = matchValue$$3[0];\n  } else {\n    $target$$32 = 0;\n    h1$$1 = matchValue$$3[0].fields[3];\n    h2$$1 = matchValue$$3[1].fields[3];\n    k1$$4 = matchValue$$3[0].fields[0];\n    k2$$16 = matchValue$$3[1].fields[0];\n    t11$$2 = matchValue$$3[0].fields[1];\n    t12$$2 = matchValue$$3[0].fields[2];\n    t21$$1 = matchValue$$3[1].fields[1];\n    t22$$1 = matchValue$$3[1].fields[2];\n  }\n\n  switch ($target$$32) {\n    case 0:\n      {\n        if (h1$$1 > h2$$1) {\n          const patternInput$$4 = SetTreeModule$$$split(comparer$$11, k1$$4, t2$$4);\n          return SetTreeModule$$$balance(comparer$$11, SetTreeModule$$$union(comparer$$11, t11$$2, patternInput$$4[0]), k1$$4, SetTreeModule$$$union(comparer$$11, t12$$2, patternInput$$4[2]));\n        } else {\n          const patternInput$$5 = SetTreeModule$$$split(comparer$$11, k2$$16, t1$$4);\n          return SetTreeModule$$$balance(comparer$$11, SetTreeModule$$$union(comparer$$11, t21$$1, patternInput$$5[0]), k2$$16, SetTreeModule$$$union(comparer$$11, t22$$1, patternInput$$5[2]));\n        }\n      }\n\n    case 1:\n      {\n        return t$$7;\n      }\n\n    case 2:\n      {\n        return t$$8;\n      }\n\n    case 3:\n      {\n        return SetTreeModule$$$add(comparer$$11, k1$$5, t2$$5);\n      }\n\n    case 4:\n      {\n        return SetTreeModule$$$add(comparer$$11, k2$$17, t1$$5);\n      }\n  }\n}\nexport function SetTreeModule$$$intersectionAux(comparer$$12, b$$3, m$$7, acc$$4) {\n  SetTreeModule$$$intersectionAux: while (true) {\n    switch (m$$7.tag) {\n      case 2:\n        {\n          const k$$15 = m$$7.fields[0];\n\n          if (SetTreeModule$$$mem(comparer$$12, k$$15, b$$3)) {\n            return SetTreeModule$$$add(comparer$$12, k$$15, acc$$4);\n          } else {\n            return acc$$4;\n          }\n        }\n\n      case 0:\n        {\n          return acc$$4;\n        }\n\n      default:\n        {\n          const r$$14 = m$$7.fields[2];\n          const l$$14 = m$$7.fields[1];\n          const k$$14 = m$$7.fields[0];\n          const acc$$5 = SetTreeModule$$$intersectionAux(comparer$$12, b$$3, r$$14, acc$$4);\n          const acc$$6 = SetTreeModule$$$mem(comparer$$12, k$$14, b$$3) ? SetTreeModule$$$add(comparer$$12, k$$14, acc$$5) : acc$$5;\n          const $b$$3$$34 = b$$3;\n          const $comparer$$12$$33 = comparer$$12;\n          comparer$$12 = $comparer$$12$$33;\n          b$$3 = $b$$3$$34;\n          m$$7 = l$$14;\n          acc$$4 = acc$$6;\n          continue SetTreeModule$$$intersectionAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$intersection(comparer$$13, a$$3, b$$4) {\n  return SetTreeModule$$$intersectionAux(comparer$$13, b$$4, a$$3, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function SetTreeModule$$$partition1(comparer$$14, f$$7, k$$16, acc1, acc2) {\n  if (f$$7(k$$16)) {\n    return [SetTreeModule$$$add(comparer$$14, k$$16, acc1), acc2];\n  } else {\n    return [acc1, SetTreeModule$$$add(comparer$$14, k$$16, acc2)];\n  }\n}\nexport function SetTreeModule$$$partitionAux($arg$$40, $arg$$41, $arg$$42, $arg$$43, $arg$$44) {\n  SetTreeModule$$$partitionAux: while (true) {\n    const comparer$$15 = $arg$$40,\n          f$$8 = $arg$$41,\n          s$$4 = $arg$$42,\n          acc_0 = $arg$$43,\n          acc_1 = $arg$$44;\n    const acc$$7 = [acc_0, acc_1];\n\n    switch (s$$4.tag) {\n      case 2:\n        {\n          const k$$18 = s$$4.fields[0];\n          return SetTreeModule$$$partition1(comparer$$15, f$$8, k$$18, acc$$7[0], acc$$7[1]);\n        }\n\n      case 0:\n        {\n          return acc$$7;\n        }\n\n      default:\n        {\n          const r$$15 = s$$4.fields[2];\n          const l$$15 = s$$4.fields[1];\n          const k$$17 = s$$4.fields[0];\n          const acc$$8 = SetTreeModule$$$partitionAux(comparer$$15, f$$8, r$$15, acc$$7[0], acc$$7[1]);\n          const acc$$9 = SetTreeModule$$$partition1(comparer$$15, f$$8, k$$17, acc$$8[0], acc$$8[1]);\n          $arg$$40 = comparer$$15;\n          $arg$$41 = f$$8;\n          $arg$$42 = l$$15;\n          $arg$$43 = acc$$9[0];\n          $arg$$44 = acc$$9[1];\n          continue SetTreeModule$$$partitionAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$partition(comparer$$16, f$$9, s$$5) {\n  const seed = [new SetTree$00601(0, \"SetEmpty\"), new SetTree$00601(0, \"SetEmpty\")];\n  return SetTreeModule$$$partitionAux(comparer$$16, f$$9, s$$5, seed[0], seed[1]);\n}\nexport function SetTreeModule$$$$007CMatchSetNode$007CMatchSetEmpty$007C(s$$6) {\n  switch (s$$6.tag) {\n    case 2:\n      {\n        const k2$$19 = s$$6.fields[0];\n        return new Choice(0, \"Choice1Of2\", [k2$$19, new SetTree$00601(0, \"SetEmpty\"), new SetTree$00601(0, \"SetEmpty\")]);\n      }\n\n    case 0:\n      {\n        return new Choice(1, \"Choice2Of2\", null);\n      }\n\n    default:\n      {\n        const r$$16 = s$$6.fields[2];\n        const l$$16 = s$$6.fields[1];\n        const k2$$18 = s$$6.fields[0];\n        return new Choice(0, \"Choice1Of2\", [k2$$18, l$$16, r$$16]);\n      }\n  }\n}\nexport function SetTreeModule$$$minimumElementAux(s$$7, n$$1) {\n  SetTreeModule$$$minimumElementAux: while (true) {\n    switch (s$$7.tag) {\n      case 2:\n        {\n          const k$$20 = s$$7.fields[0];\n          return k$$20;\n        }\n\n      case 0:\n        {\n          return n$$1;\n        }\n\n      default:\n        {\n          const l$$17 = s$$7.fields[1];\n          const k$$19 = s$$7.fields[0];\n          s$$7 = l$$17;\n          n$$1 = k$$19;\n          continue SetTreeModule$$$minimumElementAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$minimumElementOpt(s$$8) {\n  switch (s$$8.tag) {\n    case 2:\n      {\n        const k$$22 = s$$8.fields[0];\n        return some(k$$22);\n      }\n\n    case 0:\n      {\n        return null;\n      }\n\n    default:\n      {\n        const l$$18 = s$$8.fields[1];\n        const k$$21 = s$$8.fields[0];\n        return some(SetTreeModule$$$minimumElementAux(l$$18, k$$21));\n      }\n  }\n}\nexport function SetTreeModule$$$maximumElementAux(s$$9, n$$2) {\n  SetTreeModule$$$maximumElementAux: while (true) {\n    switch (s$$9.tag) {\n      case 2:\n        {\n          const k$$24 = s$$9.fields[0];\n          return k$$24;\n        }\n\n      case 0:\n        {\n          return n$$2;\n        }\n\n      default:\n        {\n          const r$$17 = s$$9.fields[2];\n          const k$$23 = s$$9.fields[0];\n          s$$9 = r$$17;\n          n$$2 = k$$23;\n          continue SetTreeModule$$$maximumElementAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$maximumElementOpt(s$$10) {\n  switch (s$$10.tag) {\n    case 2:\n      {\n        const k$$26 = s$$10.fields[0];\n        return some(k$$26);\n      }\n\n    case 0:\n      {\n        return null;\n      }\n\n    default:\n      {\n        const r$$18 = s$$10.fields[2];\n        const k$$25 = s$$10.fields[0];\n        return some(SetTreeModule$$$maximumElementAux(r$$18, k$$25));\n      }\n  }\n}\nexport function SetTreeModule$$$minimumElement(s$$11) {\n  const matchValue$$4 = SetTreeModule$$$minimumElementOpt(s$$11);\n\n  if (matchValue$$4 == null) {\n    throw new Error(\"Set contains no elements\");\n  } else {\n    const k$$27 = value$$2(matchValue$$4);\n    return k$$27;\n  }\n}\nexport function SetTreeModule$$$maximumElement(s$$12) {\n  const matchValue$$5 = SetTreeModule$$$maximumElementOpt(s$$12);\n\n  if (matchValue$$5 == null) {\n    throw new Error(\"Set contains no elements\");\n  } else {\n    const k$$28 = value$$2(matchValue$$5);\n    return k$$28;\n  }\n}\nexport const SetTreeModule$002ESetIterator$00601 = declare(function Set_SetTreeModule_SetIterator(arg1, arg2) {\n  this.stack = arg1;\n  this.started = arg2;\n}, Record);\nexport function SetTreeModule$002ESetIterator$00601$reflection($gen$$48) {\n  return record(\"Set.SetTreeModule.SetIterator`1\", [$gen$$48], SetTreeModule$002ESetIterator$00601, () => [[\"stack\", list(SetTree$00601$reflection($gen$$48))], [\"started\", bool]]);\n}\nexport function SetTreeModule$$$collapseLHS(stack) {\n  SetTreeModule$$$collapseLHS: while (true) {\n    if (stack.tail != null) {\n      if (stack.head.tag === 2) {\n        return stack;\n      } else if (stack.head.tag === 1) {\n        const $stack$$49 = stack;\n        stack = new List($stack$$49.head.fields[1], new List(SetTreeModule$$$SetOne($stack$$49.head.fields[0]), new List($stack$$49.head.fields[2], $stack$$49.tail)));\n        continue SetTreeModule$$$collapseLHS;\n      } else {\n        const $stack$$50 = stack;\n        stack = $stack$$50.tail;\n        continue SetTreeModule$$$collapseLHS;\n      }\n    } else {\n      return new List();\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$mkIterator(s$$13) {\n  return new SetTreeModule$002ESetIterator$00601(SetTreeModule$$$collapseLHS(new List(s$$13, new List())), false);\n}\nexport function SetTreeModule$$$notStarted() {\n  throw new Error(\"Enumeration not started\");\n}\nexport function SetTreeModule$$$alreadyFinished() {\n  throw new Error(\"Enumeration already started\");\n}\nexport function SetTreeModule$$$current(i) {\n  if (i.started) {\n    const matchValue$$6 = i.stack;\n\n    if (matchValue$$6.tail == null) {\n      return SetTreeModule$$$alreadyFinished();\n    } else if (matchValue$$6.head.tag === 2) {\n      return matchValue$$6.head.fields[0];\n    } else {\n      throw new Error(\"Please report error: Set iterator, unexpected stack for current\");\n    }\n  } else {\n    return SetTreeModule$$$notStarted();\n  }\n}\nexport function SetTreeModule$$$moveNext(i$$1) {\n  if (i$$1.started) {\n    const matchValue$$7 = i$$1.stack;\n\n    if (matchValue$$7.tail == null) {\n      return false;\n    } else if (matchValue$$7.head.tag === 2) {\n      i$$1.stack = SetTreeModule$$$collapseLHS(matchValue$$7.tail);\n      return !(i$$1.stack.tail == null);\n    } else {\n      throw new Error(\"Please report error: Set iterator, unexpected stack for moveNext\");\n    }\n  } else {\n    i$$1.started = true;\n    return !(i$$1.stack.tail == null);\n  }\n}\nexport const SetTreeModule$002EmkIEnumerator$00601 = declare(function Set_SetTreeModule_mkIEnumerator(s$$14) {\n  const $this$$1 = this;\n  $this$$1.s = s$$14;\n  $this$$1.i = SetTreeModule$$$mkIterator($this$$1.s);\n});\nexport function SetTreeModule$002EmkIEnumerator$00601$reflection($gen$$51) {\n  return type(\"Set.SetTreeModule.mkIEnumerator`1\", [$gen$$51]);\n}\nexport function SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56(s$$14) {\n  return this instanceof SetTreeModule$002EmkIEnumerator$00601 ? SetTreeModule$002EmkIEnumerator$00601.call(this, s$$14) : new SetTreeModule$002EmkIEnumerator$00601(s$$14);\n}\nObject.defineProperty(SetTreeModule$002EmkIEnumerator$00601.prototype, \"Current\", {\n  \"get\": function () {\n    const __ = this;\n    return SetTreeModule$$$current(__.i);\n  }\n});\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.MoveNext = function () {\n  const __$$1 = this;\n  return SetTreeModule$$$moveNext(__$$1.i);\n};\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.Reset = function () {\n  const __$$2 = this;\n  __$$2.i = SetTreeModule$$$mkIterator(__$$2.s);\n};\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.Dispose = function () {};\n\nexport function SetTreeModule$$$mkIEnumerator(s$$15) {\n  return SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56(s$$15);\n}\nexport function SetTreeModule$$$toSeq(s$$16) {\n  const en = SetTreeModule$$$mkIEnumerator(s$$16);\n  return unfold(function generator(en$$1) {\n    if (en$$1.MoveNext()) {\n      return [en$$1.Current, en$$1];\n    } else {\n      return null;\n    }\n  }, en);\n}\nexport function SetTreeModule$$$compareStacks(comparer$$17, l1, l2) {\n  SetTreeModule$$$compareStacks: while (true) {\n    const matchValue$$8 = [l1, l2];\n    var $target$$52, t1$$6, t2$$6, n1k, n2k, t1$$7, t2$$7, n1k$$1, n2k$$1, n2r, t1$$8, t2$$8, emp, n1k$$2, n1r, n2k$$2, t1$$9, t2$$9, n1k$$3, n1r$$1, n2k$$3, n2r$$1, t1$$10, t2$$10, n1k$$4, t1$$11, n1k$$5, n1l, n1r$$2, t1$$12, n2k$$4, t2$$11, n2k$$5, n2l, n2r$$2, t2$$12;\n\n    if (matchValue$$8[0].tail != null) {\n      if (matchValue$$8[1].tail != null) {\n        if (matchValue$$8[1].head.tag === 2) {\n          if (matchValue$$8[0].head.tag === 2) {\n            $target$$52 = 4;\n            n1k = matchValue$$8[0].head.fields[0];\n            n2k = matchValue$$8[1].head.fields[0];\n            t1$$7 = matchValue$$8[0].tail;\n            t2$$7 = matchValue$$8[1].tail;\n          } else if (matchValue$$8[0].head.tag === 1) {\n            if (matchValue$$8[0].head.fields[1].tag === 0) {\n              $target$$52 = 6;\n              emp = matchValue$$8[0].head.fields[1];\n              n1k$$2 = matchValue$$8[0].head.fields[0];\n              n1r = matchValue$$8[0].head.fields[2];\n              n2k$$2 = matchValue$$8[1].head.fields[0];\n              t1$$9 = matchValue$$8[0].tail;\n              t2$$9 = matchValue$$8[1].tail;\n            } else {\n              $target$$52 = 9;\n              n1k$$5 = matchValue$$8[0].head.fields[0];\n              n1l = matchValue$$8[0].head.fields[1];\n              n1r$$2 = matchValue$$8[0].head.fields[2];\n              t1$$12 = matchValue$$8[0].tail;\n            }\n          } else {\n            $target$$52 = 10;\n            n2k$$4 = matchValue$$8[1].head.fields[0];\n            t2$$11 = matchValue$$8[1].tail;\n          }\n        } else if (matchValue$$8[1].head.tag === 1) {\n          if (matchValue$$8[1].head.fields[1].tag === 0) {\n            if (matchValue$$8[0].head.tag === 2) {\n              $target$$52 = 5;\n              n1k$$1 = matchValue$$8[0].head.fields[0];\n              n2k$$1 = matchValue$$8[1].head.fields[0];\n              n2r = matchValue$$8[1].head.fields[2];\n              t1$$8 = matchValue$$8[0].tail;\n              t2$$8 = matchValue$$8[1].tail;\n            } else if (matchValue$$8[0].head.tag === 1) {\n              if (matchValue$$8[0].head.fields[1].tag === 0) {\n                $target$$52 = 7;\n                n1k$$3 = matchValue$$8[0].head.fields[0];\n                n1r$$1 = matchValue$$8[0].head.fields[2];\n                n2k$$3 = matchValue$$8[1].head.fields[0];\n                n2r$$1 = matchValue$$8[1].head.fields[2];\n                t1$$10 = matchValue$$8[0].tail;\n                t2$$10 = matchValue$$8[1].tail;\n              } else {\n                $target$$52 = 9;\n                n1k$$5 = matchValue$$8[0].head.fields[0];\n                n1l = matchValue$$8[0].head.fields[1];\n                n1r$$2 = matchValue$$8[0].head.fields[2];\n                t1$$12 = matchValue$$8[0].tail;\n              }\n            } else {\n              $target$$52 = 11;\n              n2k$$5 = matchValue$$8[1].head.fields[0];\n              n2l = matchValue$$8[1].head.fields[1];\n              n2r$$2 = matchValue$$8[1].head.fields[2];\n              t2$$12 = matchValue$$8[1].tail;\n            }\n          } else if (matchValue$$8[0].head.tag === 2) {\n            $target$$52 = 8;\n            n1k$$4 = matchValue$$8[0].head.fields[0];\n            t1$$11 = matchValue$$8[0].tail;\n          } else if (matchValue$$8[0].head.tag === 1) {\n            $target$$52 = 9;\n            n1k$$5 = matchValue$$8[0].head.fields[0];\n            n1l = matchValue$$8[0].head.fields[1];\n            n1r$$2 = matchValue$$8[0].head.fields[2];\n            t1$$12 = matchValue$$8[0].tail;\n          } else {\n            $target$$52 = 11;\n            n2k$$5 = matchValue$$8[1].head.fields[0];\n            n2l = matchValue$$8[1].head.fields[1];\n            n2r$$2 = matchValue$$8[1].head.fields[2];\n            t2$$12 = matchValue$$8[1].tail;\n          }\n        } else if (matchValue$$8[0].head.tag === 2) {\n          $target$$52 = 8;\n          n1k$$4 = matchValue$$8[0].head.fields[0];\n          t1$$11 = matchValue$$8[0].tail;\n        } else if (matchValue$$8[0].head.tag === 1) {\n          $target$$52 = 9;\n          n1k$$5 = matchValue$$8[0].head.fields[0];\n          n1l = matchValue$$8[0].head.fields[1];\n          n1r$$2 = matchValue$$8[0].head.fields[2];\n          t1$$12 = matchValue$$8[0].tail;\n        } else {\n          $target$$52 = 3;\n          t1$$6 = matchValue$$8[0].tail;\n          t2$$6 = matchValue$$8[1].tail;\n        }\n      } else {\n        $target$$52 = 2;\n      }\n    } else if (matchValue$$8[1].tail != null) {\n      $target$$52 = 1;\n    } else {\n      $target$$52 = 0;\n    }\n\n    switch ($target$$52) {\n      case 0:\n        {\n          return 0;\n        }\n\n      case 1:\n        {\n          return -1 | 0;\n        }\n\n      case 2:\n        {\n          return 1;\n        }\n\n      case 3:\n        {\n          const $comparer$$17$$53 = comparer$$17;\n          comparer$$17 = $comparer$$17$$53;\n          l1 = t1$$6;\n          l2 = t2$$6;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 4:\n        {\n          const c$$7 = comparer$$17.Compare(n1k, n2k) | 0;\n\n          if (c$$7 !== 0) {\n            return c$$7 | 0;\n          } else {\n            const $comparer$$17$$54 = comparer$$17;\n            comparer$$17 = $comparer$$17$$54;\n            l1 = t1$$7;\n            l2 = t2$$7;\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 5:\n        {\n          const c$$8 = comparer$$17.Compare(n1k$$1, n2k$$1) | 0;\n\n          if (c$$8 !== 0) {\n            return c$$8 | 0;\n          } else {\n            const $comparer$$17$$55 = comparer$$17;\n            comparer$$17 = $comparer$$17$$55;\n            l1 = new List(new SetTree$00601(0, \"SetEmpty\"), t1$$8);\n            l2 = new List(n2r, t2$$8);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 6:\n        {\n          const c$$9 = comparer$$17.Compare(n1k$$2, n2k$$2) | 0;\n\n          if (c$$9 !== 0) {\n            return c$$9 | 0;\n          } else {\n            const $comparer$$17$$56 = comparer$$17;\n            comparer$$17 = $comparer$$17$$56;\n            l1 = new List(n1r, t1$$9);\n            l2 = new List(emp, t2$$9);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 7:\n        {\n          const c$$10 = comparer$$17.Compare(n1k$$3, n2k$$3) | 0;\n\n          if (c$$10 !== 0) {\n            return c$$10 | 0;\n          } else {\n            const $comparer$$17$$57 = comparer$$17;\n            comparer$$17 = $comparer$$17$$57;\n            l1 = new List(n1r$$1, t1$$10);\n            l2 = new List(n2r$$1, t2$$10);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 8:\n        {\n          const $comparer$$17$$58 = comparer$$17;\n          const $l2$$59 = l2;\n          comparer$$17 = $comparer$$17$$58;\n          l1 = new List(new SetTree$00601(0, \"SetEmpty\"), new List(SetTreeModule$$$SetOne(n1k$$4), t1$$11));\n          l2 = $l2$$59;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 9:\n        {\n          const $comparer$$17$$60 = comparer$$17;\n          const $l2$$61 = l2;\n          comparer$$17 = $comparer$$17$$60;\n          l1 = new List(n1l, new List(SetTreeModule$$$SetNode(n1k$$5, new SetTree$00601(0, \"SetEmpty\"), n1r$$2, 0), t1$$12));\n          l2 = $l2$$61;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 10:\n        {\n          const $comparer$$17$$62 = comparer$$17;\n          const $l1$$63 = l1;\n          comparer$$17 = $comparer$$17$$62;\n          l1 = $l1$$63;\n          l2 = new List(new SetTree$00601(0, \"SetEmpty\"), new List(SetTreeModule$$$SetOne(n2k$$4), t2$$11));\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 11:\n        {\n          const $comparer$$17$$64 = comparer$$17;\n          const $l1$$65 = l1;\n          comparer$$17 = $comparer$$17$$64;\n          l1 = $l1$$65;\n          l2 = new List(n2l, new List(SetTreeModule$$$SetNode(n2k$$5, new SetTree$00601(0, \"SetEmpty\"), n2r$$2, 0), t2$$12));\n          continue SetTreeModule$$$compareStacks;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$compare(comparer$$18, s1, s2) {\n  const matchValue$$9 = [s1, s2];\n\n  if (matchValue$$9[0].tag === 0) {\n    if (matchValue$$9[1].tag === 0) {\n      return 0;\n    } else {\n      return -1 | 0;\n    }\n  } else if (matchValue$$9[1].tag === 0) {\n    return 1;\n  } else {\n    return SetTreeModule$$$compareStacks(comparer$$18, new List(s1, new List()), new List(s2, new List())) | 0;\n  }\n}\nexport function SetTreeModule$$$choose(s$$17) {\n  return SetTreeModule$$$minimumElement(s$$17);\n}\nexport function SetTreeModule$$$loop(m$$8, acc$$10) {\n  SetTreeModule$$$loop: while (true) {\n    switch (m$$8.tag) {\n      case 2:\n        {\n          const k$$32 = m$$8.fields[0];\n          return new List(k$$32, acc$$10);\n        }\n\n      case 0:\n        {\n          return acc$$10;\n        }\n\n      default:\n        {\n          const r$$20 = m$$8.fields[2];\n          const l$$20 = m$$8.fields[1];\n          const k$$31 = m$$8.fields[0];\n          const $acc$$10$$66 = acc$$10;\n          m$$8 = l$$20;\n          acc$$10 = new List(k$$31, SetTreeModule$$$loop(r$$20, $acc$$10$$66));\n          continue SetTreeModule$$$loop;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$toList(s$$18) {\n  return SetTreeModule$$$loop(s$$18, new List());\n}\nexport function SetTreeModule$$$copyToArray(s$$19, arr, i$$2) {\n  let j = i$$2 | 0;\n  SetTreeModule$$$iter(function (x$$8) {\n    arr[j] = x$$8;\n    j = j + 1;\n  }, s$$19);\n}\nexport function SetTreeModule$$$mkFromEnumerator(comparer$$19, acc$$11, e) {\n  SetTreeModule$$$mkFromEnumerator: while (true) {\n    if (e.MoveNext()) {\n      const $acc$$11$$68 = acc$$11;\n      const $comparer$$19$$67 = comparer$$19;\n      const $e$$69 = e;\n      comparer$$19 = $comparer$$19$$67;\n      acc$$11 = SetTreeModule$$$add($comparer$$19$$67, $e$$69.Current, $acc$$11$$68);\n      e = $e$$69;\n      continue SetTreeModule$$$mkFromEnumerator;\n    } else {\n      return acc$$11;\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$ofSeq(comparer$$20, c$$11) {\n  const ie = getEnumerator(c$$11);\n\n  try {\n    return SetTreeModule$$$mkFromEnumerator(comparer$$20, new SetTree$00601(0, \"SetEmpty\"), ie);\n  } finally {\n    if (isDisposable(ie)) {\n      ie.Dispose();\n    }\n  }\n}\nexport function SetTreeModule$$$ofArray(comparer$$21, arr$$1) {\n  let acc$$12 = new SetTree$00601(0, \"SetEmpty\");\n\n  for (let i$$3 = 0; i$$3 <= arr$$1.length - 1; i$$3++) {\n    acc$$12 = SetTreeModule$$$add(comparer$$21, arr$$1[i$$3], acc$$12);\n  }\n\n  return acc$$12;\n}\nexport const FSharpSet = declare(function Set_Set(comparer$$22, tree) {\n  const $this$$2 = this;\n  $this$$2.comparer = comparer$$22;\n  $this$$2.tree = tree;\n});\nexport function FSharpSet$reflection($gen$$70) {\n  return type(\"Set.FSharpSet\", [$gen$$70]);\n}\nexport function FSharpSet$$$$002Ector$$2528C5CB(comparer$$22, tree) {\n  return this instanceof FSharpSet ? FSharpSet.call(this, comparer$$22, tree) : new FSharpSet(comparer$$22, tree);\n}\nexport function FSharpSet$$get_Comparer(__$$4) {\n  return __$$4.comparer;\n}\nexport function FSharpSet$$get_Tree(__$$5) {\n  return __$$5.tree;\n}\nexport function FSharpSet$$Add$$2B595(s$$20, x$$9) {\n  return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$20), SetTreeModule$$$add(FSharpSet$$get_Comparer(s$$20), x$$9, FSharpSet$$get_Tree(s$$20)));\n}\nexport function FSharpSet$$Remove$$2B595(s$$21, x$$10) {\n  return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$21), SetTreeModule$$$remove(FSharpSet$$get_Comparer(s$$21), x$$10, FSharpSet$$get_Tree(s$$21)));\n}\nexport function FSharpSet$$get_Count(s$$22) {\n  return SetTreeModule$$$count(FSharpSet$$get_Tree(s$$22));\n}\nexport function FSharpSet$$Contains$$2B595(s$$23, x$$11) {\n  return SetTreeModule$$$mem(FSharpSet$$get_Comparer(s$$23), x$$11, FSharpSet$$get_Tree(s$$23));\n}\nexport function FSharpSet$$Iterate$$5028453F(s$$24, x$$12) {\n  SetTreeModule$$$iter(x$$12, FSharpSet$$get_Tree(s$$24));\n}\nexport function FSharpSet$$Fold(s$$25, f$$10, z) {\n  return SetTreeModule$$$fold(function (x$$13, z$$1) {\n    return f$$10(z$$1, x$$13);\n  }, z, FSharpSet$$get_Tree(s$$25));\n}\nexport function FSharpSet$$get_IsEmpty(s$$26) {\n  return SetTreeModule$$$isEmpty(FSharpSet$$get_Tree(s$$26));\n}\nexport function FSharpSet$$Partition$$Z1D55A0D7(s$$27, f$$11) {\n  if (FSharpSet$$get_Tree(s$$27).tag === 0) {\n    return [s$$27, s$$27];\n  } else {\n    const patternInput$$6 = SetTreeModule$$$partition(FSharpSet$$get_Comparer(s$$27), f$$11, FSharpSet$$get_Tree(s$$27));\n    return [FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$27), patternInput$$6[0]), FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$27), patternInput$$6[1])];\n  }\n}\nexport function FSharpSet$$Filter$$Z1D55A0D7(s$$28, f$$12) {\n  if (FSharpSet$$get_Tree(s$$28).tag === 0) {\n    return s$$28;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$28), SetTreeModule$$$filter(FSharpSet$$get_Comparer(s$$28), f$$12, FSharpSet$$get_Tree(s$$28)));\n  }\n}\nexport function FSharpSet$$Map$$38806891(s$$29, f$$13, comparer$$23) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$23, SetTreeModule$$$fold(function (acc$$13, k$$33) {\n    return SetTreeModule$$$add(comparer$$23, f$$13(k$$33), acc$$13);\n  }, new SetTree$00601(0, \"SetEmpty\"), FSharpSet$$get_Tree(s$$29)));\n}\nexport function FSharpSet$$Exists$$Z1D55A0D7(s$$30, f$$14) {\n  return SetTreeModule$$$exists(f$$14, FSharpSet$$get_Tree(s$$30));\n}\nexport function FSharpSet$$ForAll$$Z1D55A0D7(s$$31, f$$15) {\n  return SetTreeModule$$$forall(f$$15, FSharpSet$$get_Tree(s$$31));\n}\nexport function FSharpSet$$$op_Subtraction(a$$4, b$$5) {\n  if (FSharpSet$$get_Tree(a$$4).tag === 0) {\n    return a$$4;\n  } else if (FSharpSet$$get_Tree(b$$5).tag === 0) {\n    return a$$4;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$4), SetTreeModule$$$diff(FSharpSet$$get_Comparer(a$$4), FSharpSet$$get_Tree(a$$4), FSharpSet$$get_Tree(b$$5)));\n  }\n}\nexport function FSharpSet$$$op_Addition(a$$5, b$$6) {\n  if (FSharpSet$$get_Tree(b$$6).tag === 0) {\n    return a$$5;\n  } else if (FSharpSet$$get_Tree(a$$5).tag === 0) {\n    return b$$6;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$5), SetTreeModule$$$union(FSharpSet$$get_Comparer(a$$5), FSharpSet$$get_Tree(a$$5), FSharpSet$$get_Tree(b$$6)));\n  }\n}\nexport function FSharpSet$$$Intersection$$Z3BE9BFE0(a$$6, b$$7) {\n  if (FSharpSet$$get_Tree(b$$7).tag === 0) {\n    return b$$7;\n  } else if (FSharpSet$$get_Tree(a$$6).tag === 0) {\n    return a$$6;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$6), SetTreeModule$$$intersection(FSharpSet$$get_Comparer(a$$6), FSharpSet$$get_Tree(a$$6), FSharpSet$$get_Tree(b$$7)));\n  }\n}\nexport function FSharpSet$$$IntersectionMany$$Z15B59630(sets) {\n  return reduce(FSharpSet$$$Intersection$$Z3BE9BFE0, sets);\n}\nexport function FSharpSet$$$Equality$$Z3BE9BFE0(a$$7, b$$8) {\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(a$$7), FSharpSet$$get_Tree(a$$7), FSharpSet$$get_Tree(b$$8)) === 0;\n}\nexport function FSharpSet$$$Compare$$Z3BE9BFE0(a$$8, b$$9) {\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(a$$8), FSharpSet$$get_Tree(a$$8), FSharpSet$$get_Tree(b$$9));\n}\nexport function FSharpSet$$get_Choose(x$$14) {\n  return SetTreeModule$$$choose(FSharpSet$$get_Tree(x$$14));\n}\nexport function FSharpSet$$get_MinimumElement(x$$15) {\n  return SetTreeModule$$$minimumElement(FSharpSet$$get_Tree(x$$15));\n}\nexport function FSharpSet$$get_MaximumElement(x$$16) {\n  return SetTreeModule$$$maximumElement(FSharpSet$$get_Tree(x$$16));\n}\nexport function FSharpSet$$IsSubsetOf$$6A20B1FF(x$$17, y) {\n  return SetTreeModule$$$subset(FSharpSet$$get_Comparer(x$$17), FSharpSet$$get_Tree(x$$17), FSharpSet$$get_Tree(y));\n}\nexport function FSharpSet$$IsSupersetOf$$6A20B1FF(x$$18, y$$1) {\n  return SetTreeModule$$$subset(FSharpSet$$get_Comparer(x$$18), FSharpSet$$get_Tree(y$$1), FSharpSet$$get_Tree(x$$18));\n}\nexport function FSharpSet$$IsProperSubsetOf$$6A20B1FF(x$$19, y$$2) {\n  return SetTreeModule$$$psubset(FSharpSet$$get_Comparer(x$$19), FSharpSet$$get_Tree(x$$19), FSharpSet$$get_Tree(y$$2));\n}\nexport function FSharpSet$$IsProperSupersetOf$$6A20B1FF(x$$20, y$$3) {\n  return SetTreeModule$$$psubset(FSharpSet$$get_Comparer(x$$20), FSharpSet$$get_Tree(y$$3), FSharpSet$$get_Tree(x$$20));\n}\n\nFSharpSet.prototype.toString = function () {\n  const this$ = this;\n  return \"set [\" + join(\"; \", ...map$$1(String, this$)) + \"]\";\n};\n\nFSharpSet.prototype.GetHashCode = function () {\n  const this$$$1 = this;\n\n  const combineHash = function combineHash(x$$22, y$$4) {\n    return (x$$22 << 1) + y$$4 + 631;\n  };\n\n  let res = 0;\n  const e$$1 = SetTreeModule$$$mkIEnumerator(FSharpSet$$get_Tree(this$$$1));\n\n  while (e$$1.MoveNext()) {\n    res = combineHash(res, structuralHash(e$$1.Current));\n  }\n\n  return Math.abs(res) | 0;\n};\n\nFSharpSet.prototype.Equals = function (that) {\n  const this$$$2 = this;\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(this$$$2), FSharpSet$$get_Tree(this$$$2), FSharpSet$$get_Tree(that)) === 0;\n};\n\nFSharpSet.prototype.CompareTo = function (that$$1) {\n  const this$$$3 = this;\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(this$$$3), FSharpSet$$get_Tree(this$$$3), FSharpSet$$get_Tree(that$$1)) | 0;\n};\n\nFSharpSet.prototype[Symbol.iterator] = function () {\n  const s$$32 = this;\n  return toIterator(SetTreeModule$$$mkIEnumerator(FSharpSet$$get_Tree(s$$32)));\n};\n\nexport function isEmpty(s$$33) {\n  return FSharpSet$$get_IsEmpty(s$$33);\n}\nexport function contains(x$$23, s$$34) {\n  return FSharpSet$$Contains$$2B595(s$$34, x$$23);\n}\nexport function add(x$$24, s$$35) {\n  return FSharpSet$$Add$$2B595(s$$35, x$$24);\n}\nexport function singleton(x$$25, comparer$$24) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$24, new SetTree$00601(2, \"SetOne\", x$$25));\n}\nexport function remove(x$$26, s$$36) {\n  return FSharpSet$$Remove$$2B595(s$$36, x$$26);\n}\nexport function union(s1$$2, s2$$2) {\n  return FSharpSet$$$op_Addition(s1$$2, s2$$2);\n}\nexport function unionMany(sets$$1, comparer$$25) {\n  return fold$$1(FSharpSet$$$op_Addition, FSharpSet$$$$002Ector$$2528C5CB(comparer$$25, new SetTree$00601(0, \"SetEmpty\")), sets$$1);\n}\nexport function intersect(s1$$3, s2$$3) {\n  return FSharpSet$$$Intersection$$Z3BE9BFE0(s1$$3, s2$$3);\n}\nexport function intersectMany(sets$$2) {\n  return FSharpSet$$$IntersectionMany$$Z15B59630(sets$$2);\n}\nexport function iterate(f$$16, s$$37) {\n  FSharpSet$$Iterate$$5028453F(s$$37, f$$16);\n}\nexport function empty(comparer$$26) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$26, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function forAll(f$$17, s$$38) {\n  return FSharpSet$$ForAll$$Z1D55A0D7(s$$38, f$$17);\n}\nexport function exists(f$$18, s$$39) {\n  return FSharpSet$$Exists$$Z1D55A0D7(s$$39, f$$18);\n}\nexport function filter(f$$19, s$$40) {\n  return FSharpSet$$Filter$$Z1D55A0D7(s$$40, f$$19);\n}\nexport function partition(f$$20, s$$41) {\n  return FSharpSet$$Partition$$Z1D55A0D7(s$$41, f$$20);\n}\nexport function fold(f$$21, z$$2, s$$42) {\n  return SetTreeModule$$$fold(f$$21, z$$2, FSharpSet$$get_Tree(s$$42));\n}\nexport function foldBack(f$$22, s$$43, z$$3) {\n  return SetTreeModule$$$foldBack(f$$22, FSharpSet$$get_Tree(s$$43), z$$3);\n}\nexport function map(f$$23, s$$44, comparer$$27) {\n  return FSharpSet$$Map$$38806891(s$$44, f$$23, comparer$$27);\n}\nexport function count(s$$45) {\n  return FSharpSet$$get_Count(s$$45);\n}\nexport function minimumElement(s$$46) {\n  return FSharpSet$$get_MinimumElement(s$$46);\n}\nexport function maximumElement(s$$47) {\n  return FSharpSet$$get_MaximumElement(s$$47);\n}\nexport function ofList(li, comparer$$28) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$28, SetTreeModule$$$ofSeq(comparer$$28, li));\n}\nexport function ofArray(arr$$2, comparer$$29) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$29, SetTreeModule$$$ofArray(comparer$$29, arr$$2));\n}\nexport function toList(s$$48) {\n  return SetTreeModule$$$toList(FSharpSet$$get_Tree(s$$48));\n}\nexport function toArray(s$$49, cons) {\n  const n$$3 = count(s$$49) | 0;\n  const res$$1 = new cons(n$$3);\n  SetTreeModule$$$copyToArray(FSharpSet$$get_Tree(s$$49), res$$1, 0);\n  return res$$1;\n}\nexport function toSeq(s$$50) {\n  return SetTreeModule$$$toSeq(FSharpSet$$get_Tree(s$$50));\n}\nexport function ofSeq(elements, comparer$$30) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$30, SetTreeModule$$$ofSeq(comparer$$30, elements));\n}\nexport function difference(x$$28, y$$6) {\n  return FSharpSet$$$op_Subtraction(x$$28, y$$6);\n}\nexport function isSubset(x$$29, y$$7) {\n  return FSharpSet$$IsSubsetOf$$6A20B1FF(x$$29, y$$7);\n}\nexport function isSuperset(x$$30, y$$8) {\n  return FSharpSet$$IsSupersetOf$$6A20B1FF(x$$30, y$$8);\n}\nexport function isProperSubset(x$$31, y$$9) {\n  return FSharpSet$$IsProperSubsetOf$$6A20B1FF(x$$31, y$$9);\n}\nexport function isProperSuperset(x$$32, y$$10) {\n  return FSharpSet$$IsProperSupersetOf$$6A20B1FF(x$$32, y$$10);\n}\nexport function minElement(s$$51) {\n  return FSharpSet$$get_MinimumElement(s$$51);\n}\nexport function maxElement(s$$52) {\n  return FSharpSet$$get_MaximumElement(s$$52);\n}\n\nfunction createMutablePrivate(comparer$$31, tree$0027) {\n  let tree$$1 = tree$0027;\n  return {\n    get size() {\n      return SetTreeModule$$$count(tree$$1);\n    },\n\n    add(x$$33) {\n      const this$$$4 = this;\n      tree$$1 = SetTreeModule$$$add(comparer$$31, x$$33, tree$$1);\n      return this$$$4;\n    },\n\n    add_(x$$34) {\n      if (SetTreeModule$$$mem(comparer$$31, x$$34, tree$$1)) {\n        return false;\n      } else {\n        tree$$1 = SetTreeModule$$$add(comparer$$31, x$$34, tree$$1);\n        return true;\n      }\n    },\n\n    clear() {\n      tree$$1 = new SetTree$00601(0, \"SetEmpty\");\n    },\n\n    delete(x$$35) {\n      if (SetTreeModule$$$mem(comparer$$31, x$$35, tree$$1)) {\n        tree$$1 = SetTreeModule$$$remove(comparer$$31, x$$35, tree$$1);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    has(x$$36) {\n      return SetTreeModule$$$mem(comparer$$31, x$$36, tree$$1);\n    },\n\n    values() {\n      return SetTreeModule$$$toSeq(tree$$1);\n    },\n\n    [Symbol.iterator]() {\n      return toIterator(SetTreeModule$$$mkIEnumerator(tree$$1));\n    },\n\n    GetEnumerator() {\n      return SetTreeModule$$$mkIEnumerator(tree$$1);\n    }\n\n  };\n}\n\nexport function createMutable(source, comparer$$32) {\n  return createMutablePrivate(comparer$$32, SetTreeModule$$$ofSeq(comparer$$32, source));\n}\nexport function distinct(xs, comparer$$33) {\n  return createMutable(xs, comparer$$33);\n}\nexport function distinctBy(projection, xs$$1, comparer$$34) {\n  const li$$1 = [];\n  const hashSet = createMutable(empty$$1(), comparer$$34);\n  iterate$$1(function (x$$37) {\n    if (hashSet.add_(projection(x$$37))) {\n      li$$1.push(x$$37);\n    }\n  }, xs$$1);\n  return li$$1;\n}\nexport function unionWith(s1$$4, s2$$4) {\n  return fold$$1(function folder(acc$$14, x$$38) {\n    return acc$$14.add(x$$38);\n  }, s1$$4, s2$$4);\n}\nexport function intersectWith(s1$$5, s2$$5, comparer$$35) {\n  const s2$$6 = ofSeq(s2$$5, comparer$$35);\n  iterate$$1(function (x$$39) {\n    if (!FSharpSet$$Contains$$2B595(s2$$6, x$$39)) {\n      s1$$5.delete(x$$39), null;\n    }\n  }, s1$$5);\n}\nexport function exceptWith(s1$$6, s2$$7) {\n  iterate$$1(function (x$$40) {\n    s1$$6.delete(x$$40), null;\n  }, s2$$7);\n}\nexport function isSubsetOf(s1$$7, s2$$8, comparer$$36) {\n  return isSubset(ofSeq(s1$$7, comparer$$36), ofSeq(s2$$8, comparer$$36));\n}\nexport function isSupersetOf(s1$$8, s2$$9, comparer$$37) {\n  return isSuperset(ofSeq(s1$$8, comparer$$37), ofSeq(s2$$9, comparer$$37));\n}\nexport function isProperSubsetOf(s1$$9, s2$$10, comparer$$38) {\n  return isProperSubset(ofSeq(s1$$9, comparer$$38), ofSeq(s2$$10, comparer$$38));\n}\nexport function isProperSupersetOf(s1$$10, s2$$11, comparer$$39) {\n  return isProperSuperset(ofSeq(s1$$10, comparer$$39), ofSeq(s2$$11, comparer$$39));\n}","import { defaultArg, value as value$$10, some } from \"./Option.js\";\nimport { compare, getItemFromDict, addToDict, addToSet, tryGetValue, comparerFromEqualityComparer, max as max$$1, comparePrimitives } from \"./Util.js\";\nimport { createMutable } from \"./Map.js\";\nimport { iterateIndexed as iterateIndexed$$1, iterate as iterate$$1 } from \"./Seq.js\";\nimport { createMutable as createMutable$$1 } from \"./Set.js\";\nimport { List } from \"./Types.js\";\n\nfunction indexNotFound() {\n  throw new Error(\"An index satisfying the predicate was not found in the collection.\");\n}\n\nexport function append(array1, array2, cons) {\n  if (ArrayBuffer.isView(array1)) {\n    const len1 = array1.length | 0;\n    const len2 = array2.length | 0;\n    const newArray = new cons(len1 + len2);\n\n    for (let i = 0; i <= len1 - 1; i++) {\n      newArray[i] = array1[i];\n    }\n\n    for (let i$$1 = 0; i$$1 <= len2 - 1; i$$1++) {\n      newArray[i$$1 + len1] = array2[i$$1];\n    }\n\n    return newArray;\n  } else {\n    return array1.concat(array2);\n  }\n}\nexport function filter(predicate, array) {\n  return array.filter(predicate);\n}\nexport function fill(target, targetIndex, count, value) {\n  target.fill(value, targetIndex, targetIndex + count);\n  return target;\n}\nexport function getSubArray(array$$3, start$$1, count$$2) {\n  return array$$3.slice(start$$1, start$$1 + count$$2);\n}\nexport function last(array$$5) {\n  if (array$$5.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  return array$$5[array$$5.length - 1];\n}\nexport function tryLast(array$$6) {\n  if (array$$6.length === 0) {\n    return null;\n  } else {\n    return some(array$$6[array$$6.length - 1]);\n  }\n}\nexport function mapIndexed(f, source, cons$$1) {\n  if (ArrayBuffer.isView(source)) {\n    const len = source.length | 0;\n    const target$$1 = new cons$$1(len);\n\n    for (let i$$2 = 0; i$$2 <= len - 1; i$$2++) {\n      target$$1[i$$2] = f(i$$2, source[i$$2]);\n    }\n\n    return target$$1;\n  } else {\n    return source.map(function (delegateArg0, delegateArg1) {\n      return f(delegateArg1, delegateArg0);\n    });\n  }\n}\nexport function map(f$$1, source$$1, cons$$2) {\n  if (ArrayBuffer.isView(source$$1)) {\n    const len$$1 = source$$1.length | 0;\n    const target$$2 = new cons$$2(len$$1);\n\n    for (let i$$4 = 0; i$$4 <= len$$1 - 1; i$$4++) {\n      target$$2[i$$4] = f$$1(source$$1[i$$4]);\n    }\n\n    return target$$2;\n  } else {\n    return source$$1.map(function (x$$1) {\n      return f$$1(x$$1);\n    });\n  }\n}\nexport function mapIndexed2(f$$2, source1, source2, cons$$3) {\n  if (source1.length !== source2.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result = new cons$$3(source1.length);\n\n  for (let i$$5 = 0; i$$5 <= source1.length - 1; i$$5++) {\n    result[i$$5] = f$$2(i$$5, source1[i$$5], source2[i$$5]);\n  }\n\n  return result;\n}\nexport function map2(f$$3, source1$$1, source2$$1, cons$$4) {\n  if (source1$$1.length !== source2$$1.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$1 = new cons$$4(source1$$1.length);\n\n  for (let i$$6 = 0; i$$6 <= source1$$1.length - 1; i$$6++) {\n    result$$1[i$$6] = f$$3(source1$$1[i$$6], source2$$1[i$$6]);\n  }\n\n  return result$$1;\n}\nexport function mapIndexed3(f$$4, source1$$2, source2$$2, source3, cons$$5) {\n  if (source1$$2.length !== source2$$2.length ? true : source2$$2.length !== source3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$2 = new cons$$5(source1$$2.length);\n\n  for (let i$$7 = 0; i$$7 <= source1$$2.length - 1; i$$7++) {\n    result$$2[i$$7] = f$$4(i$$7, source1$$2[i$$7], source2$$2[i$$7], source3[i$$7]);\n  }\n\n  return result$$2;\n}\nexport function map3(f$$5, source1$$3, source2$$3, source3$$1, cons$$6) {\n  if (source1$$3.length !== source2$$3.length ? true : source2$$3.length !== source3$$1.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$3 = new cons$$6(source1$$3.length);\n\n  for (let i$$8 = 0; i$$8 <= source1$$3.length - 1; i$$8++) {\n    result$$3[i$$8] = f$$5(source1$$3[i$$8], source2$$3[i$$8], source3$$1[i$$8]);\n  }\n\n  return result$$3;\n}\nexport function mapFold(mapping$$2, state, array$$9, cons$$7) {\n  const matchValue = array$$9.length | 0;\n\n  if (matchValue === 0) {\n    return [[], state];\n  } else {\n    const len$$2 = matchValue | 0;\n    let acc = state;\n    const res = new cons$$7(len$$2);\n\n    for (let i$$9 = 0; i$$9 <= array$$9.length - 1; i$$9++) {\n      const patternInput = mapping$$2(acc, array$$9[i$$9]);\n      res[i$$9] = patternInput[0];\n      acc = patternInput[1];\n    }\n\n    return [res, acc];\n  }\n}\nexport function mapFoldBack(mapping$$3, array$$10, state$$1, cons$$8) {\n  const matchValue$$1 = array$$10.length | 0;\n\n  if (matchValue$$1 === 0) {\n    return [[], state$$1];\n  } else {\n    const len$$3 = matchValue$$1 | 0;\n    let acc$$1 = state$$1;\n    const res$$1 = new cons$$8(len$$3);\n\n    for (let i$$10 = array$$10.length - 1; i$$10 >= 0; i$$10--) {\n      const patternInput$$1 = mapping$$3(array$$10[i$$10], acc$$1);\n      res$$1[i$$10] = patternInput$$1[0];\n      acc$$1 = patternInput$$1[1];\n    }\n\n    return [res$$1, acc$$1];\n  }\n}\nexport function indexed(source$$2) {\n  const len$$4 = source$$2.length | 0;\n  const target$$3 = new Array(len$$4);\n\n  for (let i$$11 = 0; i$$11 <= len$$4 - 1; i$$11++) {\n    target$$3[i$$11] = [i$$11, source$$2[i$$11]];\n  }\n\n  return target$$3;\n}\nexport function truncate(count$$4, array$$11) {\n  const count$$5 = max$$1(comparePrimitives, 0, count$$4) | 0;\n  return array$$11.slice(0, 0 + count$$5);\n}\nexport function concat(arrays, cons$$9) {\n  const arrays$$1 = Array.from(arrays);\n  const matchValue$$2 = arrays$$1.length | 0;\n\n  switch (matchValue$$2) {\n    case 0:\n      {\n        return new cons$$9(0);\n      }\n\n    case 1:\n      {\n        return arrays$$1[0];\n      }\n\n    default:\n      {\n        if (ArrayBuffer.isView(arrays$$1[0])) {\n          let totalIdx = 0;\n          let totalLength = 0;\n\n          for (let idx = 0; idx <= arrays$$1.length - 1; idx++) {\n            const arr$$4 = arrays$$1[idx];\n            totalLength = totalLength + arr$$4.length;\n          }\n\n          const result$$4 = new cons$$9(totalLength);\n\n          for (let idx$$1 = 0; idx$$1 <= arrays$$1.length - 1; idx$$1++) {\n            const arr$$5 = arrays$$1[idx$$1];\n\n            for (let j = 0; j <= arr$$5.length - 1; j++) {\n              result$$4[totalIdx] = arr$$5[j];\n              totalIdx = totalIdx + 1;\n            }\n          }\n\n          return result$$4;\n        } else {\n          return arrays$$1[0].concat(...arrays$$1.slice(1));\n        }\n      }\n  }\n}\nexport function collect(mapping$$4, array$$14, cons$$10) {\n  const mapped = map(mapping$$4, array$$14, Array);\n  return concat(mapped, cons$$10);\n}\nexport function countBy(projection, array$$15, eq) {\n  const dict = createMutable([], comparerFromEqualityComparer(eq));\n\n  for (let idx$$2 = 0; idx$$2 <= array$$15.length - 1; idx$$2++) {\n    const value$$2 = array$$15[idx$$2];\n    const key = projection(value$$2);\n    const matchValue$$3 = tryGetValue(dict, key, 0);\n\n    if (matchValue$$3[0]) {\n      dict.set(key, matchValue$$3[1] + 1);\n    } else {\n      dict.set(key, 1);\n    }\n  }\n\n  const res$$2 = new Array(dict.size);\n  let i$$12 = 0;\n  iterate$$1(function (group) {\n    res$$2[i$$12] = [group[0], group[1]];\n    i$$12 = i$$12 + 1;\n  }, dict);\n  return res$$2;\n}\nexport function distinctBy(projection$$1, array$$16, eq$$1) {\n  const hashSet = createMutable$$1([], comparerFromEqualityComparer(eq$$1));\n  return filter(function predicate$$2($arg$$3) {\n    return addToSet(projection$$1($arg$$3), hashSet);\n  }, array$$16);\n}\nexport function distinct(array$$18, eq$$2) {\n  return distinctBy(function (x$$2) {\n    return x$$2;\n  }, array$$18, eq$$2);\n}\nexport function where(predicate$$3, array$$19) {\n  return array$$19.filter(predicate$$3);\n}\nexport function contains(value$$3, array$$21, eq$$3) {\n  const loop = function loop(i$$13) {\n    loop: while (true) {\n      if (i$$13 >= array$$21.length) {\n        return false;\n      } else if (eq$$3.Equals(value$$3, array$$21[i$$13])) {\n        return true;\n      } else {\n        const $i$$13$$51 = i$$13;\n        i$$13 = $i$$13$$51 + 1;\n        continue loop;\n      }\n\n      break;\n    }\n  };\n\n  return loop(0);\n}\nexport function except(itemsToExclude, array$$22, eq$$4) {\n  if (array$$22.length === 0) {\n    return array$$22;\n  } else {\n    const cached = createMutable$$1(itemsToExclude, comparerFromEqualityComparer(eq$$4));\n    return array$$22.filter(function predicate$$5(arg00$$1) {\n      return addToSet(arg00$$1, cached);\n    });\n  }\n}\nexport function groupBy(projection$$2, array$$25, cons$$11, eq$$5) {\n  const dict$$1 = createMutable([], comparerFromEqualityComparer(eq$$5));\n  const keys = [];\n\n  for (let idx$$3 = 0; idx$$3 <= array$$25.length - 1; idx$$3++) {\n    const v = array$$25[idx$$3];\n    const key$$1 = projection$$2(v);\n    const matchValue$$4 = tryGetValue(dict$$1, key$$1, null);\n\n    if (matchValue$$4[0]) {\n      dict$$1.set(key$$1, new List(v, matchValue$$4[1]));\n    } else {\n      addToDict(dict$$1, key$$1, new List(v, new List()));\n      keys.push(key$$1);\n    }\n  }\n\n  const result$$5 = new Array(keys.length);\n  iterateIndexed$$1(function action(i$$14, key$$2) {\n    result$$5[i$$14] = [key$$2, cons$$11.from(getItemFromDict(dict$$1, key$$2)).reverse()];\n  }, keys);\n  return result$$5;\n}\nexport function empty(cons$$12) {\n  return new cons$$12(0);\n}\nexport function singleton(value$$4, cons$$14) {\n  const ar = new cons$$14(1);\n  ar[0] = value$$4;\n  return ar;\n}\nexport function initialize(count$$8, initializer, cons$$15) {\n  if (count$$8 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  const result$$6 = new cons$$15(count$$8);\n\n  for (let i$$15 = 0; i$$15 <= count$$8 - 1; i$$15++) {\n    result$$6[i$$15] = initializer(i$$15);\n  }\n\n  return result$$6;\n}\nexport function pairwise(array$$28) {\n  if (array$$28.length < 2) {\n    return [];\n  } else {\n    const count$$9 = array$$28.length - 1 | 0;\n    const result$$7 = new Array(count$$9);\n\n    for (let i$$16 = 0; i$$16 <= count$$9 - 1; i$$16++) {\n      result$$7[i$$16] = [array$$28[i$$16], array$$28[i$$16 + 1]];\n    }\n\n    return result$$7;\n  }\n}\nexport function replicate(count$$10, initial, cons$$16) {\n  if (count$$10 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  const result$$8 = new cons$$16(count$$10);\n\n  for (let i$$17 = 0; i$$17 <= result$$8.length - 1; i$$17++) {\n    result$$8[i$$17] = initial;\n  }\n\n  return result$$8;\n}\nexport function copy(array$$29, cons$$17) {\n  return array$$29.slice();\n}\nexport function reverse(array$$31, cons$$18) {\n  return array$$31.slice().reverse();\n}\nexport function scan(folder, state$$2, array$$35, cons$$19) {\n  const res$$3 = new cons$$19(array$$35.length + 1);\n  res$$3[0] = state$$2;\n\n  for (let i$$18 = 0; i$$18 <= array$$35.length - 1; i$$18++) {\n    res$$3[i$$18 + 1] = folder(res$$3[i$$18], array$$35[i$$18]);\n  }\n\n  return res$$3;\n}\nexport function scanBack(folder$$1, array$$36, state$$3, cons$$20) {\n  const res$$4 = new cons$$20(array$$36.length + 1);\n  res$$4[array$$36.length] = state$$3;\n\n  for (let i$$19 = array$$36.length - 1; i$$19 >= 0; i$$19--) {\n    res$$4[i$$19] = folder$$1(array$$36[i$$19], res$$4[i$$19 + 1]);\n  }\n\n  return res$$4;\n}\nexport function skip(count$$11, array$$37, cons$$21) {\n  if (count$$11 > array$$37.length) {\n    throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n  }\n\n  if (count$$11 === array$$37.length) {\n    return new cons$$21(0);\n  } else {\n    const count$$12 = (count$$11 < 0 ? 0 : count$$11) | 0;\n    return array$$37.slice(count$$12);\n  }\n}\nexport function skipWhile(predicate$$7, array$$39, cons$$23) {\n  let count$$14 = 0;\n\n  while (count$$14 < array$$39.length ? predicate$$7(array$$39[count$$14]) : false) {\n    count$$14 = count$$14 + 1;\n  }\n\n  if (count$$14 === array$$39.length) {\n    return new cons$$23(0);\n  } else {\n    return array$$39.slice(count$$14);\n  }\n}\nexport function take(count$$16, array$$41, cons$$25) {\n  if (count$$16 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  if (count$$16 > array$$41.length) {\n    throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n  }\n\n  if (count$$16 === 0) {\n    return new cons$$25(0);\n  } else {\n    return array$$41.slice(0, 0 + count$$16);\n  }\n}\nexport function takeWhile(predicate$$8, array$$43, cons$$27) {\n  let count$$18 = 0;\n\n  while (count$$18 < array$$43.length ? predicate$$8(array$$43[count$$18]) : false) {\n    count$$18 = count$$18 + 1;\n  }\n\n  if (count$$18 === 0) {\n    return new cons$$27(0);\n  } else {\n    return array$$43.slice(0, 0 + count$$18);\n  }\n}\nexport function addRangeInPlace(range, array$$45) {\n  iterate$$1(function (x$$3) {\n    array$$45.push(x$$3), null;\n  }, range);\n}\nexport function removeInPlace(item$$2, array$$47) {\n  const i$$20 = array$$47.indexOf(item$$2);\n\n  if (i$$20 > -1) {\n    array$$47.splice(i$$20, 1), null;\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function removeAllInPlace(predicate$$9, array$$50) {\n  const countRemoveAll = function countRemoveAll(count$$20) {\n    const i$$21 = array$$50.findIndex(predicate$$9);\n\n    if (i$$21 > -1) {\n      array$$50.splice(i$$21, 1), null;\n      return countRemoveAll(count$$20) + 1 | 0;\n    } else {\n      return count$$20 | 0;\n    }\n  };\n\n  return countRemoveAll(0) | 0;\n}\nexport function copyTo(source$$4, sourceIndex, target$$4, targetIndex$$1, count$$21) {\n  const diff = targetIndex$$1 - sourceIndex | 0;\n\n  for (let i$$22 = sourceIndex; i$$22 <= sourceIndex + count$$21 - 1; i$$22++) {\n    target$$4[i$$22 + diff] = source$$4[i$$22];\n  }\n}\nexport function partition(f$$6, source$$5, cons$$29) {\n  const len$$9 = source$$5.length | 0;\n  const res1 = new cons$$29(len$$9);\n  const res2 = new cons$$29(len$$9);\n  let iTrue = 0;\n  let iFalse = 0;\n\n  for (let i$$23 = 0; i$$23 <= len$$9 - 1; i$$23++) {\n    if (f$$6(source$$5[i$$23])) {\n      res1[iTrue] = source$$5[i$$23];\n      iTrue = iTrue + 1;\n    } else {\n      res2[iFalse] = source$$5[i$$23];\n      iFalse = iFalse + 1;\n    }\n  }\n\n  return [truncate(iTrue, res1), truncate(iFalse, res2)];\n}\nexport function find(predicate$$11, array$$55) {\n  const matchValue$$5 = array$$55.find(predicate$$11);\n\n  if (matchValue$$5 == null) {\n    return indexNotFound();\n  } else {\n    const res$$5 = value$$10(matchValue$$5);\n    return res$$5;\n  }\n}\nexport function tryFind(predicate$$13, array$$57) {\n  return array$$57.find(predicate$$13);\n}\nexport function findIndex(predicate$$15, array$$59) {\n  var index;\n  const matchValue$$6 = array$$59.findIndex(predicate$$15);\n\n  if (index = matchValue$$6 | 0, index > -1) {\n    const index$$1 = matchValue$$6 | 0;\n    return index$$1 | 0;\n  } else {\n    return indexNotFound() | 0;\n  }\n}\nexport function tryFindIndex(predicate$$17, array$$61) {\n  var index$$2;\n  const matchValue$$7 = array$$61.findIndex(predicate$$17);\n\n  if (index$$2 = matchValue$$7 | 0, index$$2 > -1) {\n    const index$$3 = matchValue$$7 | 0;\n    return index$$3;\n  } else {\n    return null;\n  }\n}\nexport function pick(chooser, array$$63) {\n  const loop$$1 = function loop$$1(i$$24) {\n    loop$$1: while (true) {\n      if (i$$24 >= array$$63.length) {\n        return indexNotFound();\n      } else {\n        const matchValue$$8 = chooser(array$$63[i$$24]);\n\n        if (matchValue$$8 != null) {\n          const res$$6 = value$$10(matchValue$$8);\n          return res$$6;\n        } else {\n          const $i$$24$$88 = i$$24;\n          i$$24 = $i$$24$$88 + 1;\n          continue loop$$1;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return loop$$1(0);\n}\nexport function tryPick(chooser$$1, array$$64) {\n  const loop$$2 = function loop$$2(i$$25) {\n    loop$$2: while (true) {\n      if (i$$25 >= array$$64.length) {\n        return null;\n      } else {\n        const matchValue$$9 = chooser$$1(array$$64[i$$25]);\n\n        if (matchValue$$9 == null) {\n          const $i$$25$$91 = i$$25;\n          i$$25 = $i$$25$$91 + 1;\n          continue loop$$2;\n        } else {\n          const res$$7 = matchValue$$9;\n          return res$$7;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return loop$$2(0);\n}\nexport function findBack(predicate$$19, array$$65) {\n  const loop$$3 = function loop$$3(i$$26) {\n    loop$$3: while (true) {\n      if (i$$26 < 0) {\n        return indexNotFound();\n      } else if (predicate$$19(array$$65[i$$26])) {\n        return array$$65[i$$26];\n      } else {\n        const $i$$26$$94 = i$$26;\n        i$$26 = $i$$26$$94 - 1;\n        continue loop$$3;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$3(array$$65.length - 1);\n}\nexport function tryFindBack(predicate$$20, array$$66) {\n  const loop$$4 = function loop$$4(i$$27) {\n    loop$$4: while (true) {\n      if (i$$27 < 0) {\n        return null;\n      } else if (predicate$$20(array$$66[i$$27])) {\n        return some(array$$66[i$$27]);\n      } else {\n        const $i$$27$$97 = i$$27;\n        i$$27 = $i$$27$$97 - 1;\n        continue loop$$4;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$4(array$$66.length - 1);\n}\nexport function findLastIndex(predicate$$21, array$$67) {\n  const loop$$5 = function loop$$5(i$$28) {\n    loop$$5: while (true) {\n      if (i$$28 < 0) {\n        return -1 | 0;\n      } else if (predicate$$21(array$$67[i$$28])) {\n        return i$$28 | 0;\n      } else {\n        const $i$$28$$100 = i$$28;\n        i$$28 = $i$$28$$100 - 1;\n        continue loop$$5;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$5(array$$67.length - 1) | 0;\n}\nexport function findIndexBack(predicate$$22, array$$68) {\n  const loop$$6 = function loop$$6(i$$29) {\n    loop$$6: while (true) {\n      if (i$$29 < 0) {\n        return indexNotFound() | 0;\n      } else if (predicate$$22(array$$68[i$$29])) {\n        return i$$29 | 0;\n      } else {\n        const $i$$29$$103 = i$$29;\n        i$$29 = $i$$29$$103 - 1;\n        continue loop$$6;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$6(array$$68.length - 1) | 0;\n}\nexport function tryFindIndexBack(predicate$$23, array$$69) {\n  const loop$$7 = function loop$$7(i$$30) {\n    loop$$7: while (true) {\n      if (i$$30 < 0) {\n        return null;\n      } else if (predicate$$23(array$$69[i$$30])) {\n        return i$$30;\n      } else {\n        const $i$$30$$106 = i$$30;\n        i$$30 = $i$$30$$106 - 1;\n        continue loop$$7;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$7(array$$69.length - 1);\n}\nexport function choose(chooser$$2, array$$70, cons$$30) {\n  const f$$7 = function f$$7(x$$4) {\n    return chooser$$2(x$$4) != null;\n  };\n\n  const g = function g(x$$5) {\n    return value$$10(chooser$$2(x$$5));\n  };\n\n  const arr$$6 = array$$70.filter(f$$7);\n  return map(g, arr$$6, cons$$30);\n}\nexport function foldIndexed(folder$$2, state$$4, array$$72) {\n  return array$$72.reduce(function (delegateArg0$$1, delegateArg1$$1, delegateArg2) {\n    return folder$$2(delegateArg2, delegateArg0$$1, delegateArg1$$1);\n  }, state$$4);\n}\nexport function fold(folder$$4, state$$6, array$$74) {\n  return array$$74.reduce(folder$$4, state$$6);\n}\nexport function iterate(action$$1, array$$76) {\n  for (let i$$32 = 0; i$$32 <= array$$76.length - 1; i$$32++) {\n    action$$1(array$$76[i$$32]);\n  }\n}\nexport function iterateIndexed(action$$2, array$$77) {\n  for (let i$$33 = 0; i$$33 <= array$$77.length - 1; i$$33++) {\n    action$$2(i$$33, array$$77[i$$33]);\n  }\n}\nexport function iterate2(action$$3, array1$$2, array2$$2) {\n  if (array1$$2.length !== array2$$2.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  for (let i$$34 = 0; i$$34 <= array1$$2.length - 1; i$$34++) {\n    action$$3(array1$$2[i$$34], array2$$2[i$$34]);\n  }\n}\nexport function iterateIndexed2(action$$4, array1$$3, array2$$3) {\n  if (array1$$3.length !== array2$$3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  for (let i$$35 = 0; i$$35 <= array1$$3.length - 1; i$$35++) {\n    action$$4(i$$35, array1$$3[i$$35], array2$$3[i$$35]);\n  }\n}\nexport function isEmpty(array$$78) {\n  return array$$78.length === 0;\n}\nexport function forAll(predicate$$25, array$$79) {\n  return array$$79.every(predicate$$25);\n}\nexport function permute(f$$8, array$$81) {\n  const size = array$$81.length | 0;\n  const res$$8 = new array$$81.constructor(array$$81.length);\n  const checkFlags = new Array(size);\n  iterateIndexed(function (i$$36, x$$8) {\n    const j$$1 = f$$8(i$$36) | 0;\n\n    if (j$$1 < 0 ? true : j$$1 >= size) {\n      throw new Error(\"Not a valid permutation\");\n    }\n\n    res$$8[j$$1] = x$$8;\n    checkFlags[j$$1] = 1;\n  }, array$$81);\n  const isValid = forAll(function (y) {\n    return 1 === y;\n  }, checkFlags);\n\n  if (!isValid) {\n    throw new Error(\"Not a valid permutation\");\n  }\n\n  return res$$8;\n}\nexport function setSlice(target$$5, lower, upper, source$$6) {\n  const lower$$1 = defaultArg(lower, 0) | 0;\n  const upper$$1 = defaultArg(upper, 0) | 0;\n  const length = (upper$$1 > 0 ? upper$$1 : target$$5.length - 1) - lower$$1 | 0;\n\n  if (ArrayBuffer.isView(target$$5) ? source$$6.length <= length : false) {\n    return target$$5.set(source$$6, lower$$1);\n  } else {\n    for (let i$$37 = 0; i$$37 <= length; i$$37++) {\n      target$$5[i$$37 + lower$$1] = source$$6[i$$37];\n    }\n  }\n}\nexport function sortInPlaceBy(projection$$3, xs, comparer) {\n  xs.sort(function (x$$10, y$$1) {\n    return comparer.Compare(projection$$3(x$$10), projection$$3(y$$1));\n  });\n}\nexport function sortInPlace(xs$$1, comparer$$1) {\n  xs$$1.sort(function (x$$11, y$$2) {\n    return comparer$$1.Compare(x$$11, y$$2);\n  });\n}\n\nfunction copyArray(array$$82) {\n  const result$$9 = new array$$82.constructor(array$$82.length);\n\n  for (let i$$38 = 0; i$$38 <= array$$82.length - 1; i$$38++) {\n    result$$9[i$$38] = array$$82[i$$38];\n  }\n\n  return result$$9;\n}\n\nexport function sort(xs$$2, comparer$$2) {\n  const xs$$3 = copyArray(xs$$2);\n  xs$$3.sort(function (x$$12, y$$3) {\n    return comparer$$2.Compare(x$$12, y$$3);\n  });\n  return xs$$3;\n}\nexport function sortBy(projection$$4, xs$$4, comparer$$4) {\n  const xs$$5 = copyArray(xs$$4);\n  xs$$5.sort(function (x$$13, y$$4) {\n    return comparer$$4.Compare(projection$$4(x$$13), projection$$4(y$$4));\n  });\n  return xs$$5;\n}\nexport function sortDescending(xs$$6, comparer$$6) {\n  const xs$$7 = copyArray(xs$$6);\n  xs$$7.sort(function (x$$14, y$$5) {\n    return comparer$$6.Compare(x$$14, y$$5) * -1;\n  });\n  return xs$$7;\n}\nexport function sortByDescending(projection$$5, xs$$8, comparer$$8) {\n  const xs$$9 = copyArray(xs$$8);\n  xs$$9.sort(function (x$$15, y$$6) {\n    return comparer$$8.Compare(projection$$5(x$$15), projection$$5(y$$6)) * -1;\n  });\n  return xs$$9;\n}\nexport function sortWith(comparer$$10, xs$$10) {\n  const xs$$11 = copyArray(xs$$10);\n  xs$$11.sort(comparer$$10);\n  return xs$$11;\n}\nexport function unfold(generator, state$$8) {\n  const res$$9 = [];\n\n  const loop$$8 = function loop$$8(state$$9) {\n    loop$$8: while (true) {\n      const matchValue$$10 = generator(state$$9);\n\n      if (matchValue$$10 != null) {\n        const x$$16 = matchValue$$10[0];\n        const s$0027$$2 = matchValue$$10[1];\n        res$$9.push(x$$16), null;\n        state$$9 = s$0027$$2;\n        continue loop$$8;\n      }\n\n      break;\n    }\n  };\n\n  loop$$8(state$$8);\n  return res$$9;\n}\nexport function unzip(array$$84) {\n  const len$$11 = array$$84.length | 0;\n  const res1$$1 = new Array(len$$11);\n  const res2$$1 = new Array(len$$11);\n  iterateIndexed(function (i$$39, tupledArg) {\n    res1$$1[i$$39] = tupledArg[0];\n    res2$$1[i$$39] = tupledArg[1];\n  }, array$$84);\n  return [res1$$1, res2$$1];\n}\nexport function unzip3(array$$85) {\n  const len$$14 = array$$85.length | 0;\n  const res1$$2 = new Array(len$$14);\n  const res2$$2 = new Array(len$$14);\n  const res3 = new Array(len$$14);\n  iterateIndexed(function (i$$40, tupledArg$$1) {\n    res1$$2[i$$40] = tupledArg$$1[0];\n    res2$$2[i$$40] = tupledArg$$1[1];\n    res3[i$$40] = tupledArg$$1[2];\n  }, array$$85);\n  return [res1$$2, res2$$2, res3];\n}\nexport function zip(array1$$4, array2$$4) {\n  if (array1$$4.length !== array2$$4.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$10 = new Array(array1$$4.length);\n\n  for (let i$$41 = 0; i$$41 <= array1$$4.length - 1; i$$41++) {\n    result$$10[i$$41] = [array1$$4[i$$41], array2$$4[i$$41]];\n  }\n\n  return result$$10;\n}\nexport function zip3(array1$$5, array2$$5, array3) {\n  if (array1$$5.length !== array2$$5.length ? true : array2$$5.length !== array3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$11 = new Array(array1$$5.length);\n\n  for (let i$$42 = 0; i$$42 <= array1$$5.length - 1; i$$42++) {\n    result$$11[i$$42] = [array1$$5[i$$42], array2$$5[i$$42], array3[i$$42]];\n  }\n\n  return result$$11;\n}\nexport function chunkBySize(chunkSize, array$$86) {\n  if (chunkSize < 1) {\n    throw new Error(\"The input must be positive.\\\\nParameter name: size\");\n  }\n\n  if (array$$86.length === 0) {\n    return [[]];\n  } else {\n    const result$$12 = [];\n\n    for (let x$$17 = 0; x$$17 <= ~~Math.ceil(array$$86.length / chunkSize) - 1; x$$17++) {\n      const start$$8 = x$$17 * chunkSize | 0;\n      const slice = array$$86.slice(start$$8, start$$8 + chunkSize);\n      result$$12.push(slice), null;\n    }\n\n    return result$$12;\n  }\n}\nexport function splitAt(index$$4, array$$89) {\n  if (index$$4 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: index\");\n  }\n\n  if (index$$4 > array$$89.length) {\n    throw new Error(\"The input sequence has an insufficient number of elements.\\\\nParameter name: index\");\n  }\n\n  return [array$$89.slice(0, 0 + index$$4), array$$89.slice(index$$4)];\n}\nexport function compareWith(comparer$$12, array1$$6, array2$$6) {\n  if (array1$$6 == null) {\n    if (array2$$6 == null) {\n      return 0;\n    } else {\n      return -1 | 0;\n    }\n  } else if (array2$$6 == null) {\n    return 1;\n  } else {\n    let i$$43 = 0;\n    let result$$13 = 0;\n    const length1 = array1$$6.length | 0;\n    const length2 = array2$$6.length | 0;\n\n    if (length1 > length2) {\n      return 1;\n    } else if (length1 < length2) {\n      return -1 | 0;\n    } else {\n      while (i$$43 < length1 ? result$$13 === 0 : false) {\n        result$$13 = comparer$$12(array1$$6[i$$43], array2$$6[i$$43]);\n        i$$43 = i$$43 + 1;\n      }\n\n      return result$$13 | 0;\n    }\n  }\n}\nexport function equalsWith(comparer$$13, array1$$7, array2$$7) {\n  return compareWith(compare, array1$$7, array2$$7) === 0;\n}\nexport function exactlyOne(array$$92) {\n  if (array$$92.length === 1) {\n    return array$$92[0];\n  } else if (array$$92.length === 0) {\n    throw new Error(\"The input sequence was empty\\\\nParameter name: array\");\n  } else {\n    throw new Error(\"Input array too long\\\\nParameter name: array\");\n  }\n}\nexport function head(array$$93) {\n  if (array$$93.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  } else {\n    return array$$93[0];\n  }\n}\nexport function tryHead(array$$94) {\n  if (array$$94.length === 0) {\n    return null;\n  } else {\n    return some(array$$94[0]);\n  }\n}\nexport function tail(array$$95) {\n  if (array$$95.length === 0) {\n    throw new Error(\"Not enough elements\\\\nParameter name: array\");\n  }\n\n  return array$$95.slice(1);\n}\nexport function item(index$$5, array$$97) {\n  return array$$97[index$$5];\n}\nexport function tryItem(index$$6, array$$98) {\n  if (index$$6 < 0 ? true : index$$6 >= array$$98.length) {\n    return null;\n  } else {\n    return some(array$$98[index$$6]);\n  }\n}\nexport function foldBackIndexed(folder$$6, array$$99, state$$10) {\n  return array$$99.reduceRight(function (delegateArg0$$3, delegateArg1$$3, delegateArg2$$1) {\n    return folder$$6(delegateArg2$$1, delegateArg1$$3, delegateArg0$$3);\n  }, state$$10);\n}\nexport function foldBack(folder$$8, array$$101, state$$12) {\n  return array$$101.reduceRight(function (delegateArg0$$4, delegateArg1$$4) {\n    return folder$$8(delegateArg1$$4, delegateArg0$$4);\n  }, state$$12);\n}\nexport function foldIndexed2(folder$$10, state$$14, array1$$8, array2$$8) {\n  let acc$$6 = state$$14;\n\n  if (array1$$8.length !== array2$$8.length) {\n    throw new Error(\"Arrays have different lengths\");\n  }\n\n  for (let i$$45 = 0; i$$45 <= array1$$8.length - 1; i$$45++) {\n    acc$$6 = folder$$10(i$$45, acc$$6, array1$$8[i$$45], array2$$8[i$$45]);\n  }\n\n  return acc$$6;\n}\nexport function fold2(folder$$11, state$$15, array1$$9, array2$$9) {\n  return foldIndexed2(function (_arg1, acc$$7, x$$20, y$$7) {\n    return folder$$11(acc$$7, x$$20, y$$7);\n  }, state$$15, array1$$9, array2$$9);\n}\nexport function foldBackIndexed2(folder$$12, array1$$10, array2$$10, state$$16) {\n  let acc$$8 = state$$16;\n\n  if (array1$$10.length !== array2$$10.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const size$$1 = array1$$10.length | 0;\n\n  for (let i$$46 = 1; i$$46 <= size$$1; i$$46++) {\n    acc$$8 = folder$$12(i$$46 - 1, array1$$10[size$$1 - i$$46], array2$$10[size$$1 - i$$46], acc$$8);\n  }\n\n  return acc$$8;\n}\nexport function foldBack2(f$$9, array1$$11, array2$$11, state$$17) {\n  return foldBackIndexed2(function (_arg1$$1, x$$21, y$$8, acc$$9) {\n    return f$$9(x$$21, y$$8, acc$$9);\n  }, array1$$11, array2$$11, state$$17);\n}\nexport function reduce(reduction, array$$103) {\n  if (array$$103.length === 0) {\n    throw new Error(\"The input array was empty\");\n  }\n\n  return array$$103.reduce(reduction);\n}\nexport function reduceBack(reduction$$2, array$$105) {\n  if (array$$105.length === 0) {\n    throw new Error(\"The input array was empty\");\n  }\n\n  return array$$105.reduceRight(reduction$$2);\n}\nexport function forAll2(predicate$$27, array1$$12, array2$$12) {\n  return fold2(function (acc$$10, x$$22, y$$9) {\n    return acc$$10 ? predicate$$27(x$$22, y$$9) : false;\n  }, true, array1$$12, array2$$12);\n}\nexport function existsOffset($arg$$178, $arg$$179, $arg$$180) {\n  existsOffset: while (true) {\n    const predicate$$28 = $arg$$178,\n          array$$107 = $arg$$179,\n          index$$7 = $arg$$180;\n\n    if (index$$7 === array$$107.length) {\n      return false;\n    } else if (predicate$$28(array$$107[index$$7])) {\n      return true;\n    } else {\n      $arg$$178 = predicate$$28;\n      $arg$$179 = array$$107;\n      $arg$$180 = index$$7 + 1;\n      continue existsOffset;\n    }\n\n    break;\n  }\n}\nexport function exists(predicate$$29, array$$108) {\n  return existsOffset(predicate$$29, array$$108, 0);\n}\nexport function existsOffset2($arg$$183, $arg$$184, $arg$$185, $arg$$186) {\n  existsOffset2: while (true) {\n    const predicate$$30 = $arg$$183,\n          array1$$13 = $arg$$184,\n          array2$$13 = $arg$$185,\n          index$$8 = $arg$$186;\n\n    if (index$$8 === array1$$13.length) {\n      return false;\n    } else if (predicate$$30(array1$$13[index$$8], array2$$13[index$$8])) {\n      return true;\n    } else {\n      $arg$$183 = predicate$$30;\n      $arg$$184 = array1$$13;\n      $arg$$185 = array2$$13;\n      $arg$$186 = index$$8 + 1;\n      continue existsOffset2;\n    }\n\n    break;\n  }\n}\nexport function exists2(predicate$$31, array1$$14, array2$$14) {\n  if (array1$$14.length !== array2$$14.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  return existsOffset2(predicate$$31, array1$$14, array2$$14, 0);\n}\nexport function sum(array$$109, adder) {\n  let acc$$11 = adder.GetZero();\n\n  for (let i$$47 = 0; i$$47 <= array$$109.length - 1; i$$47++) {\n    acc$$11 = adder.Add(acc$$11, array$$109[i$$47]);\n  }\n\n  return acc$$11;\n}\nexport function sumBy(projection$$6, array$$110, adder$$1) {\n  let acc$$12 = adder$$1.GetZero();\n\n  for (let i$$48 = 0; i$$48 <= array$$110.length - 1; i$$48++) {\n    acc$$12 = adder$$1.Add(acc$$12, projection$$6(array$$110[i$$48]));\n  }\n\n  return acc$$12;\n}\nexport function maxBy(projection$$7, xs$$12, comparer$$14) {\n  return reduce(function (x$$23, y$$10) {\n    return comparer$$14.Compare(projection$$7(y$$10), projection$$7(x$$23)) > 0 ? y$$10 : x$$23;\n  }, xs$$12);\n}\nexport function max(xs$$13, comparer$$15) {\n  return reduce(function (x$$24, y$$11) {\n    return comparer$$15.Compare(y$$11, x$$24) > 0 ? y$$11 : x$$24;\n  }, xs$$13);\n}\nexport function minBy(projection$$8, xs$$14, comparer$$16) {\n  return reduce(function (x$$25, y$$12) {\n    return comparer$$16.Compare(projection$$8(y$$12), projection$$8(x$$25)) > 0 ? x$$25 : y$$12;\n  }, xs$$14);\n}\nexport function min(xs$$15, comparer$$17) {\n  return reduce(function (x$$26, y$$13) {\n    return comparer$$17.Compare(y$$13, x$$26) > 0 ? x$$26 : y$$13;\n  }, xs$$15);\n}\nexport function average(array$$111, averager) {\n  if (array$$111.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  let total = averager.GetZero();\n\n  for (let i$$49 = 0; i$$49 <= array$$111.length - 1; i$$49++) {\n    total = averager.Add(total, array$$111[i$$49]);\n  }\n\n  return averager.DivideByInt(total, array$$111.length);\n}\nexport function averageBy(projection$$9, array$$112, averager$$1) {\n  if (array$$112.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  let total$$1 = averager$$1.GetZero();\n\n  for (let i$$50 = 0; i$$50 <= array$$112.length - 1; i$$50++) {\n    total$$1 = averager$$1.Add(total$$1, projection$$9(array$$112[i$$50]));\n  }\n\n  return averager$$1.DivideByInt(total$$1, array$$112.length);\n}\nexport function ofSeq(source$$8, cons$$31) {\n  return cons$$31.from(source$$8);\n}\nexport function ofList(source$$9, cons$$32) {\n  return cons$$32.from(source$$9);\n}\nexport function toList(source$$10) {\n  const len$$20 = source$$10.length | 0;\n  let target$$7 = new List();\n\n  for (let i$$51 = len$$20 - 1; i$$51 >= 0; i$$51--) {\n    target$$7 = new List(source$$10[i$$51], target$$7);\n  }\n\n  return target$$7;\n}\nexport function windowed(windowSize, source$$11) {\n  if (windowSize <= 0) {\n    throw new Error(\"windowSize must be positive\");\n  }\n\n  const res$$10 = new Array(max$$1(comparePrimitives, 0, source$$11.length - windowSize));\n\n  for (let i$$52 = windowSize; i$$52 <= source$$11.length; i$$52++) {\n    res$$10[i$$52 - windowSize] = source$$11.slice(i$$52 - windowSize, i$$52 - 1 + 1);\n  }\n\n  return res$$10;\n}","import { defaultArg, value as value$$1, some } from \"./Option.js\";\nimport { FSharpRef, List } from \"./Types.js\";\nimport { iterate as iterate$$1, collect as collect$$1, scanBack as scanBack$$1, scan as scan$$1, foldBack2 as foldBack2$$1, fold2 as fold2$$1, fold as fold$$1, map as map$$1 } from \"./Seq.js\";\nimport { partialApply, getItemFromDict, addToDict, tryGetValue, addToSet, comparerFromEqualityComparer, count } from \"./Util.js\";\nimport { ofList } from \"./Array.js\";\nimport { permute as permute$$1, findIndexBack as findIndexBack$$1, tryFindIndexBack as tryFindIndexBack$$1 } from \"./Array\";\nimport { createMutable } from \"./Set.js\";\nimport { createMutable as createMutable$$1 } from \"./Map.js\";\nexport function head(_arg1) {\n  if (_arg1.tail != null) {\n    const x = _arg1.head;\n    return x;\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function tryHead(_arg1$$1) {\n  if (_arg1$$1.tail != null) {\n    const x$$1 = _arg1$$1.head;\n    return some(x$$1);\n  } else {\n    return null;\n  }\n}\nexport function tail(_arg1$$2) {\n  if (_arg1$$2.tail != null) {\n    const xs = _arg1$$2.tail;\n    return xs;\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function last(_arg1$$3) {\n  last: while (true) {\n    if (_arg1$$3.tail != null) {\n      if (_arg1$$3.tail.tail == null) {\n        return _arg1$$3.head;\n      } else {\n        const $_arg1$$3$$2 = _arg1$$3;\n        _arg1$$3 = $_arg1$$3$$2.tail;\n        continue last;\n      }\n    } else {\n      throw new Error(\"List was empty\");\n    }\n\n    break;\n  }\n}\nexport function tryLast(_arg1$$4) {\n  tryLast: while (true) {\n    if (_arg1$$4.tail != null) {\n      if (_arg1$$4.tail.tail == null) {\n        return some(_arg1$$4.head);\n      } else {\n        const $_arg1$$4$$3 = _arg1$$4;\n        _arg1$$4 = $_arg1$$4$$3.tail;\n        continue tryLast;\n      }\n    } else {\n      return null;\n    }\n\n    break;\n  }\n}\nexport function compareWith(comparer, xs$$3, ys) {\n  if (xs$$3 === ys) {\n    return 0;\n  } else {\n    const loop = function loop(xs$$4, ys$$1) {\n      loop: while (true) {\n        const matchValue = [xs$$4, ys$$1];\n\n        if (matchValue[0].tail != null) {\n          if (matchValue[1].tail != null) {\n            const matchValue$$1 = comparer(matchValue[0].head, matchValue[1].head) | 0;\n\n            if (matchValue$$1 === 0) {\n              xs$$4 = matchValue[0].tail;\n              ys$$1 = matchValue[1].tail;\n              continue loop;\n            } else {\n              const res = matchValue$$1 | 0;\n              return res | 0;\n            }\n          } else {\n            return 1;\n          }\n        } else if (matchValue[1].tail == null) {\n          return 0;\n        } else {\n          return -1 | 0;\n        }\n\n        break;\n      }\n    };\n\n    return loop(xs$$3, ys) | 0;\n  }\n}\nexport function foldIndexedAux($arg$$7, $arg$$8, $arg$$9, $arg$$10) {\n  foldIndexedAux: while (true) {\n    const f = $arg$$7,\n          i = $arg$$8,\n          acc = $arg$$9,\n          _arg1$$5 = $arg$$10;\n\n    if (_arg1$$5.tail != null) {\n      const xs$$6 = _arg1$$5.tail;\n      const x$$5 = _arg1$$5.head;\n      $arg$$7 = f;\n      $arg$$8 = i + 1;\n      $arg$$9 = f(i, acc, x$$5);\n      $arg$$10 = xs$$6;\n      continue foldIndexedAux;\n    } else {\n      return acc;\n    }\n\n    break;\n  }\n}\nexport function foldIndexed(f$$1, state, xs$$7) {\n  return foldIndexedAux(f$$1, 0, state, xs$$7);\n}\nexport function fold($arg$$14, $arg$$15, $arg$$16) {\n  fold: while (true) {\n    const f$$2 = $arg$$14,\n          state$$1 = $arg$$15,\n          xs$$8 = $arg$$16;\n\n    if (xs$$8.tail != null) {\n      const t = xs$$8.tail;\n      const h = xs$$8.head;\n      $arg$$14 = f$$2;\n      $arg$$15 = f$$2(state$$1, h);\n      $arg$$16 = t;\n      continue fold;\n    } else {\n      return state$$1;\n    }\n\n    break;\n  }\n}\nexport function reverse(xs$$9) {\n  return fold(function (acc$$1, x$$6) {\n    return new List(x$$6, acc$$1);\n  }, new List(), xs$$9);\n}\nexport function foldBack(f$$3, xs$$10, state$$2) {\n  return fold(function (acc$$2, x$$7) {\n    return f$$3(x$$7, acc$$2);\n  }, state$$2, reverse(xs$$10));\n}\nexport function toSeq(xs$$11) {\n  return map$$1(function (x$$8) {\n    return x$$8;\n  }, xs$$11);\n}\nexport function ofSeq(xs$$12) {\n  return reverse(fold$$1(function (acc$$3, x$$9) {\n    return new List(x$$9, acc$$3);\n  }, new List(), xs$$12));\n}\nexport function concat(lists) {\n  return reverse(fold$$1(function (state$$3, xs$$14) {\n    return fold(function f$$4(acc$$4, x$$10) {\n      return new List(x$$10, acc$$4);\n    }, state$$3, xs$$14);\n  }, new List(), lists));\n}\nexport function foldIndexed2Aux($arg$$20, $arg$$21, $arg$$22, $arg$$23, $arg$$24) {\n  foldIndexed2Aux: while (true) {\n    const f$$5 = $arg$$20,\n          i$$1 = $arg$$21,\n          acc$$5 = $arg$$22,\n          bs = $arg$$23,\n          cs = $arg$$24;\n    const matchValue$$2 = [bs, cs];\n    var $target$$25, x$$11, xs$$16, y$$1, ys$$3;\n\n    if (matchValue$$2[0].tail != null) {\n      if (matchValue$$2[1].tail != null) {\n        $target$$25 = 1;\n        x$$11 = matchValue$$2[0].head;\n        xs$$16 = matchValue$$2[0].tail;\n        y$$1 = matchValue$$2[1].head;\n        ys$$3 = matchValue$$2[1].tail;\n      } else {\n        $target$$25 = 2;\n      }\n    } else if (matchValue$$2[1].tail == null) {\n      $target$$25 = 0;\n    } else {\n      $target$$25 = 2;\n    }\n\n    switch ($target$$25) {\n      case 0:\n        {\n          return acc$$5;\n        }\n\n      case 1:\n        {\n          $arg$$20 = f$$5;\n          $arg$$21 = i$$1 + 1;\n          $arg$$22 = f$$5(i$$1, acc$$5, x$$11, y$$1);\n          $arg$$23 = xs$$16;\n          $arg$$24 = ys$$3;\n          continue foldIndexed2Aux;\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function foldIndexed2(f$$6, state$$4, xs$$17, ys$$4) {\n  return foldIndexed2Aux(f$$6, 0, state$$4, xs$$17, ys$$4);\n}\nexport function fold2(f$$7, state$$5, xs$$18, ys$$5) {\n  return fold2$$1(f$$7, state$$5, xs$$18, ys$$5);\n}\nexport function foldBack2(f$$8, xs$$19, ys$$6, state$$6) {\n  return foldBack2$$1(f$$8, xs$$19, ys$$6, state$$6);\n}\nexport function unfold(f$$9, state$$7) {\n  const unfoldInner = function unfoldInner(acc$$6, state$$8) {\n    unfoldInner: while (true) {\n      const matchValue$$3 = f$$9(state$$8);\n\n      if (matchValue$$3 != null) {\n        const x$$12 = matchValue$$3[0];\n        const state$$9 = matchValue$$3[1];\n        const $acc$$6$$40 = acc$$6;\n        acc$$6 = new List(x$$12, $acc$$6$$40);\n        state$$8 = state$$9;\n        continue unfoldInner;\n      } else {\n        return reverse(acc$$6);\n      }\n\n      break;\n    }\n  };\n\n  return unfoldInner(new List(), state$$7);\n}\nexport function foldIndexed3Aux($arg$$41, $arg$$42, $arg$$43, $arg$$44, $arg$$45, $arg$$46) {\n  foldIndexed3Aux: while (true) {\n    const f$$10 = $arg$$41,\n          i$$2 = $arg$$42,\n          acc$$7 = $arg$$43,\n          bs$$1 = $arg$$44,\n          cs$$1 = $arg$$45,\n          ds = $arg$$46;\n    const matchValue$$4 = [bs$$1, cs$$1, ds];\n    var $target$$47, x$$13, xs$$20, y$$2, ys$$7, z, zs;\n\n    if (matchValue$$4[0].tail != null) {\n      if (matchValue$$4[1].tail != null) {\n        if (matchValue$$4[2].tail != null) {\n          $target$$47 = 1;\n          x$$13 = matchValue$$4[0].head;\n          xs$$20 = matchValue$$4[0].tail;\n          y$$2 = matchValue$$4[1].head;\n          ys$$7 = matchValue$$4[1].tail;\n          z = matchValue$$4[2].head;\n          zs = matchValue$$4[2].tail;\n        } else {\n          $target$$47 = 2;\n        }\n      } else {\n        $target$$47 = 2;\n      }\n    } else if (matchValue$$4[1].tail == null) {\n      if (matchValue$$4[2].tail == null) {\n        $target$$47 = 0;\n      } else {\n        $target$$47 = 2;\n      }\n    } else {\n      $target$$47 = 2;\n    }\n\n    switch ($target$$47) {\n      case 0:\n        {\n          return acc$$7;\n        }\n\n      case 1:\n        {\n          $arg$$41 = f$$10;\n          $arg$$42 = i$$2 + 1;\n          $arg$$43 = f$$10(i$$2, acc$$7, x$$13, y$$2, z);\n          $arg$$44 = xs$$20;\n          $arg$$45 = ys$$7;\n          $arg$$46 = zs;\n          continue foldIndexed3Aux;\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function foldIndexed3(f$$11, seed, xs$$21, ys$$8, zs$$1) {\n  return foldIndexed3Aux(f$$11, 0, seed, xs$$21, ys$$8, zs$$1);\n}\nexport function fold3(f$$12, state$$10, xs$$22, ys$$9, zs$$2) {\n  return foldIndexed3(function (_arg1$$6, acc$$8, x$$14, y$$3, z$$1) {\n    return f$$12(acc$$8, x$$14, y$$3, z$$1);\n  }, state$$10, xs$$22, ys$$9, zs$$2);\n}\nexport function scan(f$$13, state$$11, xs$$23) {\n  return ofSeq(scan$$1(f$$13, state$$11, xs$$23));\n}\nexport function scanBack(f$$14, xs$$25, state$$12) {\n  return ofSeq(scanBack$$1(f$$14, xs$$25, state$$12));\n}\nexport function length(xs$$27) {\n  return fold(function (acc$$9, _arg1$$7) {\n    return acc$$9 + 1;\n  }, 0, xs$$27);\n}\nexport function append(xs$$28, ys$$10) {\n  return fold(function (acc$$10, x$$15) {\n    return new List(x$$15, acc$$10);\n  }, ys$$10, reverse(xs$$28));\n}\nexport function collect(f$$15, xs$$29) {\n  return ofSeq(collect$$1(f$$15, xs$$29));\n}\nexport function map(f$$16, xs$$31) {\n  return reverse(fold(function (acc$$11, x$$16) {\n    return new List(f$$16(x$$16), acc$$11);\n  }, new List(), xs$$31));\n}\nexport function mapIndexed(f$$17, xs$$33) {\n  return reverse(foldIndexed(function (i$$3, acc$$12, x$$17) {\n    return new List(f$$17(i$$3, x$$17), acc$$12);\n  }, new List(), xs$$33));\n}\nexport function indexed(xs$$35) {\n  return mapIndexed(function (i$$4, x$$18) {\n    return [i$$4, x$$18];\n  }, xs$$35);\n}\nexport function map2(f$$18, xs$$36, ys$$11) {\n  return reverse(fold2(function (acc$$13, x$$19, y$$4) {\n    return new List(f$$18(x$$19, y$$4), acc$$13);\n  }, new List(), xs$$36, ys$$11));\n}\nexport function mapIndexed2(f$$19, xs$$38, ys$$12) {\n  return reverse(foldIndexed2(function (i$$5, acc$$14, x$$20, y$$5) {\n    return new List(f$$19(i$$5, x$$20, y$$5), acc$$14);\n  }, new List(), xs$$38, ys$$12));\n}\nexport function map3(f$$20, xs$$40, ys$$13, zs$$3) {\n  return reverse(fold3(function (acc$$15, x$$21, y$$6, z$$2) {\n    return new List(f$$20(x$$21, y$$6, z$$2), acc$$15);\n  }, new List(), xs$$40, ys$$13, zs$$3));\n}\nexport function mapIndexed3(f$$21, xs$$42, ys$$14, zs$$4) {\n  return reverse(foldIndexed3(function (i$$6, acc$$16, x$$22, y$$7, z$$3) {\n    return new List(f$$21(i$$6, x$$22, y$$7, z$$3), acc$$16);\n  }, new List(), xs$$42, ys$$14, zs$$4));\n}\nexport function mapFold(f$$22, s, xs$$44) {\n  const foldFn = function foldFn(tupledArg, x$$23) {\n    const patternInput = f$$22(tupledArg[1], x$$23);\n    return [new List(patternInput[0], tupledArg[0]), patternInput[1]];\n  };\n\n  const patternInput$$1 = fold(foldFn, [new List(), s], xs$$44);\n  return [reverse(patternInput$$1[0]), patternInput$$1[1]];\n}\nexport function mapFoldBack(f$$23, xs$$45, s$$2) {\n  return mapFold(function (s$$3, v) {\n    return f$$23(v, s$$3);\n  }, s$$2, reverse(xs$$45));\n}\nexport function iterate(f$$24, xs$$46) {\n  fold(function (unitVar0, x$$24) {\n    f$$24(x$$24);\n  }, null, xs$$46);\n}\nexport function iterate2(f$$25, xs$$47, ys$$15) {\n  fold2(function (unitVar0$$1, x$$25, y$$8) {\n    f$$25(x$$25, y$$8);\n  }, null, xs$$47, ys$$15);\n}\nexport function iterateIndexed(f$$26, xs$$48) {\n  foldIndexed(function (i$$7, unitVar1, x$$26) {\n    f$$26(i$$7, x$$26);\n  }, null, xs$$48);\n}\nexport function iterateIndexed2(f$$27, xs$$49, ys$$16) {\n  foldIndexed2(function (i$$8, unitVar1$$1, x$$27, y$$9) {\n    f$$27(i$$8, x$$27, y$$9);\n  }, null, xs$$49, ys$$16);\n}\nexport function ofArray(xs$$50) {\n  let res$$1 = new List();\n\n  for (let i$$9 = count(xs$$50) - 1; i$$9 >= 0; i$$9--) {\n    res$$1 = new List(xs$$50[i$$9], res$$1);\n  }\n\n  return res$$1;\n}\nexport function empty() {\n  return new List();\n}\nexport function isEmpty(_arg1$$8) {\n  if (_arg1$$8.tail == null) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function tryPickIndexedAux($arg$$100, $arg$$101, $arg$$102) {\n  tryPickIndexedAux: while (true) {\n    const f$$28 = $arg$$100,\n          i$$10 = $arg$$101,\n          _arg1$$9 = $arg$$102;\n\n    if (_arg1$$9.tail != null) {\n      const xs$$51 = _arg1$$9.tail;\n      const x$$28 = _arg1$$9.head;\n      const result = f$$28(i$$10, x$$28);\n\n      if (result == null) {\n        $arg$$100 = f$$28;\n        $arg$$101 = i$$10 + 1;\n        $arg$$102 = xs$$51;\n        continue tryPickIndexedAux;\n      } else {\n        return result;\n      }\n    } else {\n      return null;\n    }\n\n    break;\n  }\n}\nexport function tryPickIndexed(f$$29, xs$$52) {\n  return tryPickIndexedAux(f$$29, 0, xs$$52);\n}\nexport function tryPick(f$$30, xs$$53) {\n  return tryPickIndexed(function (_arg1$$10, x$$29) {\n    return f$$30(x$$29);\n  }, xs$$53);\n}\nexport function pick(f$$31, xs$$54) {\n  const matchValue$$5 = tryPick(f$$31, xs$$54);\n\n  if (matchValue$$5 != null) {\n    const x$$30 = value$$1(matchValue$$5);\n    return x$$30;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function tryFindIndexed(f$$32, xs$$55) {\n  return tryPickIndexed(function (i$$11, x$$31) {\n    return f$$32(i$$11, x$$31) ? some(x$$31) : null;\n  }, xs$$55);\n}\nexport function tryFind(f$$33, xs$$56) {\n  return tryPickIndexed(function (_arg1$$11, x$$32) {\n    return f$$33(x$$32) ? some(x$$32) : null;\n  }, xs$$56);\n}\nexport function findIndexed(f$$34, xs$$57) {\n  const matchValue$$6 = tryFindIndexed(f$$34, xs$$57);\n\n  if (matchValue$$6 != null) {\n    const x$$33 = value$$1(matchValue$$6);\n    return x$$33;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function find(f$$35, xs$$58) {\n  return findIndexed(function (_arg1$$12, x$$34) {\n    return f$$35(x$$34);\n  }, xs$$58);\n}\nexport function findBack(f$$36, xs$$59) {\n  return find(f$$36, reverse(xs$$59));\n}\nexport function tryFindBack(f$$37, xs$$62) {\n  return tryFind(f$$37, reverse(xs$$62));\n}\nexport function tryFindIndex(f$$38, xs$$65) {\n  return tryPickIndexed(function (i$$12, x$$35) {\n    return f$$38(x$$35) ? i$$12 : null;\n  }, xs$$65);\n}\nexport function tryFindIndexBack(f$$39, xs$$66) {\n  return tryFindIndexBack$$1(f$$39, ofList(xs$$66, Array));\n}\nexport function findIndex(f$$40, xs$$67) {\n  const matchValue$$7 = tryFindIndex(f$$40, xs$$67);\n\n  if (matchValue$$7 != null) {\n    const x$$36 = matchValue$$7 | 0;\n    return x$$36 | 0;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function findIndexBack(f$$41, xs$$68) {\n  return findIndexBack$$1(f$$41, ofList(xs$$68, Array));\n}\nexport function item(n, xs$$69) {\n  return findIndexed(function (i$$13, _arg1$$13) {\n    return n === i$$13;\n  }, xs$$69);\n}\nexport function tryItem(n$$1, xs$$70) {\n  return tryFindIndexed(function (i$$14, _arg1$$14) {\n    return n$$1 === i$$14;\n  }, xs$$70);\n}\nexport function filter(f$$42, xs$$71) {\n  return reverse(fold(function (acc$$17, x$$37) {\n    return f$$42(x$$37) ? new List(x$$37, acc$$17) : acc$$17;\n  }, new List(), xs$$71));\n}\nexport function partition(f$$43, xs$$73) {\n  return fold(function (tupledArg$$1, x$$38) {\n    return f$$43(x$$38) ? [new List(x$$38, tupledArg$$1[0]), tupledArg$$1[1]] : [tupledArg$$1[0], new List(x$$38, tupledArg$$1[1])];\n  }, [new List(), new List()], reverse(xs$$73));\n}\nexport function choose(f$$44, xs$$74) {\n  return reverse(fold(function (acc$$18, x$$39) {\n    const matchValue$$8 = f$$44(x$$39);\n\n    if (matchValue$$8 == null) {\n      return acc$$18;\n    } else {\n      const y$$10 = value$$1(matchValue$$8);\n      return new List(y$$10, acc$$18);\n    }\n  }, new List(), xs$$74));\n}\nexport function contains(value, list, eq) {\n  const loop$$1 = function loop$$1(xs$$76) {\n    loop$$1: while (true) {\n      if (xs$$76.tail != null) {\n        const v$$1 = xs$$76.head;\n        const rest = xs$$76.tail;\n\n        if (eq.Equals(value, v$$1)) {\n          return true;\n        } else {\n          xs$$76 = rest;\n          continue loop$$1;\n        }\n      } else {\n        return false;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$1(list);\n}\nexport function except(itemsToExclude, array$$2, eq$$1) {\n  if (isEmpty(array$$2)) {\n    return array$$2;\n  } else {\n    const cached = createMutable(itemsToExclude, comparerFromEqualityComparer(eq$$1));\n    return filter(function f$$45(arg00) {\n      return addToSet(arg00, cached);\n    }, array$$2);\n  }\n}\nexport function initialize(n$$2, f$$46) {\n  let xs$$78 = new List();\n\n  for (let i$$15 = 1; i$$15 <= n$$2; i$$15++) {\n    xs$$78 = new List(f$$46(n$$2 - i$$15), xs$$78);\n  }\n\n  return xs$$78;\n}\nexport function replicate(n$$3, x$$40) {\n  return initialize(n$$3, function (_arg1$$15) {\n    return x$$40;\n  });\n}\nexport function reduce(f$$47, _arg1$$16) {\n  if (_arg1$$16.tail != null) {\n    const t$$1 = _arg1$$16.tail;\n    const h$$1 = _arg1$$16.head;\n    return fold(f$$47, h$$1, t$$1);\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function reduceBack(f$$48, _arg1$$17) {\n  if (_arg1$$17.tail != null) {\n    const t$$2 = _arg1$$17.tail;\n    const h$$2 = _arg1$$17.head;\n    return foldBack(f$$48, t$$2, h$$2);\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function forAll(f$$49, xs$$79) {\n  return fold(function (acc$$19, x$$41) {\n    return acc$$19 ? f$$49(x$$41) : false;\n  }, true, xs$$79);\n}\nexport function forAll2(f$$50, xs$$80, ys$$17) {\n  return fold2(function (acc$$20, x$$42, y$$11) {\n    return acc$$20 ? f$$50(x$$42, y$$11) : false;\n  }, true, xs$$80, ys$$17);\n}\nexport function exists($arg$$146, $arg$$147) {\n  exists: while (true) {\n    const f$$51 = $arg$$146,\n          _arg1$$18 = $arg$$147;\n\n    if (_arg1$$18.tail != null) {\n      const xs$$81 = _arg1$$18.tail;\n      const x$$43 = _arg1$$18.head;\n\n      if (f$$51(x$$43)) {\n        return true;\n      } else {\n        $arg$$146 = f$$51;\n        $arg$$147 = xs$$81;\n        continue exists;\n      }\n    } else {\n      return false;\n    }\n\n    break;\n  }\n}\nexport function exists2($arg$$148, $arg$$149, $arg$$150) {\n  exists2: while (true) {\n    const f$$52 = $arg$$148,\n          bs$$2 = $arg$$149,\n          cs$$2 = $arg$$150;\n    const matchValue$$9 = [bs$$2, cs$$2];\n    var $target$$151, x$$44, xs$$82, y$$12, ys$$18;\n\n    if (matchValue$$9[0].tail != null) {\n      if (matchValue$$9[1].tail != null) {\n        $target$$151 = 1;\n        x$$44 = matchValue$$9[0].head;\n        xs$$82 = matchValue$$9[0].tail;\n        y$$12 = matchValue$$9[1].head;\n        ys$$18 = matchValue$$9[1].tail;\n      } else {\n        $target$$151 = 2;\n      }\n    } else if (matchValue$$9[1].tail == null) {\n      $target$$151 = 0;\n    } else {\n      $target$$151 = 2;\n    }\n\n    switch ($target$$151) {\n      case 0:\n        {\n          return false;\n        }\n\n      case 1:\n        {\n          if (f$$52(x$$44, y$$12)) {\n            return true;\n          } else {\n            $arg$$148 = f$$52;\n            $arg$$149 = xs$$82;\n            $arg$$150 = ys$$18;\n            continue exists2;\n          }\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function unzip(xs$$83) {\n  return foldBack(function (tupledArg$$2, tupledArg$$3) {\n    return [new List(tupledArg$$2[0], tupledArg$$3[0]), new List(tupledArg$$2[1], tupledArg$$3[1])];\n  }, xs$$83, [new List(), new List()]);\n}\nexport function unzip3(xs$$84) {\n  return foldBack(function (tupledArg$$4, tupledArg$$5) {\n    return [new List(tupledArg$$4[0], tupledArg$$5[0]), new List(tupledArg$$4[1], tupledArg$$5[1]), new List(tupledArg$$4[2], tupledArg$$5[2])];\n  }, xs$$84, [new List(), new List(), new List()]);\n}\nexport function zip(xs$$85, ys$$19) {\n  return map2(function (x$$47, y$$15) {\n    return [x$$47, y$$15];\n  }, xs$$85, ys$$19);\n}\nexport function zip3(xs$$86, ys$$20, zs$$5) {\n  return map3(function (x$$48, y$$16, z$$5) {\n    return [x$$48, y$$16, z$$5];\n  }, xs$$86, ys$$20, zs$$5);\n}\nexport function sort(xs$$87, comparer$$1) {\n  var xs$$88;\n  return ofArray((xs$$88 = ofList(xs$$87, Array), (xs$$88.sort(function (x$$49, y$$17) {\n    return comparer$$1.Compare(x$$49, y$$17);\n  }), xs$$88)));\n}\nexport function sortBy(projection, xs$$90, comparer$$3) {\n  var xs$$91;\n  return ofArray((xs$$91 = ofList(xs$$90, Array), (xs$$91.sort(function (x$$50, y$$18) {\n    return comparer$$3.Compare(projection(x$$50), projection(y$$18));\n  }), xs$$91)));\n}\nexport function sortDescending(xs$$93, comparer$$5) {\n  var xs$$94;\n  return ofArray((xs$$94 = ofList(xs$$93, Array), (xs$$94.sort(function (x$$51, y$$19) {\n    return comparer$$5.Compare(x$$51, y$$19) * -1;\n  }), xs$$94)));\n}\nexport function sortByDescending(projection$$1, xs$$96, comparer$$7) {\n  var xs$$97;\n  return ofArray((xs$$97 = ofList(xs$$96, Array), (xs$$97.sort(function (x$$52, y$$20) {\n    return comparer$$7.Compare(projection$$1(x$$52), projection$$1(y$$20)) * -1;\n  }), xs$$97)));\n}\nexport function sortWith(comparer$$9, xs$$99) {\n  var xs$$100;\n  return ofArray((xs$$100 = ofList(xs$$99, Array), (xs$$100.sort(comparer$$9), xs$$100)));\n}\nexport function sum(xs$$102, adder) {\n  return fold(function (acc$$21, x$$53) {\n    return adder.Add(acc$$21, x$$53);\n  }, adder.GetZero(), xs$$102);\n}\nexport function sumBy(f$$53, xs$$103, adder$$1) {\n  return fold(function (acc$$22, x$$54) {\n    return adder$$1.Add(acc$$22, f$$53(x$$54));\n  }, adder$$1.GetZero(), xs$$103);\n}\nexport function maxBy(projection$$2, xs$$104, comparer$$11) {\n  return reduce(function (x$$55, y$$21) {\n    return comparer$$11.Compare(projection$$2(y$$21), projection$$2(x$$55)) > 0 ? y$$21 : x$$55;\n  }, xs$$104);\n}\nexport function max(li, comparer$$12) {\n  return reduce(function (x$$56, y$$22) {\n    return comparer$$12.Compare(y$$22, x$$56) > 0 ? y$$22 : x$$56;\n  }, li);\n}\nexport function minBy(projection$$3, xs$$105, comparer$$13) {\n  return reduce(function (x$$57, y$$23) {\n    return comparer$$13.Compare(projection$$3(y$$23), projection$$3(x$$57)) > 0 ? x$$57 : y$$23;\n  }, xs$$105);\n}\nexport function min(xs$$106, comparer$$14) {\n  return reduce(function (x$$58, y$$24) {\n    return comparer$$14.Compare(y$$24, x$$58) > 0 ? x$$58 : y$$24;\n  }, xs$$106);\n}\nexport function average(xs$$107, averager) {\n  const total = fold(function (acc$$23, x$$59) {\n    return averager.Add(acc$$23, x$$59);\n  }, averager.GetZero(), xs$$107);\n  return averager.DivideByInt(total, length(xs$$107));\n}\nexport function averageBy(f$$54, xs$$108, averager$$1) {\n  const total$$1 = fold(function (acc$$24, x$$60) {\n    return averager$$1.Add(acc$$24, f$$54(x$$60));\n  }, averager$$1.GetZero(), xs$$108);\n  return averager$$1.DivideByInt(total$$1, length(xs$$108));\n}\nexport function permute(f$$55, xs$$109) {\n  return ofArray(permute$$1(f$$55, ofList(xs$$109, Array)));\n}\nexport function skip(i$$16, xs$$111) {\n  const skipInner = function skipInner(i$$17, xs$$112) {\n    skipInner: while (true) {\n      const matchValue$$10 = [i$$17, xs$$112];\n\n      if (matchValue$$10[0] === 0) {\n        return xs$$112;\n      } else if (matchValue$$10[1].tail != null) {\n        const xs$$113 = matchValue$$10[1].tail;\n        const $i$$17$$174 = i$$17;\n        i$$17 = $i$$17$$174 - 1;\n        xs$$112 = xs$$113;\n        continue skipInner;\n      } else {\n        throw new Error(\"The input sequence has an insufficient number of elements.\");\n      }\n\n      break;\n    }\n  };\n\n  const matchValue$$11 = [i$$16, xs$$111];\n\n  if (matchValue$$11[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$175, i$$20, xs$$115;\n\n    if (matchValue$$11[0] === 0) {\n      $target$$175 = 0;\n    } else if (matchValue$$11[0] === 1) {\n      if (matchValue$$11[1].tail != null) {\n        $target$$175 = 1;\n      } else {\n        $target$$175 = 2;\n        i$$20 = matchValue$$11[0];\n        xs$$115 = matchValue$$11[1];\n      }\n    } else {\n      $target$$175 = 2;\n      i$$20 = matchValue$$11[0];\n      xs$$115 = matchValue$$11[1];\n    }\n\n    switch ($target$$175) {\n      case 0:\n        {\n          return xs$$111;\n        }\n\n      case 1:\n        {\n          const xs$$114 = matchValue$$11[1].tail;\n          return xs$$114;\n        }\n\n      case 2:\n        {\n          return skipInner(i$$20, xs$$115);\n        }\n    }\n  }\n}\nexport function skipWhile($arg$$176, $arg$$177) {\n  var t$$3, h$$3;\n\n  skipWhile: while (true) {\n    const predicate = $arg$$176,\n          xs$$116 = $arg$$177;\n    var $target$$178, h$$4, t$$4;\n\n    if (xs$$116.tail != null) {\n      if (t$$3 = xs$$116.tail, (h$$3 = xs$$116.head, predicate(h$$3))) {\n        $target$$178 = 0;\n        h$$4 = xs$$116.head;\n        t$$4 = xs$$116.tail;\n      } else {\n        $target$$178 = 1;\n      }\n    } else {\n      $target$$178 = 1;\n    }\n\n    switch ($target$$178) {\n      case 0:\n        {\n          $arg$$176 = predicate;\n          $arg$$177 = t$$4;\n          continue skipWhile;\n        }\n\n      case 1:\n        {\n          return xs$$116;\n        }\n    }\n\n    break;\n  }\n}\nexport function takeSplitAux(error, i$$21, acc$$25, xs$$117) {\n  takeSplitAux: while (true) {\n    const matchValue$$12 = [i$$21, xs$$117];\n\n    if (matchValue$$12[0] === 0) {\n      return [reverse(acc$$25), xs$$117];\n    } else if (matchValue$$12[1].tail != null) {\n      const xs$$118 = matchValue$$12[1].tail;\n      const x$$61 = matchValue$$12[1].head;\n      const $acc$$25$$181 = acc$$25;\n      const $error$$179 = error;\n      const $i$$21$$180 = i$$21;\n      error = $error$$179;\n      i$$21 = $i$$21$$180 - 1;\n      acc$$25 = new List(x$$61, $acc$$25$$181);\n      xs$$117 = xs$$118;\n      continue takeSplitAux;\n    } else {\n      if (error) {\n        throw new Error(\"The input sequence has an insufficient number of elements.\");\n      } else {\n        return [reverse(acc$$25), xs$$117];\n      }\n    }\n\n    break;\n  }\n}\nexport function take(i$$22, xs$$119) {\n  const matchValue$$13 = [i$$22, xs$$119];\n\n  if (matchValue$$13[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$182, i$$25, xs$$120;\n\n    if (matchValue$$13[0] === 0) {\n      $target$$182 = 0;\n    } else if (matchValue$$13[0] === 1) {\n      if (matchValue$$13[1].tail != null) {\n        $target$$182 = 1;\n      } else {\n        $target$$182 = 2;\n        i$$25 = matchValue$$13[0];\n        xs$$120 = matchValue$$13[1];\n      }\n    } else {\n      $target$$182 = 2;\n      i$$25 = matchValue$$13[0];\n      xs$$120 = matchValue$$13[1];\n    }\n\n    switch ($target$$182) {\n      case 0:\n        {\n          return new List();\n        }\n\n      case 1:\n        {\n          const x$$62 = matchValue$$13[1].head;\n          return new List(x$$62, new List());\n        }\n\n      case 2:\n        {\n          return takeSplitAux(true, i$$25, new List(), xs$$120)[0];\n        }\n    }\n  }\n}\nexport function takeWhile(predicate$$1, xs$$121) {\n  if (xs$$121.tail != null) {\n    if (xs$$121.tail.tail == null) {\n      if (predicate$$1(xs$$121.head)) {\n        return xs$$121;\n      } else {\n        return xs$$121.tail;\n      }\n    } else {\n      if (!predicate$$1(xs$$121.head)) {\n        return new List();\n      } else {\n        return new List(xs$$121.head, takeWhile(predicate$$1, xs$$121.tail));\n      }\n    }\n  } else {\n    return xs$$121;\n  }\n}\nexport function truncate(i$$26, xs$$123) {\n  const matchValue$$14 = [i$$26, xs$$123];\n\n  if (matchValue$$14[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$185, i$$29, xs$$124;\n\n    if (matchValue$$14[0] === 0) {\n      $target$$185 = 0;\n    } else if (matchValue$$14[0] === 1) {\n      if (matchValue$$14[1].tail != null) {\n        $target$$185 = 1;\n      } else {\n        $target$$185 = 2;\n        i$$29 = matchValue$$14[0];\n        xs$$124 = matchValue$$14[1];\n      }\n    } else {\n      $target$$185 = 2;\n      i$$29 = matchValue$$14[0];\n      xs$$124 = matchValue$$14[1];\n    }\n\n    switch ($target$$185) {\n      case 0:\n        {\n          return new List();\n        }\n\n      case 1:\n        {\n          const x$$65 = matchValue$$14[1].head;\n          return new List(x$$65, new List());\n        }\n\n      case 2:\n        {\n          return takeSplitAux(false, i$$29, new List(), xs$$124)[0];\n        }\n    }\n  }\n}\nexport function splitAt(i$$30, xs$$125) {\n  const matchValue$$15 = [i$$30, xs$$125];\n\n  if (matchValue$$15[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$186, i$$33, xs$$127;\n\n    if (matchValue$$15[0] === 0) {\n      $target$$186 = 0;\n    } else if (matchValue$$15[0] === 1) {\n      if (matchValue$$15[1].tail != null) {\n        $target$$186 = 1;\n      } else {\n        $target$$186 = 2;\n        i$$33 = matchValue$$15[0];\n        xs$$127 = matchValue$$15[1];\n      }\n    } else {\n      $target$$186 = 2;\n      i$$33 = matchValue$$15[0];\n      xs$$127 = matchValue$$15[1];\n    }\n\n    switch ($target$$186) {\n      case 0:\n        {\n          return [new List(), xs$$125];\n        }\n\n      case 1:\n        {\n          const xs$$126 = matchValue$$15[1].tail;\n          const x$$66 = matchValue$$15[1].head;\n          return [new List(x$$66, new List()), xs$$126];\n        }\n\n      case 2:\n        {\n          return takeSplitAux(true, i$$33, new List(), xs$$127);\n        }\n    }\n  }\n}\nexport function outOfRange() {\n  throw new Error(\"Index out of range\");\n}\nexport function slice(lower, upper, xs$$128) {\n  const lower$$1 = defaultArg(lower, 0) | 0;\n  const hasUpper = upper != null;\n\n  if (lower$$1 < 0) {\n    return outOfRange();\n  } else if (hasUpper ? upper < lower$$1 : false) {\n    return new List();\n  } else {\n    let lastIndex = -1 | 0;\n    const res$$2 = foldIndexed(function f$$56(i$$34, acc$$26, x$$67) {\n      lastIndex = i$$34;\n\n      if (lower$$1 <= i$$34 ? !hasUpper ? true : i$$34 <= upper : false) {\n        return new List(x$$67, acc$$26);\n      } else {\n        return acc$$26;\n      }\n    }, new List(), xs$$128);\n\n    if (lower$$1 > lastIndex + 1 ? true : hasUpper ? upper > lastIndex : false) {\n      outOfRange();\n    }\n\n    return reverse(res$$2);\n  }\n}\nexport function distinctBy(projection$$4, xs$$130, eq$$2) {\n  const hashSet = createMutable([], comparerFromEqualityComparer(eq$$2));\n  return filter(function f$$57($arg$$1) {\n    return addToSet(projection$$4($arg$$1), hashSet);\n  }, xs$$130);\n}\nexport function distinct(xs$$132, eq$$3) {\n  return distinctBy(function (x$$68) {\n    return x$$68;\n  }, xs$$132, eq$$3);\n}\nexport function exactlyOne(xs$$133) {\n  if (xs$$133.tail != null) {\n    if (xs$$133.tail.tail != null) {\n      throw new Error(\"Input list too long\\\\nParameter name: list\");\n    } else {\n      return xs$$133.head;\n    }\n  } else {\n    throw new Error(\"The input sequence was empty\\\\nParameter name: list\");\n  }\n}\nexport function groupBy(projection$$5, xs$$135, eq$$4) {\n  const dict = createMutable$$1([], comparerFromEqualityComparer(eq$$4));\n  const keys = [];\n  iterate$$1(function (v$$2) {\n    const key = projection$$5(v$$2);\n    const matchValue$$16 = tryGetValue(dict, key, null);\n\n    if (matchValue$$16[0]) {\n      dict.set(key, new List(v$$2, matchValue$$16[1]));\n    } else {\n      addToDict(dict, key, new List(v$$2, new List()));\n      keys.push(key);\n    }\n  }, xs$$135);\n  return ofSeq(map$$1(function mapping(key$$1) {\n    return [key$$1, reverse(getItemFromDict(dict, key$$1))];\n  }, keys));\n}\nexport function countBy(projection$$6, xs$$137, eq$$5) {\n  const dict$$1 = createMutable$$1([], comparerFromEqualityComparer(eq$$5));\n  iterate(function (v$$3) {\n    const key$$2 = projection$$6(v$$3);\n    const matchValue$$17 = tryGetValue(dict$$1, key$$2, null);\n\n    if (matchValue$$17[0]) {\n      matchValue$$17[1].contents = matchValue$$17[1].contents + 1;\n    } else {\n      dict$$1.set(key$$2, new FSharpRef(1));\n    }\n  }, xs$$137);\n  let result$$1 = new List();\n  iterate$$1(function (group) {\n    result$$1 = new List([group[0], group[1].contents], result$$1);\n  }, dict$$1);\n  return result$$1;\n}\nexport function where(predicate$$2, xs$$138) {\n  return filter(predicate$$2, xs$$138);\n}\nexport function pairwise(xs$$139) {\n  const inner = function inner(xs$$140, acc$$27, x1$$1) {\n    inner: while (true) {\n      if (xs$$140.tail != null) {\n        const xs$$141 = xs$$140.tail;\n        const x2$$1 = xs$$140.head;\n        acc$$27.push([x1$$1, x2$$1]);\n        const $acc$$27$$198 = acc$$27;\n        xs$$140 = xs$$141;\n        acc$$27 = $acc$$27$$198;\n        x1$$1 = x2$$1;\n        continue inner;\n      } else {\n        return ofArray(acc$$27);\n      }\n\n      break;\n    }\n  };\n\n  var $target$$199, x1$$2, x2$$2, xs$$142;\n\n  if (xs$$139.tail != null) {\n    if (xs$$139.tail.tail != null) {\n      $target$$199 = 1;\n      x1$$2 = xs$$139.head;\n      x2$$2 = xs$$139.tail.head;\n      xs$$142 = xs$$139.tail.tail;\n    } else {\n      $target$$199 = 0;\n    }\n  } else {\n    $target$$199 = 0;\n  }\n\n  switch ($target$$199) {\n    case 0:\n      {\n        return new List();\n      }\n\n    case 1:\n      {\n        const acc$$28 = [];\n        acc$$28.push([x1$$2, x2$$2]);\n        return function (arg00$$2) {\n          const clo1 = partialApply(2, inner, [arg00$$2]);\n          return function (arg10) {\n            const clo2 = clo1(arg10);\n            return function (arg20) {\n              return clo2(arg20);\n            };\n          };\n        }(xs$$142)(acc$$28)(x2$$2);\n      }\n  }\n}\nexport function windowed(windowSize, source$$1) {\n  if (windowSize <= 0) {\n    throw new Error(\"windowSize must be positive\");\n  }\n\n  let res$$3 = new List();\n\n  for (let i$$35 = length(source$$1); i$$35 >= windowSize; i$$35--) {\n    res$$3 = new List(slice(i$$35 - windowSize, i$$35 - 1, source$$1), res$$3);\n  }\n\n  return res$$3;\n}","namespace Elmish.React\n\nopen Fable.React\nopen Elmish\n\ntype LazyProps<'model> = {\n    model:'model\n    render:unit->ReactElement\n    equal:'model->'model->bool\n}\n\nmodule Components =\n    type LazyView<'model>(props) =\n        inherit Component<LazyProps<'model>,obj>(props)\n\n        override this.shouldComponentUpdate(nextProps, _nextState) =\n            not <| this.props.equal this.props.model nextProps.model\n\n        override this.render () =\n            this.props.render ()\n\n[<AutoOpen>]\nmodule Common =\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model\n    /// state: new state to render\n    let lazyViewWith (equal:'model->'model->bool)\n                     (view:'model->ReactElement)\n                     (state:'model) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model using the dispatch\n    /// state: new state to render\n    /// dispatch: dispatch function\n    let lazyView2With (equal:'model->'model->bool)\n                      (view:'model->'msg Dispatch->ReactElement)\n                      (state:'model)\n                      (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state dispatch\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new model (a tuple of two states)\n    /// view: function to render the model using the dispatch\n    /// state1: new state to render\n    /// state2: new state to render\n    /// dispatch: dispatch function\n    let lazyView3With (equal:_->_->bool) (view:_->_->_->ReactElement) state1 state2 (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state1 state2 dispatch\n              equal = equal\n              model = (state1,state2) }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of model to render the view\n    let lazyView (view:'model->ReactElement) =\n        lazyViewWith (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of two arguments to render the model using the dispatch\n    let lazyView2 (view:'model->'msg Dispatch->ReactElement) =\n        lazyView2With (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of three arguments to render the model using the dispatch\n    let lazyView3 (view:_->_->_->ReactElement) =\n        lazyView3With (=) view\n\n\n","(** UrlParser\n------\nThis port of the Elm library helps you turn URLs into nicely structured data.\nIt is designed to be used with `Navigation` module to help folks create\nsingle-page applications (SPAs) where you manage browser navigation yourself.\n*)\n\nmodule Elmish.UrlParser\n\n\n(**\n#### Types\n*)\n\ntype State<'v> =\n  { visited : string list\n    unvisited : string list\n    args : Map<string,string>\n    value : 'v }\n\n[<RequireQualifiedAccess>]\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\nmodule internal State =\n  let mkState visited unvisited args value =\n        { visited = visited\n          unvisited = unvisited\n          args = args\n          value = value }\n\n  let map f { visited = visited; unvisited = unvisited; args = args; value = value } =\n        { visited = visited\n          unvisited = unvisited\n          args = args\n          value = f value }\n\n\n/// Turn URLs like `/blog/42/cat-herding-techniques` into nice data.\ntype Parser<'a,'b> = State<'a> -> State<'b> list\n\n\n(**\n#### Parse segments\nCreate a custom path segment parser. You can use it to define something like “only CSS files” like this:\n```\n    let css =\n      custom \"CSS_FILE\" <| fun segment ->\n        if String.EndsWith \".css\" then\n          Ok segment\n        else\n          Error \"Does not end with .css\"\n```\n*)\nlet custom tipe (stringToSomething: string->Result<_,_>) : Parser<_,_> =\n    let inner { visited = visited; unvisited = unvisited; args = args; value = value } =\n        match unvisited with\n        | [] -> []\n        | next :: rest ->\n            match stringToSomething next with\n            | Ok nextValue ->\n                [ State.mkState (next :: visited) rest args (value nextValue) ]\n\n            | Error msg ->\n                []\n    inner\n\n\n(** Parse a segment of the path as a `string`.\n```\n    parse str location\n```\n<pre>\n    /alice/  ==>  Some \"alice\"\n    /bob     ==>  Some \"bob\"\n    /42/     ==>  Some \"42\"\n</pre>\n*)\nlet str state =\n    custom \"string\" Ok state\n\n\n(** Parse a segment of the path as an `int`.\n```\n    parse i32 location\n```\n<pre>\n    /alice/  ==>  None\n    /bob     ==>  None\n    /42/     ==>  Some 42\n</pre>\n*)\nlet i32 state =\n    custom \"i32\" (System.Int32.TryParse >> function true, value -> Ok value | _ -> Error \"Can't parse int\" ) state\n\n\n(** Parse a segment of the path if it matches a given string.\n```\n    s \"blog\"  // can parse /blog/\n              // but not /glob/ or /42/ or anything else\n```\n*)\nlet s str : Parser<_,_> =\n    let inner { visited = visited; unvisited = unvisited; args = args; value = value } =\n        match unvisited with\n        | [] -> []\n        | next :: rest ->\n            if next = str then\n                [ State.mkState (next :: visited) rest args value ]\n            else\n                []\n    inner\n\n\n\n(**\n#### Combining parsers\nParse a path with multiple segments.\n\n```\n    parse (s \"blog\" </> i32) location\n```\n<pre>\n    /blog/35/  ==>  Some 35\n    /blog/42   ==>  Some 42\n    /blog/     ==>  None\n    /42/       ==>  None\n</pre>\n```\n    parse (s \"search\" </> str) location\n```\n<pre>\n    /search/cats/  ==>  Some \"cats\"\n    /search/frog   ==>  Some \"frog\"\n    /search/       ==>  None\n    /cats/         ==>  None\n</pre>\n*)\nlet inline (</>) (parseBefore: Parser<_,_>) (parseAfter: Parser<_,_>) =\n  fun state ->\n    List.collect parseAfter (parseBefore state)\n\n\n(** Transform a path parser.\n```\n    type Comment = { author : string; id : int }\n    rawComment =\n      s \"user\" </> str </> s \"comments\" </> i32\n    comment =\n      map (fun a id -> { author = a; id = id }) rawComment\n    parse comment location\n```\n<pre>\n    /user/bob/comments/42  ==>  Some { author = \"bob\"; id = 42 }\n    /user/tom/comments/35  ==>  Some { author = \"tom\"; id = 35 }\n    /user/sam/             ==>  None\n</pre>\n*)\nlet map (subValue: 'a) (parse: Parser<'a,'b>) : Parser<'b->'c,'c> =\n    let inner { visited = visited; unvisited = unvisited; args = args; value = value } =\n        List.map (State.map value)\n        <| parse { visited = visited\n                   unvisited = unvisited\n                   args = args\n                   value = subValue }\n    inner\n\n\n\n(** Try a bunch of different path parsers.\n```\n    type Route\n      = Search of string\n      | Blog of int\n      | User of string\n      | Comment of string*int\n    route =\n      oneOf\n        [ map Search  (s \"search\" </> str)\n          map Blog    (s \"blog\" </> i32)\n          map User    (s \"user\" </> str)\n          map Comment (s \"user\" </> str </> \"comments\" </> i32) ]\n    parse route location\n```\n<pre>\n    /search/cats           ==>  Some (Search \"cats\")\n    /search/               ==>  None\n    /blog/42               ==>  Some (Blog 42)\n    /blog/cats             ==>  None\n    /user/sam/             ==>  Some (User \"sam\")\n    /user/bob/comments/42  ==>  Some (Comment \"bob\" 42)\n    /user/tom/comments/35  ==>  Some (Comment \"tom\" 35)\n    /user/                 ==>  None\n</pre>\n*)\nlet oneOf parsers state =\n    List.collect (fun parser -> parser state) parsers\n\n\n(** A parser that does not consume any path segments.\n```\n    type BlogRoute = Overview | Post of int\n    blogRoute =\n      oneOf\n        [ map Overview top\n          map Post  (s \"post\" </> i32) ]\n    parse (s \"blog\" </> blogRoute) location\n```\n<pre>\n    /blog/         ==>  Some Overview\n    /blog/post/42  ==>  Some (Post 42)\n</pre>\n*)\nlet top state=\n    [state]\n\n\n\n(**\n#### Query parameters\nTurn query parameters like `?name=tom&age=42` into nice data.\n\n*)\n\ntype QueryParser<'a,'b> = State<'a> -> State<'b> list\n\n\n(** Parse some query parameters.\n```\n    type Route = BlogList (Option string) | BlogPost Int\n    route =\n      oneOf\n        [ map BlogList (s \"blog\" <?> stringParam \"search\")\n          map BlogPost (s \"blog\" </> i32) ]\n    parse route location\n```\n<pre>\n    /blog/              ==>  Some (BlogList None)\n    /blog/?search=cats  ==>  Some (BlogList (Some \"cats\"))\n    /blog/42            ==>  Some (BlogPost 42)\n</pre>\n*)\nlet inline (<?>) (parser: Parser<_,_>) (queryParser:QueryParser<_,_>) : Parser<_,_> =\n    fun state ->\n        List.collect queryParser (parser state)\n\n(** Create a custom query parser. You could create parsers like these:\n```\n    val jsonParam : string -> Decoder a -> QueryParser (Option a -> b) b\n    val enumParam : string -> Map<string,a> -> QueryParser (Option a -> b) b\n```\n*)\nlet customParam (key: string) (func: string option -> _) : QueryParser<_,_> =\n    let inner { visited = visited; unvisited = unvisited; args = args; value = value } =\n        [ State.mkState visited unvisited args (value (func (Map.tryFind key args))) ]\n    inner\n\n\n(** Parse a query parameter as a `string`.\n```\n    parse (s \"blog\" <?> stringParam \"search\") location\n```\n<pre>\n    /blog/              ==>  Some (Overview None)\n    /blog/?search=cats  ==>  Some (Overview (Some \"cats\"))\n</pre>\n*)\nlet stringParam name =\n    customParam name id\n\nlet internal intParamHelp =\n    Option.bind\n        (fun (value: string) ->\n            match System.Int32.TryParse value with\n            | (true,x) -> Some x\n            | _ -> None)\n\n(** Parse a query parameter as an `int`. Option you want to show paginated\nsearch results. You could have a `start` query parameter to say which result\nshould appear first.\n```\n    parse (s \"results\" <?> intParam \"start\") location\n```\n<pre>\n    /results           ==>  Some None\n    /results?start=10  ==>  Some (Some 10)\n</pre>\n*)\nlet intParam name =\n    customParam name intParamHelp\n\n\n// PARSER HELPERS\n\nlet rec internal parseHelp states =\n    match states with\n    | [] ->\n        None\n    | state :: rest ->\n        match state.unvisited with\n        | [] ->\n            Some state.value\n        | [\"\"] ->\n            Some state.value\n        | _ ->\n            parseHelp rest\n\nlet internal splitUrl (url: string) =\n    match List.ofArray <| url.Split([|'/'|]) with\n    | \"\" :: segments ->\n        segments\n    | segments ->\n        segments\n\n/// parse a given part of the location\nlet parse (parser: Parser<'a->'a,'a>) url args =\n    { visited = []\n      unvisited = splitUrl url\n      args = args\n      value = id }\n    |> parser\n    |> parseHelp\n\nopen Fable.Core\n\nlet internal toKeyValuePair (segment: string) =\n    match segment.Split('=') with\n    | [| key; value |] ->\n        Option.tuple (Option.ofFunc JS.decodeURI key) (Option.ofFunc JS.decodeURI value)\n    | _ -> None\n\n\nlet internal parseParams (querystring: string) =\n    querystring.Substring(1).Split('&')\n    |> Seq.map toKeyValuePair\n    |> Seq.choose id\n    |> Map.ofSeq\n\nopen Browser.Types\n\n(**\n#### Parsers\nParse based on `location.pathname` and `location.search`. This parser\nignores the hash entirely.\n*)\nlet parsePath (parser: Parser<_,_>) (location: Location) =\n    parse parser location.pathname (parseParams location.search)\n\n(** Parse based on `location.hash`. This parser ignores the normal\npath entirely.\n*)\nlet parseHash (parser: Parser<_,_>) (location: Location) =\n    let hash, search =\n        let hash = location.hash.Substring 1\n        if hash.Contains(\"?\") then\n            let h = hash.Substring(0, hash.IndexOf(\"?\"))\n            h, hash.Substring(h.Length)\n        else\n            hash, \"?\"\n\n    parse parser hash (parseParams search)\n","namespace Thoth.Json\n\n[<RequireQualifiedAccess>]\nmodule Encode =\n\n    open System.Collections.Generic\n    open System.Globalization\n    open Fable.Core\n    open Fable.Core.JsInterop\n\n    [<Emit(\"Array.from($0)\")>]\n    let private arrayFrom(x: JsonValue seq): JsonValue = jsNative\n\n    ///**Description**\n    /// Encode a string\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `string`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline string (value : string) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a GUID\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `System.Guid`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let guid (value : System.Guid) : JsonValue =\n        box (value.ToString())\n\n    ///**Description**\n    /// Encode an int\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `int`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline int (value : int) : JsonValue =\n        box value\n\n    let inline uint32 (value : uint32) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a Float. `Infinity` and `NaN` are encoded as `null`.\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `float`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline float (value : float) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a Decimal. (Currently decimal gets converted to float.)\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `decimal`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let decimal (value : decimal) : JsonValue =\n        value.ToString() |> string\n\n    ///**Description**\n    /// Encode null\n    ///\n    ///**Parameters**\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let nil : JsonValue =\n        box null\n\n    ///**Description**\n    /// Encode a bool\n    ///**Parameters**\n    ///  * `value` - parameter of type `bool`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline bool (value : bool) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode an object\n    ///\n    ///**Parameters**\n    ///  * `values` - parameter of type `(string * Value) list`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let object (values : (string * JsonValue) seq) : JsonValue =\n        let o = obj()\n        for (key, value) in values do\n            o?(key) <- value\n        box o\n\n    ///**Description**\n    /// Encode an array\n    ///\n    ///**Parameters**\n    ///  * `values` - parameter of type `Value array`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline array (values : JsonValue array) : JsonValue =\n        box values\n\n    ///**Description**\n    /// Encode a list\n    ///**Parameters**\n    ///  * `values` - parameter of type `Value list`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let list (values : JsonValue list) : JsonValue =\n        // Don't use List.toArray as it may create a typed array\n        arrayFrom values\n\n    let seq (values : JsonValue seq) : JsonValue =\n        arrayFrom values\n\n    ///**Description**\n    /// Encode a dictionary\n    ///**Parameters**\n    ///  * `values` - parameter of type `Map<string, Value>`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let dict (values : Map<string, JsonValue>) : JsonValue =\n        values\n        |> Map.toList\n        |> object\n\n    let bigint (value : bigint) : JsonValue =\n        box (value.ToString())\n\n    let datetimeOffset (value : System.DateTimeOffset) : JsonValue =\n        value.ToString(\"O\", CultureInfo.InvariantCulture) |> string\n\n    /// **Description**\n    /// Encode a timespan\n    /// **Parameters**\n    ///   * `value` - parameter of type `System.TimeSpan`\n    ///\n    /// **Output Type**\n    ///   * `Value`\n    ///\n    /// **Exceptions**\n    ///\n    let timespan (value : System.TimeSpan) : JsonValue =\n        value.ToString() |> string\n\n    let int64 (value : int64) : JsonValue =\n        box (value.ToString(CultureInfo.InvariantCulture))\n\n    let uint64 (value : uint64) : JsonValue =\n        box (value.ToString())\n\n    let tuple2\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (v1, v2) : JsonValue =\n        box [| enc1 v1\n               enc2 v2 |]\n\n    let tuple3\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (v1, v2, v3) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3 |]\n\n    let tuple4\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (v1, v2, v3, v4) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4 |]\n\n    let tuple5\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (v1, v2, v3, v4, v5) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5 |]\n\n    let tuple6\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (v1, v2, v3, v4, v5, v6) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6 |]\n\n    let tuple7\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (enc7 : Encoder<'T7>)\n            (v1, v2, v3, v4, v5, v6, v7) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6\n               enc7 v7 |]\n\n    let tuple8\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (enc7 : Encoder<'T7>)\n            (enc8 : Encoder<'T8>)\n            (v1, v2, v3, v4, v5, v6, v7, v8) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6\n               enc7 v7\n               enc8 v8 |]\n\n    /// **Description**\n    ///\n    /// **Parameters**\n    ///   * `value` - parameter of type `System.DateTime`\n    ///\n    /// **Output Type**\n    ///   * `Value`\n    ///\n    /// **Exceptions**\n    ///\n    let datetime (value : System.DateTime) : JsonValue =\n        value.ToString(\"O\", CultureInfo.InvariantCulture) |> string\n\n    ///**Description**\n    /// Convert a `Value` into a prettified string.\n    ///**Parameters**\n    ///  * `space` - parameter of type `int` - Amount of indentation\n    ///  * `value` - parameter of type `obj` - Value to convert\n    ///\n    ///**Output Type**\n    ///  * `string`\n    ///\n    ///**Exceptions**\n    ///\n    let toString (space: int) (value: JsonValue) : string =\n        JS.JSON.stringify(value, !!null, space)\n\n    ///**Description**\n    /// Encode an option\n    ///**Parameters**\n    ///  * `encoder` - parameter of type `'a -> Value`\n    ///\n    ///**Output Type**\n    ///  * `'a option -> Value`\n    ///\n    ///**Exceptions**\n    ///\n    let option (encoder : 'a -> JsonValue) =\n        Option.map encoder >> Option.defaultWith (fun _ -> nil)\n\n    //////////////////\n    // Reflection ///\n    ////////////////\n\n    open FSharp.Reflection\n    open Fable.Core.DynamicExtensions\n\n    // As generics are erased by Fable, let's just do an unsafe cast for performance\n    let inline boxEncoder (d: Encoder<'T>): BoxedEncoder =\n        !!d\n\n    let inline unboxEncoder (d: BoxedEncoder): Encoder<'T> =\n        !!d\n\n    let rec private autoEncodeRecordsAndUnions extra (isCamelCase : bool) (t: System.Type) : BoxedEncoder =\n        // Add the encoder to extra in case one of the fields is recursive\n        let encoderRef = ref Unchecked.defaultof<_>\n        let extra = extra |> Map.add t.FullName encoderRef\n        let encoder =\n            if FSharpType.IsRecord(t, allowAccessToPrivateRepresentation=true) then\n                let setters =\n                    FSharpType.GetRecordFields(t, allowAccessToPrivateRepresentation=true)\n                    |> Array.map (fun fi ->\n                        let targetKey =\n                            if isCamelCase then fi.Name.[..0].ToLowerInvariant() + fi.Name.[1..]\n                            else fi.Name\n                        let encode = autoEncoder extra isCamelCase fi.PropertyType\n                        fun (source: obj) (target: JsonValue) ->\n                            let value = FSharpValue.GetRecordField(source, fi)\n                            if not(isNull value) then // Discard null fields\n                                target.[targetKey] <- encode value\n                            target)\n                fun (source: obj) ->\n                    (JsonValue(), setters) ||> Seq.fold (fun target set -> set source target)\n            elif FSharpType.IsUnion(t, allowAccessToPrivateRepresentation=true) then\n                fun (value: obj) ->\n                    let info, fields = FSharpValue.GetUnionFields(value, t, allowAccessToPrivateRepresentation=true)\n                    match fields.Length with\n                    | 0 -> string info.Name\n                    | len ->\n                        let fieldTypes = info.GetFields()\n                        let target = Array.zeroCreate<JsonValue> (len + 1)\n                        target.[0] <- string info.Name\n                        for i = 1 to len do\n                            let encode = autoEncoder extra isCamelCase fieldTypes.[i-1].PropertyType\n                            target.[i] <- encode fields.[i-1]\n                        array target\n            else\n                // Don't use failwithf here, for some reason F#/Fable compiles it as a function\n                // when the return type is a function too, so it doesn't fail immediately\n                sprintf \"Cannot generate auto encoder for %s. Please pass an extra encoder.\" t.FullName\n                |> failwith\n        encoderRef := encoder\n        encoder\n\n    and private autoEncoder (extra: Map<string, ref<BoxedEncoder>>) isCamelCase (t: System.Type) : BoxedEncoder =\n      let fullname = t.FullName\n      match Map.tryFind fullname extra with\n      | Some encoderRef -> fun v -> encoderRef.contents v\n      | None ->\n        if t.IsArray then\n            let encoder = t.GetElementType() |> autoEncoder extra isCamelCase\n            fun (value: obj) ->\n                value :?> obj seq |> Seq.map encoder |> seq\n        elif t.IsGenericType then\n            if FSharpType.IsTuple(t) then\n                let encoders =\n                    FSharpType.GetTupleElements(t)\n                    |> Array.map (autoEncoder extra isCamelCase)\n                fun (value: obj) ->\n                    FSharpValue.GetTupleFields(value)\n                    |> Seq.mapi (fun i x -> encoders.[i] x) |> seq\n            else\n                let fullname = t.GetGenericTypeDefinition().FullName\n                if fullname = typedefof<obj option>.FullName then\n                    // Evaluate lazily so we don't need to generate the encoder for null values\n                    let encoder = lazy\n                                    t.GenericTypeArguments.[0]\n                                    |> autoEncoder extra isCamelCase\n                                    |> option\n                                    |> boxEncoder\n                    boxEncoder(fun (value: obj) ->\n                        if isNull value then nil\n                        else encoder.Value value)\n                elif fullname = typedefof<obj list>.FullName\n                    || fullname = typedefof<Set<string>>.FullName then\n                    let encoder = t.GenericTypeArguments.[0] |> autoEncoder extra isCamelCase\n                    fun (value: obj) ->\n                        value :?> obj seq |> Seq.map encoder |> seq\n                elif fullname = typedefof< Map<string, obj> >.FullName then\n                    let keyType = t.GenericTypeArguments.[0]\n                    let valueEncoder = t.GenericTypeArguments.[1] |> autoEncoder extra isCamelCase\n                    if keyType.FullName = typeof<string>.FullName\n                        || keyType.FullName = typeof<System.Guid>.FullName then\n                        fun value ->\n                            // Fable compiles Guids as strings so this works, but maybe we should make the conversion explicit\n                            // (see dotnet version) in case Fable implementation of Guids change\n                            (JsonValue(), value :?> Map<string, obj>)\n                            ||> Seq.fold (fun target (KeyValue(k,v)) ->\n                                target.[k] <- valueEncoder v\n                                target)\n                    else\n                        let keyEncoder = keyType |> autoEncoder extra isCamelCase\n                        fun value ->\n                            value :?> Map<string, obj> |> Seq.map (fun (KeyValue(k,v)) ->\n                                array [|keyEncoder k; valueEncoder v|]) |> seq\n                else\n                    autoEncodeRecordsAndUnions extra isCamelCase t\n        else\n            if fullname = typeof<bool>.FullName then\n                boxEncoder bool\n            elif fullname = typeof<string>.FullName then\n                boxEncoder string\n            elif fullname = typeof<int>.FullName then\n                boxEncoder int\n            elif fullname = typeof<uint32>.FullName then\n                boxEncoder uint32\n            elif fullname = typeof<float>.FullName then\n                boxEncoder float\n            // These number types require extra libraries in Fable. To prevent penalizing\n            // all users, extra encoders (withInt64, etc) must be passed when they're needed.\n\n            // elif fullname = typeof<int64>.FullName then\n            //     boxEncoder int64\n            // elif fullname = typeof<uint64>.FullName then\n            //     boxEncoder uint64\n            // elif fullname = typeof<bigint>.FullName then\n            //     boxEncoder bigint\n            // elif fullname = typeof<decimal>.FullName then\n            //     boxEncoder decimal\n            elif fullname = typeof<System.DateTime>.FullName then\n                boxEncoder datetime\n            elif fullname = typeof<System.DateTimeOffset>.FullName then\n                boxEncoder datetimeOffset\n            elif fullname = typeof<System.TimeSpan>.FullName then\n                boxEncoder timespan\n            elif fullname = typeof<System.Guid>.FullName then\n                boxEncoder guid\n            elif fullname = typeof<obj>.FullName then\n                boxEncoder id\n            else\n                autoEncodeRecordsAndUnions extra isCamelCase t\n\n    let private makeExtra (extra: ExtraCoders option) =\n        match extra with\n        | None -> Map.empty\n        | Some e -> Map.map (fun _ (enc,_) -> ref enc) e\n\n    type Auto =\n        /// ATTENTION: Use this only when other arguments (isCamelCase, extra) don't change\n        static member generateEncoderCached<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Encoder<'T> =\n            let t = Util.resolveType resolver\n            Util.CachedEncoders.GetOrAdd(t.FullName, fun _ ->\n                let isCamelCase = defaultArg isCamelCase false\n                autoEncoder (makeExtra extra) isCamelCase t) |> unboxEncoder\n\n        static member generateEncoder<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Encoder<'T> =\n            let isCamelCase = defaultArg isCamelCase false\n            Util.resolveType resolver\n            |> autoEncoder (makeExtra extra) isCamelCase |> unboxEncoder\n\n        static member toString(space : int, value : 'T, ?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>) : string =\n            let encoder = Auto.generateEncoder(?isCamelCase=isCamelCase, ?extra=extra, ?resolver=resolver)\n            encoder value |> toString space\n\n    ///**Description**\n    /// Convert a `Value` into a prettified string.\n    ///**Parameters**\n    ///  * `space` - parameter of type `int` - Amount of indentation\n    ///  * `value` - parameter of type `obj` - Value to convert\n    ///\n    ///**Output Type**\n    ///  * `string`\n    ///\n    ///**Exceptions**\n    ///\n    [<System.Obsolete(\"Please use toString instead\")>]\n    let encode (space: int) (value: JsonValue) : string = toString space value\n","import { List, declare, Record } from \"../Types.js\";\nimport { record, array, int32 } from \"../Reflection.js\";\nimport { op_LeftShift, op_BitwiseAnd, op_Addition, compare, op_Subtraction, op_Division, equals, toInt, op_Modulus, op_Multiply, fromInteger, fromBits } from \"../Long.js\";\nimport { ofList, copy, initialize, map, fill } from \"../Array.js\";\nimport { int32ToString } from \"../Util.js\";\nimport { isNullOrEmpty, join } from \"../String.js\";\nexport const BigNat = declare(function BigInt_BigNat(arg1, arg2) {\n  this.bound = arg1 | 0;\n  this.digits = arg2;\n}, Record);\nexport function BigNat$reflection() {\n  return record(\"BigInt.BigNat\", [], BigNat, () => [[\"bound\", int32], [\"digits\", array(int32)]]);\n}\nexport function BigNatModule$002EFFT$$$pow32(x, n) {\n  BigNatModule$002EFFT$$$pow32: while (true) {\n    if (n === 0) {\n      return 1;\n    } else if (n % 2 === 0) {\n      const $n$$2 = n;\n      const $x$$1 = x;\n      x = $x$$1 * $x$$1;\n      n = ~~($n$$2 / 2);\n      continue BigNatModule$002EFFT$$$pow32;\n    } else {\n      return x * BigNatModule$002EFFT$$$pow32(x * x, ~~(n / 2)) | 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$002EFFT$$$leastBounding2Power(b) {\n  const findBounding2Power = function findBounding2Power(b$$1, tp, i) {\n    findBounding2Power: while (true) {\n      if (b$$1 <= tp) {\n        return [tp, i];\n      } else {\n        const $b$$1$$3 = b$$1;\n        const $i$$5 = i;\n        const $tp$$4 = tp;\n        b$$1 = $b$$1$$3;\n        tp = $tp$$4 * 2;\n        i = $i$$5 + 1;\n        continue findBounding2Power;\n      }\n\n      break;\n    }\n  };\n\n  return findBounding2Power(b, 1, 0);\n}\nconst BigNatModule$002EFFT$$$patternInput$004074 = [fromBits(2013265921, 0, false), 27, 15, 31, 440564289];\nexport const BigNatModule$002EFFT$$$w = BigNatModule$002EFFT$$$patternInput$004074[4];\nexport const BigNatModule$002EFFT$$$p = BigNatModule$002EFFT$$$patternInput$004074[0];\nexport const BigNatModule$002EFFT$$$m = BigNatModule$002EFFT$$$patternInput$004074[2];\nexport const BigNatModule$002EFFT$$$k = BigNatModule$002EFFT$$$patternInput$004074[1];\nexport const BigNatModule$002EFFT$$$g = BigNatModule$002EFFT$$$patternInput$004074[3];\nexport const BigNatModule$002EFFT$$$primeP = BigNatModule$002EFFT$$$p;\nexport const BigNatModule$002EFFT$$$maxBitsInsideFp = 30;\nexport const BigNatModule$002EFFT$002EFp$$$p = 2013265921;\nexport const BigNatModule$002EFFT$002EFp$$$p64 = fromBits(2013265921, 0, true);\nexport function BigNatModule$002EFFT$002EFp$$$toInt(x$$1) {\n  return ~~x$$1;\n}\nexport function BigNatModule$002EFFT$002EFp$$$ofInt32(x$$2) {\n  return x$$2 >>> 0;\n}\nexport const BigNatModule$002EFFT$002EFp$$$mzero = 0;\nexport const BigNatModule$002EFFT$002EFp$$$mone = 1;\nexport const BigNatModule$002EFFT$002EFp$$$mtwo = 2;\nexport function BigNatModule$002EFFT$002EFp$$$mpow(x$$3, n$$1) {\n  BigNatModule$002EFFT$002EFp$$$mpow: while (true) {\n    if (n$$1 === 0) {\n      return BigNatModule$002EFFT$002EFp$$$mone;\n    } else if (n$$1 % 2 === 0) {\n      const $n$$1$$7 = n$$1;\n      const $x$$3$$6 = x$$3;\n      x$$3 = toInt(op_Modulus(op_Multiply(fromInteger($x$$3$$6, true, 6), fromInteger($x$$3$$6, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n      n$$1 = ~~($n$$1$$7 / 2);\n      continue BigNatModule$002EFFT$002EFp$$$mpow;\n    } else {\n      return toInt(op_Modulus(op_Multiply(fromInteger(x$$3, true, 6), fromInteger(BigNatModule$002EFFT$002EFp$$$mpow(toInt(op_Modulus(op_Multiply(fromInteger(x$$3, true, 6), fromInteger(x$$3, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0, ~~(n$$1 / 2)), true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$002EFFT$002EFp$$$mpowL(x$$7, n$$2) {\n  BigNatModule$002EFFT$002EFp$$$mpowL: while (true) {\n    if (equals(n$$2, fromBits(0, 0, false))) {\n      return BigNatModule$002EFFT$002EFp$$$mone;\n    } else if (equals(op_Modulus(n$$2, fromBits(2, 0, false)), fromBits(0, 0, false))) {\n      const $n$$2$$9 = n$$2;\n      const $x$$7$$8 = x$$7;\n      x$$7 = toInt(op_Modulus(op_Multiply(fromInteger($x$$7$$8, true, 6), fromInteger($x$$7$$8, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n      n$$2 = op_Division($n$$2$$9, fromBits(2, 0, false));\n      continue BigNatModule$002EFFT$002EFp$$$mpowL;\n    } else {\n      return toInt(op_Modulus(op_Multiply(fromInteger(x$$7, true, 6), fromInteger(BigNatModule$002EFFT$002EFp$$$mpowL(toInt(op_Modulus(op_Multiply(fromInteger(x$$7, true, 6), fromInteger(x$$7, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0, op_Division(n$$2, fromBits(2, 0, false))), true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$002EFFT$002EFp$$$m2PowNthRoot(n$$3) {\n  return BigNatModule$002EFFT$002EFp$$$mpow(BigNatModule$002EFFT$$$w >>> 0, BigNatModule$002EFFT$$$pow32(2, BigNatModule$002EFFT$$$k - n$$3));\n}\nexport function BigNatModule$002EFFT$002EFp$$$minv(x$$11) {\n  return BigNatModule$002EFFT$002EFp$$$mpowL(x$$11, op_Subtraction(BigNatModule$002EFFT$$$primeP, fromBits(2, 0, false)));\n}\nexport function BigNatModule$002EFFT$$$computeFFT(lambda, mu, n$$4, w, u, res, offset) {\n  if (n$$4 === 1) {\n    res[offset] = u[mu];\n  } else {\n    const halfN = ~~(n$$4 / 2) | 0;\n    const ww = toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(w, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    const offsetHalfN = offset + halfN | 0;\n    BigNatModule$002EFFT$$$computeFFT(lambda * 2, mu, halfN, ww, u, res, offset);\n    BigNatModule$002EFFT$$$computeFFT(lambda * 2, lambda + mu, halfN, ww, u, res, offsetHalfN);\n    let wj = BigNatModule$002EFFT$002EFp$$$mone;\n\n    for (let j = 0; j <= halfN - 1; j++) {\n      const even = res[offset + j];\n      const odd = res[offsetHalfN + j];\n      res[offset + j] = (even + (toInt(op_Modulus(op_Multiply(fromInteger(wj, true, 6), fromInteger(odd, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0)) % BigNatModule$002EFFT$002EFp$$$p;\n      res[offsetHalfN + j] = (even + BigNatModule$002EFFT$002EFp$$$p - (toInt(op_Modulus(op_Multiply(fromInteger(wj, true, 6), fromInteger(odd, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0)) % BigNatModule$002EFFT$002EFp$$$p;\n      wj = toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(wj, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    }\n  }\n}\nexport function BigNatModule$002EFFT$$$computFftInPlace(n$$5, w$$1, u$$1) {\n  const lambda$$1 = 1;\n  const mu$$1 = 0;\n  const res$$1 = fill(new Uint32Array(n$$5), 0, n$$5, BigNatModule$002EFFT$002EFp$$$mzero);\n  const offset$$1 = 0;\n  BigNatModule$002EFFT$$$computeFFT(lambda$$1, mu$$1, n$$5, w$$1, u$$1, res$$1, offset$$1);\n  return res$$1;\n}\nexport function BigNatModule$002EFFT$$$computeInverseFftInPlace(n$$6, w$$2, uT) {\n  const bigKInv = BigNatModule$002EFFT$002EFp$$$minv(n$$6 >>> 0);\n  return map(function (y$$12) {\n    return toInt(op_Modulus(op_Multiply(fromInteger(bigKInv, true, 6), fromInteger(y$$12, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n  }, BigNatModule$002EFFT$$$computFftInPlace(n$$6, BigNatModule$002EFFT$002EFp$$$minv(w$$2), uT), Uint32Array);\n}\nexport const BigNatModule$002EFFT$$$maxTwoPower = 29;\nexport const BigNatModule$002EFFT$$$twoPowerTable = initialize(BigNatModule$002EFFT$$$maxTwoPower - 1, function (i$$1) {\n  return BigNatModule$002EFFT$$$pow32(2, i$$1);\n}, Int32Array);\nexport function BigNatModule$002EFFT$$$computeFftPaddedPolynomialProduct(bigK, k, u$$2, v) {\n  const w$$3 = BigNatModule$002EFFT$002EFp$$$m2PowNthRoot(k);\n  const n$$7 = bigK | 0;\n  const uT$$1 = BigNatModule$002EFFT$$$computFftInPlace(n$$7, w$$3, u$$2);\n  const vT = BigNatModule$002EFFT$$$computFftInPlace(n$$7, w$$3, v);\n  const rT = initialize(n$$7, function (i$$2) {\n    return toInt(op_Modulus(op_Multiply(fromInteger(uT$$1[i$$2], true, 6), fromInteger(vT[i$$2], true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n  }, Uint32Array);\n  const r = BigNatModule$002EFFT$$$computeInverseFftInPlace(n$$7, w$$3, rT);\n  return r;\n}\nexport function BigNatModule$002EFFT$$$padTo(n$$8, u$$3) {\n  const uBound = u$$3.length | 0;\n  return initialize(n$$8, function (i$$3) {\n    return i$$3 < uBound ? BigNatModule$002EFFT$002EFp$$$ofInt32(u$$3[i$$3]) : BigNatModule$002EFFT$002EFp$$$mzero;\n  }, Uint32Array);\n}\nexport function BigNatModule$002EFFT$$$computeFftPolynomialProduct(degu, u$$4, degv, v$$1) {\n  const deguv = degu + degv | 0;\n  const bound = deguv + 1 | 0;\n  const patternInput = BigNatModule$002EFFT$$$leastBounding2Power(bound);\n  const w$$4 = BigNatModule$002EFFT$002EFp$$$m2PowNthRoot(patternInput[1]);\n  const u$$5 = BigNatModule$002EFFT$$$padTo(patternInput[0], u$$4);\n  const v$$2 = BigNatModule$002EFFT$$$padTo(patternInput[0], v$$1);\n  const n$$9 = patternInput[0] | 0;\n  const uT$$2 = BigNatModule$002EFFT$$$computFftInPlace(n$$9, w$$4, u$$5);\n  const vT$$1 = BigNatModule$002EFFT$$$computFftInPlace(n$$9, w$$4, v$$2);\n  const rT$$1 = initialize(n$$9, function (i$$4) {\n    return toInt(op_Modulus(op_Multiply(fromInteger(uT$$2[i$$4], true, 6), fromInteger(vT$$1[i$$4], true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n  }, Uint32Array);\n  const r$$1 = BigNatModule$002EFFT$$$computeInverseFftInPlace(n$$9, w$$4, rT$$1);\n  return map(BigNatModule$002EFFT$002EFp$$$toInt, r$$1, Int32Array);\n}\nexport const BigNatModule$002EFFT$$$mzero = BigNatModule$002EFFT$002EFp$$$mzero;\nexport const BigNatModule$002EFFT$$$mone = BigNatModule$002EFFT$002EFp$$$mone;\nexport const BigNatModule$002EFFT$$$maxFp = (BigNatModule$002EFFT$002EFp$$$p + BigNatModule$002EFFT$002EFp$$$p - BigNatModule$002EFFT$$$mone) % BigNatModule$002EFFT$002EFp$$$p;\nexport function BigNatModule$$$bound(n$$10) {\n  return n$$10.bound;\n}\nexport function BigNatModule$$$setBound(n$$11, v$$3) {\n  n$$11.bound = v$$3;\n}\nexport function BigNatModule$$$coeff(n$$12, i$$5) {\n  return n$$12.digits[i$$5];\n}\nexport function BigNatModule$$$coeff64(n$$13, i$$6) {\n  return fromInteger(BigNatModule$$$coeff(n$$13, i$$6), false, 2);\n}\nexport function BigNatModule$$$setCoeff(n$$14, i$$7, v$$4) {\n  n$$14.digits[i$$7] = v$$4;\n}\nexport function BigNatModule$$$pow64(x$$23, n$$15) {\n  BigNatModule$$$pow64: while (true) {\n    if (n$$15 === 0) {\n      return fromBits(1, 0, false);\n    } else if (n$$15 % 2 === 0) {\n      const $n$$15$$11 = n$$15;\n      const $x$$23$$10 = x$$23;\n      x$$23 = op_Multiply($x$$23$$10, $x$$23$$10);\n      n$$15 = ~~($n$$15$$11 / 2);\n      continue BigNatModule$$$pow64;\n    } else {\n      return op_Multiply(x$$23, BigNatModule$$$pow64(op_Multiply(x$$23, x$$23), ~~(n$$15 / 2)));\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$pow32(x$$24, n$$16) {\n  BigNatModule$$$pow32: while (true) {\n    if (n$$16 === 0) {\n      return 1;\n    } else if (n$$16 % 2 === 0) {\n      const $n$$16$$13 = n$$16;\n      const $x$$24$$12 = x$$24;\n      x$$24 = $x$$24$$12 * $x$$24$$12;\n      n$$16 = ~~($n$$16$$13 / 2);\n      continue BigNatModule$$$pow32;\n    } else {\n      return x$$24 * BigNatModule$$$pow32(x$$24 * x$$24, ~~(n$$16 / 2)) | 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$hash(n$$17) {\n  let res$$2 = 0;\n\n  for (let i$$8 = 0; i$$8 <= n$$17.bound - 1; i$$8++) {\n    res$$2 = n$$17.digits[i$$8] + (res$$2 << 3);\n  }\n\n  return res$$2 | 0;\n}\nexport function BigNatModule$$$maxInt(a, b$$2) {\n  if (a < b$$2) {\n    return b$$2 | 0;\n  } else {\n    return a | 0;\n  }\n}\nexport function BigNatModule$$$minInt(a$$1, b$$3) {\n  if (a$$1 < b$$3) {\n    return a$$1 | 0;\n  } else {\n    return b$$3 | 0;\n  }\n}\nexport const BigNatModule$$$baseBits = 24;\nexport const BigNatModule$$$baseN = 16777216;\nexport const BigNatModule$$$baseMask = 16777215;\nexport const BigNatModule$$$baseNi64 = fromBits(16777216, 0, false);\nexport const BigNatModule$$$baseMaski64 = fromBits(16777215, 0, false);\nexport const BigNatModule$$$baseMaskU = fromBits(16777215, 0, true);\nexport const BigNatModule$$$baseMask32A = 16777215;\nexport const BigNatModule$$$baseMask32B = 255;\nexport const BigNatModule$$$baseShift32B = 24;\nexport const BigNatModule$$$baseMask64A = 16777215;\nexport const BigNatModule$$$baseMask64B = 16777215;\nexport const BigNatModule$$$baseMask64C = 65535;\nexport const BigNatModule$$$baseShift64B = 24;\nexport const BigNatModule$$$baseShift64C = 48;\nexport function BigNatModule$$$divbase(x$$25) {\n  return ~~(x$$25 >>> 0 >>> BigNatModule$$$baseBits);\n}\nexport function BigNatModule$$$modbase(x$$26) {\n  return x$$26 & BigNatModule$$$baseMask;\n}\nexport function BigNatModule$$$createN(b$$4) {\n  return new BigNat(b$$4, new Int32Array(b$$4));\n}\nexport function BigNatModule$$$copyN(x$$27) {\n  return new BigNat(x$$27.bound, copy(x$$27.digits, Int32Array));\n}\nexport function BigNatModule$$$normN(n$$18) {\n  const findLeastBound = function findLeastBound(na, i$$9) {\n    findLeastBound: while (true) {\n      if (i$$9 === -1 ? true : na[i$$9] !== 0) {\n        return i$$9 + 1 | 0;\n      } else {\n        const $i$$9$$15 = i$$9;\n        const $na$$14 = na;\n        na = $na$$14;\n        i$$9 = $i$$9$$15 - 1;\n        continue findLeastBound;\n      }\n\n      break;\n    }\n  };\n\n  const bound$$1 = findLeastBound(n$$18.digits, n$$18.bound - 1) | 0;\n  n$$18.bound = bound$$1;\n  return n$$18;\n}\nexport const BigNatModule$$$boundInt = 2;\nexport const BigNatModule$$$boundInt64 = 3;\nexport const BigNatModule$$$boundBase = 1;\nexport function BigNatModule$$$embed(x$$28) {\n  const x$$29 = (x$$28 < 0 ? 0 : x$$28) | 0;\n\n  if (x$$29 < BigNatModule$$$baseN) {\n    const r$$2 = BigNatModule$$$createN(1);\n    r$$2.digits[0] = x$$29;\n    return BigNatModule$$$normN(r$$2);\n  } else {\n    const r$$3 = BigNatModule$$$createN(BigNatModule$$$boundInt);\n\n    for (let i$$10 = 0; i$$10 <= BigNatModule$$$boundInt - 1; i$$10++) {\n      r$$3.digits[i$$10] = ~~(x$$29 / BigNatModule$$$pow32(BigNatModule$$$baseN, i$$10)) % BigNatModule$$$baseN;\n    }\n\n    return BigNatModule$$$normN(r$$3);\n  }\n}\nexport function BigNatModule$$$embed64(x$$30) {\n  const x$$31 = compare(x$$30, fromBits(0, 0, false)) < 0 ? fromBits(0, 0, false) : x$$30;\n  const r$$4 = BigNatModule$$$createN(BigNatModule$$$boundInt64);\n\n  for (let i$$11 = 0; i$$11 <= BigNatModule$$$boundInt64 - 1; i$$11++) {\n    r$$4.digits[i$$11] = ~~toInt(op_Modulus(op_Division(x$$31, BigNatModule$$$pow64(BigNatModule$$$baseNi64, i$$11)), BigNatModule$$$baseNi64));\n  }\n\n  return BigNatModule$$$normN(r$$4);\n}\nexport function BigNatModule$$$eval32(n$$19) {\n  if (n$$19.bound === 1) {\n    return n$$19.digits[0] | 0;\n  } else {\n    let acc = 0;\n\n    for (let i$$12 = n$$19.bound - 1; i$$12 >= 0; i$$12--) {\n      acc = n$$19.digits[i$$12] + BigNatModule$$$baseN * acc;\n    }\n\n    return acc | 0;\n  }\n}\nexport function BigNatModule$$$eval64(n$$20) {\n  if (n$$20.bound === 1) {\n    return fromInteger(n$$20.digits[0], false, 2);\n  } else {\n    let acc$$1 = fromBits(0, 0, false);\n\n    for (let i$$13 = n$$20.bound - 1; i$$13 >= 0; i$$13--) {\n      acc$$1 = op_Addition(fromInteger(n$$20.digits[i$$13], false, 2), op_Multiply(BigNatModule$$$baseNi64, acc$$1));\n    }\n\n    return acc$$1;\n  }\n}\nexport const BigNatModule$$$one = BigNatModule$$$embed(1);\nexport const BigNatModule$$$zero = BigNatModule$$$embed(0);\nexport function BigNatModule$$$restrictTo(d, n$$21) {\n  return new BigNat(BigNatModule$$$minInt(d, n$$21.bound), n$$21.digits);\n}\nexport function BigNatModule$$$shiftUp(d$$1, n$$22) {\n  const m = BigNatModule$$$createN(n$$22.bound + d$$1);\n\n  for (let i$$14 = 0; i$$14 <= n$$22.bound - 1; i$$14++) {\n    m.digits[i$$14 + d$$1] = n$$22.digits[i$$14];\n  }\n\n  return m;\n}\nexport function BigNatModule$$$shiftDown(d$$2, n$$23) {\n  if (n$$23.bound - d$$2 <= 0) {\n    return BigNatModule$$$zero;\n  } else {\n    const m$$1 = BigNatModule$$$createN(n$$23.bound - d$$2);\n\n    for (let i$$15 = 0; i$$15 <= m$$1.bound - 1; i$$15++) {\n      m$$1.digits[i$$15] = n$$23.digits[i$$15 + d$$2];\n    }\n\n    return m$$1;\n  }\n}\nexport function BigNatModule$$$degree(n$$24) {\n  return n$$24.bound - 1;\n}\nexport function BigNatModule$$$addP(i$$16, n$$25, c, p, q, r$$5) {\n  BigNatModule$$$addP: while (true) {\n    if (i$$16 < n$$25) {\n      const x$$32 = (i$$16 < p.bound ? p.digits[i$$16] : 0) + (i$$16 < q.bound ? q.digits[i$$16] : 0) + c | 0;\n      r$$5.digits[i$$16] = BigNatModule$$$modbase(x$$32);\n      const c$$1 = BigNatModule$$$divbase(x$$32) | 0;\n      const $i$$16$$16 = i$$16;\n      const $n$$25$$17 = n$$25;\n      const $p$$18 = p;\n      const $q$$19 = q;\n      const $r$$5$$20 = r$$5;\n      i$$16 = $i$$16$$16 + 1;\n      n$$25 = $n$$25$$17;\n      c = c$$1;\n      p = $p$$18;\n      q = $q$$19;\n      r$$5 = $r$$5$$20;\n      continue BigNatModule$$$addP;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$add(p$$1, q$$1) {\n  const rbound = 1 + BigNatModule$$$maxInt(p$$1.bound, q$$1.bound) | 0;\n  const r$$6 = BigNatModule$$$createN(rbound);\n  const carry = 0;\n  BigNatModule$$$addP(0, rbound, carry, p$$1, q$$1, r$$6);\n  return BigNatModule$$$normN(r$$6);\n}\nexport function BigNatModule$$$subP(i$$19, n$$26, c$$2, p$$2, q$$2, r$$7) {\n  BigNatModule$$$subP: while (true) {\n    if (i$$19 < n$$26) {\n      const x$$33 = (i$$19 < p$$2.bound ? p$$2.digits[i$$19] : 0) - (i$$19 < q$$2.bound ? q$$2.digits[i$$19] : 0) + c$$2 | 0;\n\n      if (x$$33 > 0) {\n        r$$7.digits[i$$19] = BigNatModule$$$modbase(x$$33);\n        const c$$3 = BigNatModule$$$divbase(x$$33) | 0;\n        const $i$$19$$21 = i$$19;\n        const $n$$26$$22 = n$$26;\n        const $p$$2$$23 = p$$2;\n        const $q$$2$$24 = q$$2;\n        const $r$$7$$25 = r$$7;\n        i$$19 = $i$$19$$21 + 1;\n        n$$26 = $n$$26$$22;\n        c$$2 = c$$3;\n        p$$2 = $p$$2$$23;\n        q$$2 = $q$$2$$24;\n        r$$7 = $r$$7$$25;\n        continue BigNatModule$$$subP;\n      } else {\n        const x$$34 = x$$33 + BigNatModule$$$baseN | 0;\n        r$$7.digits[i$$19] = BigNatModule$$$modbase(x$$34);\n        const c$$4 = BigNatModule$$$divbase(x$$34) - 1 | 0;\n        const $i$$19$$26 = i$$19;\n        const $n$$26$$27 = n$$26;\n        const $p$$2$$28 = p$$2;\n        const $q$$2$$29 = q$$2;\n        const $r$$7$$30 = r$$7;\n        i$$19 = $i$$19$$26 + 1;\n        n$$26 = $n$$26$$27;\n        c$$2 = c$$4;\n        p$$2 = $p$$2$$28;\n        q$$2 = $q$$2$$29;\n        r$$7 = $r$$7$$30;\n        continue BigNatModule$$$subP;\n      }\n    } else {\n      const underflow = c$$2 !== 0;\n      return underflow;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$sub(p$$3, q$$3) {\n  const rbound$$1 = BigNatModule$$$maxInt(p$$3.bound, q$$3.bound) | 0;\n  const r$$8 = BigNatModule$$$createN(rbound$$1);\n  const carry$$1 = 0;\n  const underflow$$1 = BigNatModule$$$subP(0, rbound$$1, carry$$1, p$$3, q$$3, r$$8);\n\n  if (underflow$$1) {\n    return BigNatModule$$$embed(0);\n  } else {\n    return BigNatModule$$$normN(r$$8);\n  }\n}\nexport function BigNatModule$$$isZero(p$$4) {\n  return p$$4.bound === 0;\n}\nexport function BigNatModule$$$IsZero(p$$5) {\n  return BigNatModule$$$isZero(p$$5);\n}\nexport function BigNatModule$$$isOne(p$$6) {\n  if (p$$6.bound === 1) {\n    return p$$6.digits[0] === 1;\n  } else {\n    return false;\n  }\n}\nexport function BigNatModule$$$equal(p$$7, q$$4) {\n  if (p$$7.bound === q$$4.bound) {\n    const check = function check(pa, qa, i$$22) {\n      check: while (true) {\n        if (i$$22 === -1) {\n          return true;\n        } else if (pa[i$$22] === qa[i$$22]) {\n          const $i$$22$$33 = i$$22;\n          const $pa$$31 = pa;\n          const $qa$$32 = qa;\n          pa = $pa$$31;\n          qa = $qa$$32;\n          i$$22 = $i$$22$$33 - 1;\n          continue check;\n        } else {\n          return false;\n        }\n\n        break;\n      }\n    };\n\n    return check(p$$7.digits, q$$4.digits, p$$7.bound - 1);\n  } else {\n    return false;\n  }\n}\nexport function BigNatModule$$$shiftCompare(p$$8, pn, q$$5, qn) {\n  if (p$$8.bound + pn < q$$5.bound + qn) {\n    return -1 | 0;\n  } else if (p$$8.bound + pn > q$$5.bound + pn) {\n    return 1;\n  } else {\n    const check$$1 = function check$$1(pa$$1, qa$$1, i$$23) {\n      check$$1: while (true) {\n        if (i$$23 === -1) {\n          return 0;\n        } else {\n          const pai = (i$$23 < pn ? 0 : pa$$1[i$$23 - pn]) | 0;\n          const qai = (i$$23 < qn ? 0 : qa$$1[i$$23 - qn]) | 0;\n\n          if (pai === qai) {\n            const $i$$23$$36 = i$$23;\n            const $pa$$1$$34 = pa$$1;\n            const $qa$$1$$35 = qa$$1;\n            pa$$1 = $pa$$1$$34;\n            qa$$1 = $qa$$1$$35;\n            i$$23 = $i$$23$$36 - 1;\n            continue check$$1;\n          } else if (pai < qai) {\n            return -1 | 0;\n          } else {\n            return 1;\n          }\n        }\n\n        break;\n      }\n    };\n\n    return check$$1(p$$8.digits, q$$5.digits, p$$8.bound + pn - 1) | 0;\n  }\n}\nexport function BigNatModule$$$compare(p$$9, q$$6) {\n  if (p$$9.bound < q$$6.bound) {\n    return -1 | 0;\n  } else if (p$$9.bound > q$$6.bound) {\n    return 1;\n  } else {\n    const check$$2 = function check$$2(pa$$2, qa$$2, i$$24) {\n      check$$2: while (true) {\n        if (i$$24 === -1) {\n          return 0;\n        } else if (pa$$2[i$$24] === qa$$2[i$$24]) {\n          const $i$$24$$39 = i$$24;\n          const $pa$$2$$37 = pa$$2;\n          const $qa$$2$$38 = qa$$2;\n          pa$$2 = $pa$$2$$37;\n          qa$$2 = $qa$$2$$38;\n          i$$24 = $i$$24$$39 - 1;\n          continue check$$2;\n        } else if (pa$$2[i$$24] < qa$$2[i$$24]) {\n          return -1 | 0;\n        } else {\n          return 1;\n        }\n\n        break;\n      }\n    };\n\n    return check$$2(p$$9.digits, q$$6.digits, p$$9.bound - 1) | 0;\n  }\n}\nexport function BigNatModule$$$lt(p$$10, q$$7) {\n  return BigNatModule$$$compare(p$$10, q$$7) === -1;\n}\nexport function BigNatModule$$$gt(p$$11, q$$8) {\n  return BigNatModule$$$compare(p$$11, q$$8) === 1;\n}\nexport function BigNatModule$$$lte(p$$12, q$$9) {\n  return BigNatModule$$$compare(p$$12, q$$9) !== 1;\n}\nexport function BigNatModule$$$gte(p$$13, q$$10) {\n  return BigNatModule$$$compare(p$$13, q$$10) !== -1;\n}\nexport function BigNatModule$$$min(a$$2, b$$5) {\n  if (BigNatModule$$$lt(a$$2, b$$5)) {\n    return a$$2;\n  } else {\n    return b$$5;\n  }\n}\nexport function BigNatModule$$$max(a$$3, b$$6) {\n  if (BigNatModule$$$lt(a$$3, b$$6)) {\n    return b$$6;\n  } else {\n    return a$$3;\n  }\n}\nexport function BigNatModule$$$contributeArr(a$$4, i$$25, c$$5) {\n  BigNatModule$$$contributeArr: while (true) {\n    const x$$35 = op_Addition(fromInteger(a$$4[i$$25], false, 2), c$$5);\n    const c$$6 = op_Division(x$$35, BigNatModule$$$baseNi64);\n    const x$$38 = ~~toInt(op_BitwiseAnd(x$$35, BigNatModule$$$baseMaski64)) | 0;\n    a$$4[i$$25] = x$$38;\n\n    if (compare(c$$6, fromBits(0, 0, false)) > 0) {\n      const $a$$4$$40 = a$$4;\n      const $i$$25$$41 = i$$25;\n      a$$4 = $a$$4$$40;\n      i$$25 = $i$$25$$41 + 1;\n      c$$5 = c$$6;\n      continue BigNatModule$$$contributeArr;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$scale(k$$2, p$$14) {\n  const rbound$$2 = p$$14.bound + BigNatModule$$$boundInt | 0;\n  const r$$9 = BigNatModule$$$createN(rbound$$2);\n  const k$$3 = fromInteger(k$$2, false, 2);\n\n  for (let i$$26 = 0; i$$26 <= p$$14.bound - 1; i$$26++) {\n    const kpi = op_Multiply(k$$3, fromInteger(p$$14.digits[i$$26], false, 2));\n    BigNatModule$$$contributeArr(r$$9.digits, i$$26, kpi);\n  }\n\n  return BigNatModule$$$normN(r$$9);\n}\nexport function BigNatModule$$$mulSchoolBookBothSmall(p$$15, q$$11) {\n  const r$$11 = BigNatModule$$$createN(2);\n  const rak = op_Multiply(fromInteger(p$$15, false, 2), fromInteger(q$$11, false, 2));\n  BigNatModule$$$setCoeff(r$$11, 0, ~~toInt(op_BitwiseAnd(rak, BigNatModule$$$baseMaski64)));\n  BigNatModule$$$setCoeff(r$$11, 1, ~~toInt(op_Division(rak, BigNatModule$$$baseNi64)));\n  return BigNatModule$$$normN(r$$11);\n}\nexport function BigNatModule$$$mulSchoolBookCarry(r$$12, c$$8, k$$4) {\n  BigNatModule$$$mulSchoolBookCarry: while (true) {\n    if (compare(c$$8, fromBits(0, 0, false)) > 0) {\n      const rak$$1 = op_Addition(BigNatModule$$$coeff64(r$$12, k$$4), c$$8);\n      BigNatModule$$$setCoeff(r$$12, k$$4, ~~toInt(op_BitwiseAnd(rak$$1, BigNatModule$$$baseMaski64)));\n      const $k$$4$$43 = k$$4;\n      const $r$$12$$42 = r$$12;\n      r$$12 = $r$$12$$42;\n      c$$8 = op_Division(rak$$1, BigNatModule$$$baseNi64);\n      k$$4 = $k$$4$$43 + 1;\n      continue BigNatModule$$$mulSchoolBookCarry;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$mulSchoolBookOneSmall(p$$16, q$$12) {\n  const bp = BigNatModule$$$bound(p$$16) | 0;\n  const rbound$$3 = bp + 1 | 0;\n  const r$$13 = BigNatModule$$$createN(rbound$$3);\n  const q$$13 = fromInteger(q$$12, false, 2);\n  let c$$9 = fromBits(0, 0, false);\n\n  for (let i$$28 = 0; i$$28 <= bp - 1; i$$28++) {\n    const rak$$2 = op_Addition(op_Addition(c$$9, BigNatModule$$$coeff64(r$$13, i$$28)), op_Multiply(BigNatModule$$$coeff64(p$$16, i$$28), q$$13));\n    BigNatModule$$$setCoeff(r$$13, i$$28, ~~toInt(op_BitwiseAnd(rak$$2, BigNatModule$$$baseMaski64)));\n    c$$9 = op_Division(rak$$2, BigNatModule$$$baseNi64);\n  }\n\n  BigNatModule$$$mulSchoolBookCarry(r$$13, c$$9, bp);\n  return BigNatModule$$$normN(r$$13);\n}\nexport function BigNatModule$$$mulSchoolBookNeitherSmall(p$$17, q$$14) {\n  const rbound$$4 = p$$17.bound + q$$14.bound | 0;\n  const r$$14 = BigNatModule$$$createN(rbound$$4);\n  const ra = r$$14.digits;\n  const pa$$3 = p$$17.digits;\n  const qa$$3 = q$$14.digits;\n\n  for (let i$$29 = 0; i$$29 <= p$$17.bound - 1; i$$29++) {\n    const pai$$1 = fromInteger(pa$$3[i$$29], false, 2);\n    let c$$10 = fromBits(0, 0, false);\n    let k$$5 = i$$29 | 0;\n\n    for (let j$$1 = 0; j$$1 <= q$$14.bound - 1; j$$1++) {\n      const qaj = fromInteger(qa$$3[j$$1], false, 2);\n      const rak$$3 = op_Addition(op_Addition(fromInteger(ra[k$$5], false, 2), c$$10), op_Multiply(pai$$1, qaj));\n      ra[k$$5] = ~~toInt(op_BitwiseAnd(rak$$3, BigNatModule$$$baseMaski64));\n      c$$10 = op_Division(rak$$3, BigNatModule$$$baseNi64);\n      k$$5 = k$$5 + 1;\n    }\n\n    BigNatModule$$$mulSchoolBookCarry(r$$14, c$$10, k$$5);\n  }\n\n  return BigNatModule$$$normN(r$$14);\n}\nexport function BigNatModule$$$mulSchoolBook(p$$18, q$$15) {\n  const pSmall = BigNatModule$$$bound(p$$18) === 1;\n  const qSmall = BigNatModule$$$bound(q$$15) === 1;\n\n  if (pSmall ? qSmall : false) {\n    return BigNatModule$$$mulSchoolBookBothSmall(BigNatModule$$$coeff(p$$18, 0), BigNatModule$$$coeff(q$$15, 0));\n  } else if (pSmall) {\n    return BigNatModule$$$mulSchoolBookOneSmall(q$$15, BigNatModule$$$coeff(p$$18, 0));\n  } else if (qSmall) {\n    return BigNatModule$$$mulSchoolBookOneSmall(p$$18, BigNatModule$$$coeff(q$$15, 0));\n  } else {\n    return BigNatModule$$$mulSchoolBookNeitherSmall(p$$18, q$$15);\n  }\n}\nexport const BigNatModule$002Eencoding = declare(function BigInt_BigNatModule_encoding(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n  this.bigL = arg1 | 0;\n  this.twoToBigL = arg2 | 0;\n  this.k = arg3 | 0;\n  this.bigK = arg4 | 0;\n  this.bigN = arg5 | 0;\n  this.split = arg6 | 0;\n  this.splits = arg7;\n}, Record);\nexport function BigNatModule$002Eencoding$reflection() {\n  return record(\"BigInt.BigNatModule.encoding\", [], BigNatModule$002Eencoding, () => [[\"bigL\", int32], [\"twoToBigL\", int32], [\"k\", int32], [\"bigK\", int32], [\"bigN\", int32], [\"split\", int32], [\"splits\", array(int32)]]);\n}\nexport function BigNatModule$$$mkEncoding(bigL, k$$6, bigK$$2, bigN) {\n  return new BigNatModule$002Eencoding(bigL, BigNatModule$$$pow32(2, bigL), k$$6, bigK$$2, bigN, ~~(BigNatModule$$$baseBits / bigL), initialize(~~(BigNatModule$$$baseBits / bigL), function (i$$30) {\n    return BigNatModule$$$pow32(2, bigL * i$$30);\n  }, Int32Array));\n}\nexport const BigNatModule$$$table = [BigNatModule$$$mkEncoding(1, 28, 268435456, 268435456), BigNatModule$$$mkEncoding(2, 26, 67108864, 134217728), BigNatModule$$$mkEncoding(3, 24, 16777216, 50331648), BigNatModule$$$mkEncoding(4, 22, 4194304, 16777216), BigNatModule$$$mkEncoding(5, 20, 1048576, 5242880), BigNatModule$$$mkEncoding(6, 18, 262144, 1572864), BigNatModule$$$mkEncoding(7, 16, 65536, 458752), BigNatModule$$$mkEncoding(8, 14, 16384, 131072), BigNatModule$$$mkEncoding(9, 12, 4096, 36864), BigNatModule$$$mkEncoding(10, 10, 1024, 10240), BigNatModule$$$mkEncoding(11, 8, 256, 2816), BigNatModule$$$mkEncoding(12, 6, 64, 768), BigNatModule$$$mkEncoding(13, 4, 16, 208)];\nexport function BigNatModule$$$calculateTableTow(bigL$$1) {\n  const k$$7 = BigNatModule$002EFFT$$$maxBitsInsideFp - 2 * bigL$$1 | 0;\n  const bigK$$3 = BigNatModule$$$pow64(fromBits(2, 0, false), k$$7);\n  const N = op_Multiply(bigK$$3, fromInteger(bigL$$1, false, 2));\n  return [bigL$$1, k$$7, bigK$$3, N];\n}\nexport function BigNatModule$$$encodingGivenResultBits(bitsRes) {\n  const selectFrom = function selectFrom(i$$31) {\n    selectFrom: while (true) {\n      if (i$$31 + 1 < BigNatModule$$$table.length ? bitsRes < BigNatModule$$$table[i$$31 + 1].bigN : false) {\n        const $i$$31$$44 = i$$31;\n        i$$31 = $i$$31$$44 + 1;\n        continue selectFrom;\n      } else {\n        return BigNatModule$$$table[i$$31];\n      }\n\n      break;\n    }\n  };\n\n  if (bitsRes >= BigNatModule$$$table[0].bigN) {\n    throw new Error(\"Product is huge, around 268435456 bits, beyond quickmul\");\n  } else {\n    return selectFrom(0);\n  }\n}\nexport const BigNatModule$$$bitmask = initialize(BigNatModule$$$baseBits, function (i$$32) {\n  return BigNatModule$$$pow32(2, i$$32) - 1;\n}, Int32Array);\nexport const BigNatModule$$$twopowers = initialize(BigNatModule$$$baseBits, function (i$$33) {\n  return BigNatModule$$$pow32(2, i$$33);\n}, Int32Array);\nexport const BigNatModule$$$twopowersI64 = initialize(BigNatModule$$$baseBits, function (i$$34) {\n  return BigNatModule$$$pow64(fromBits(2, 0, false), i$$34);\n}, Array);\nexport function BigNatModule$$$wordBits(word) {\n  const hi = function hi(k$$8) {\n    hi: while (true) {\n      if (k$$8 === 0) {\n        return 0;\n      } else if ((word & BigNatModule$$$twopowers[k$$8 - 1]) !== 0) {\n        return k$$8 | 0;\n      } else {\n        const $k$$8$$45 = k$$8;\n        k$$8 = $k$$8$$45 - 1;\n        continue hi;\n      }\n\n      break;\n    }\n  };\n\n  return hi(BigNatModule$$$baseBits) | 0;\n}\nexport function BigNatModule$$$bits(u$$6) {\n  if (u$$6.bound === 0) {\n    return 0;\n  } else {\n    return BigNatModule$$$degree(u$$6) * BigNatModule$$$baseBits + BigNatModule$$$wordBits(u$$6.digits[BigNatModule$$$degree(u$$6)]) | 0;\n  }\n}\nexport function BigNatModule$$$extractBits(n$$27, enc, bi) {\n  const bj = bi + enc.bigL - 1 | 0;\n  const biw = ~~(bi / BigNatModule$$$baseBits) | 0;\n  const bjw = ~~(bj / BigNatModule$$$baseBits) | 0;\n\n  if (biw !== bjw) {\n    const x$$47 = (biw < n$$27.bound ? n$$27.digits[biw] : 0) | 0;\n    const y$$17 = (bjw < n$$27.bound ? n$$27.digits[bjw] : 0) | 0;\n    const xbit = bi % BigNatModule$$$baseBits | 0;\n    const nxbits = BigNatModule$$$baseBits - xbit | 0;\n    const x$$48 = x$$47 >> xbit | 0;\n    const y$$18 = y$$17 << nxbits | 0;\n    const x$$49 = x$$48 | y$$18 | 0;\n    const x$$50 = x$$49 & BigNatModule$$$bitmask[enc.bigL] | 0;\n    return x$$50 | 0;\n  } else {\n    const x$$51 = (biw < n$$27.bound ? n$$27.digits[biw] : 0) | 0;\n    const xbit$$1 = bi % BigNatModule$$$baseBits | 0;\n    const x$$52 = x$$51 >> xbit$$1 | 0;\n    const x$$53 = x$$52 & BigNatModule$$$bitmask[enc.bigL] | 0;\n    return x$$53 | 0;\n  }\n}\nexport function BigNatModule$$$encodePoly(enc$$1, n$$28) {\n  const poly = fill(new Uint32Array(enc$$1.bigK), 0, enc$$1.bigK, BigNatModule$002EFFT$002EFp$$$ofInt32(0));\n  const biMax = n$$28.bound * BigNatModule$$$baseBits | 0;\n\n  const encoder = function encoder(i$$38, bi$$1) {\n    encoder: while (true) {\n      if (i$$38 === enc$$1.bigK ? true : bi$$1 > biMax) {} else {\n        const pi = BigNatModule$$$extractBits(n$$28, enc$$1, bi$$1) | 0;\n        poly[i$$38] = BigNatModule$002EFFT$002EFp$$$ofInt32(pi);\n        const i$$39 = i$$38 + 1 | 0;\n        const bi$$2 = bi$$1 + enc$$1.bigL | 0;\n        i$$38 = i$$39;\n        bi$$1 = bi$$2;\n        continue encoder;\n      }\n\n      break;\n    }\n  };\n\n  encoder(0, 0);\n  return poly;\n}\nexport function BigNatModule$$$decodeResultBits(enc$$2, poly$$1) {\n  let n$$29 = 0;\n\n  for (let i$$40 = 0; i$$40 <= poly$$1.length - 1; i$$40++) {\n    if (poly$$1[i$$40] !== BigNatModule$002EFFT$$$mzero) {\n      n$$29 = i$$40;\n    }\n  }\n\n  const rbits = BigNatModule$002EFFT$$$maxBitsInsideFp + enc$$2.bigL * n$$29 + 1 | 0;\n  return rbits + 1 | 0;\n}\nexport function BigNatModule$$$decodePoly(enc$$3, poly$$2) {\n  const rbound$$5 = ~~(BigNatModule$$$decodeResultBits(enc$$3, poly$$2) / BigNatModule$$$baseBits) + 1 | 0;\n  const r$$15 = BigNatModule$$$createN(rbound$$5);\n\n  const evaluate = function evaluate(i$$41, j$$2, d$$3) {\n    evaluate: while (true) {\n      if (i$$41 === enc$$3.bigK) {} else {\n        if (j$$2 >= rbound$$5) {} else {\n          const x$$54 = op_Multiply(fromInteger(BigNatModule$002EFFT$002EFp$$$toInt(poly$$2[i$$41]), false, 2), BigNatModule$$$twopowersI64[d$$3]);\n          BigNatModule$$$contributeArr(r$$15.digits, j$$2, x$$54);\n        }\n\n        const i$$43 = i$$41 + 1 | 0;\n        const d$$4 = d$$3 + enc$$3.bigL | 0;\n        const patternInput$$1 = d$$4 >= BigNatModule$$$baseBits ? [j$$2 + 1, d$$4 - BigNatModule$$$baseBits] : [j$$2, d$$4];\n        i$$41 = i$$43;\n        j$$2 = patternInput$$1[0];\n        d$$3 = patternInput$$1[1];\n        continue evaluate;\n      }\n\n      break;\n    }\n  };\n\n  evaluate(0, 0, 0);\n  return BigNatModule$$$normN(r$$15);\n}\nexport function BigNatModule$$$quickMulUsingFft(u$$7, v$$5) {\n  const bitsRes$$1 = BigNatModule$$$bits(u$$7) + BigNatModule$$$bits(v$$5) | 0;\n  const enc$$4 = BigNatModule$$$encodingGivenResultBits(bitsRes$$1);\n  const upoly = BigNatModule$$$encodePoly(enc$$4, u$$7);\n  const vpoly = BigNatModule$$$encodePoly(enc$$4, v$$5);\n  const rpoly = BigNatModule$002EFFT$$$computeFftPaddedPolynomialProduct(enc$$4.bigK, enc$$4.k, upoly, vpoly);\n  const r$$17 = BigNatModule$$$decodePoly(enc$$4, rpoly);\n  return BigNatModule$$$normN(r$$17);\n}\nexport const BigNatModule$$$minDigitsKaratsuba = 16;\nexport function BigNatModule$$$recMulKaratsuba(mul, p$$19, q$$16) {\n  const bp$$1 = p$$19.bound | 0;\n  const bq = q$$16.bound | 0;\n  const bmax = BigNatModule$$$maxInt(bp$$1, bq) | 0;\n\n  if (bmax > BigNatModule$$$minDigitsKaratsuba) {\n    const k$$9 = ~~(bmax / 2) | 0;\n    const a0 = BigNatModule$$$restrictTo(k$$9, p$$19);\n    const a1 = BigNatModule$$$shiftDown(k$$9, p$$19);\n    const b0 = BigNatModule$$$restrictTo(k$$9, q$$16);\n    const b1 = BigNatModule$$$shiftDown(k$$9, q$$16);\n    const q0 = mul(a0, b0);\n    const q1 = mul(BigNatModule$$$add(a0, a1), BigNatModule$$$add(b0, b1));\n    const q2 = mul(a1, b1);\n    const p0 = q0;\n    const p1 = BigNatModule$$$sub(q1, BigNatModule$$$add(q0, q2));\n    const p2 = q2;\n    const r$$18 = BigNatModule$$$add(p0, BigNatModule$$$shiftUp(k$$9, BigNatModule$$$add(p1, BigNatModule$$$shiftUp(k$$9, p2))));\n    return r$$18;\n  } else {\n    return BigNatModule$$$mulSchoolBook(p$$19, q$$16);\n  }\n}\nexport function BigNatModule$$$mulKaratsuba(x$$55, y$$19) {\n  return BigNatModule$$$recMulKaratsuba(BigNatModule$$$mulKaratsuba, x$$55, y$$19);\n}\nexport const BigNatModule$$$productDigitsUpperSchoolBook = ~~(64000 / BigNatModule$$$baseBits);\nexport const BigNatModule$$$singleDigitForceSchoolBook = ~~(32000 / BigNatModule$$$baseBits);\nexport const BigNatModule$$$productDigitsUpperFft = ~~(BigNatModule$$$table[0].bigN / BigNatModule$$$baseBits);\nexport function BigNatModule$$$mul(p$$20, q$$17) {\n  return BigNatModule$$$mulSchoolBook(p$$20, q$$17);\n}\nexport function BigNatModule$$$scaleSubInPlace(x$$57, f, a$$5, n$$30) {\n  const invariant = function invariant(tupledArg) {};\n\n  const xres = x$$57;\n  const patternInput$$2 = [x$$57.digits, BigNatModule$$$degree(x$$57)];\n  const patternInput$$3 = [a$$5.digits, BigNatModule$$$degree(a$$5)];\n  const f$$1 = fromInteger(f, false, 2);\n  let j$$4 = 0;\n  let z$$7 = op_Multiply(f$$1, fromInteger(patternInput$$3[0][0], false, 2));\n\n  while (compare(z$$7, fromBits(0, 0, false)) > 0 ? true : j$$4 < patternInput$$3[1]) {\n    if (j$$4 > patternInput$$2[1]) {\n      throw new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\");\n    }\n\n    invariant([z$$7, j$$4, n$$30]);\n    let zLo = ~~toInt(op_BitwiseAnd(z$$7, BigNatModule$$$baseMaski64)) | 0;\n    let zHi = op_Division(z$$7, BigNatModule$$$baseNi64);\n\n    if (zLo <= patternInput$$2[0][j$$4 + n$$30]) {\n      patternInput$$2[0][j$$4 + n$$30] = patternInput$$2[0][j$$4 + n$$30] - zLo;\n    } else {\n      patternInput$$2[0][j$$4 + n$$30] = patternInput$$2[0][j$$4 + n$$30] + (BigNatModule$$$baseN - zLo);\n      zHi = op_Addition(zHi, fromBits(1, 0, false));\n    }\n\n    if (j$$4 < patternInput$$3[1]) {\n      z$$7 = op_Addition(zHi, op_Multiply(f$$1, fromInteger(patternInput$$3[0][j$$4 + 1], false, 2)));\n    } else {\n      z$$7 = zHi;\n    }\n\n    j$$4 = j$$4 + 1;\n  }\n\n  BigNatModule$$$normN(xres), null;\n}\nexport function BigNatModule$$$scaleSub(x$$61, f$$2, a$$7, n$$31) {\n  const freshx = BigNatModule$$$add(x$$61, BigNatModule$$$zero);\n  BigNatModule$$$scaleSubInPlace(freshx, f$$2, a$$7, n$$31);\n  return BigNatModule$$$normN(freshx);\n}\nexport function BigNatModule$$$scaleAddInPlace(x$$62, f$$3, a$$8, n$$32) {\n  const invariant$$1 = function invariant$$1(tupledArg$$1) {};\n\n  const xres$$1 = x$$62;\n  const patternInput$$4 = [x$$62.digits, BigNatModule$$$degree(x$$62)];\n  const patternInput$$5 = [a$$8.digits, BigNatModule$$$degree(a$$8)];\n  const f$$4 = fromInteger(f$$3, false, 2);\n  let j$$5 = 0;\n  let z$$8 = op_Multiply(f$$4, fromInteger(patternInput$$5[0][0], false, 2));\n\n  while (compare(z$$8, fromBits(0, 0, false)) > 0 ? true : j$$5 < patternInput$$5[1]) {\n    if (j$$5 > patternInput$$4[1]) {\n      throw new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\");\n    }\n\n    invariant$$1([z$$8, j$$5, n$$32]);\n    let zLo$$1 = ~~toInt(op_BitwiseAnd(z$$8, BigNatModule$$$baseMaski64)) | 0;\n    let zHi$$1 = op_Division(z$$8, BigNatModule$$$baseNi64);\n\n    if (zLo$$1 < BigNatModule$$$baseN - patternInput$$4[0][j$$5 + n$$32]) {\n      patternInput$$4[0][j$$5 + n$$32] = patternInput$$4[0][j$$5 + n$$32] + zLo$$1;\n    } else {\n      patternInput$$4[0][j$$5 + n$$32] = zLo$$1 - (BigNatModule$$$baseN - patternInput$$4[0][j$$5 + n$$32]);\n      zHi$$1 = op_Addition(zHi$$1, fromBits(1, 0, false));\n    }\n\n    if (j$$5 < patternInput$$5[1]) {\n      z$$8 = op_Addition(zHi$$1, op_Multiply(f$$4, fromInteger(patternInput$$5[0][j$$5 + 1], false, 2)));\n    } else {\n      z$$8 = zHi$$1;\n    }\n\n    j$$5 = j$$5 + 1;\n  }\n\n  BigNatModule$$$normN(xres$$1), null;\n}\nexport function BigNatModule$$$scaleAdd(x$$66, f$$5, a$$10, n$$33) {\n  const freshx$$1 = BigNatModule$$$add(x$$66, BigNatModule$$$zero);\n  BigNatModule$$$scaleAddInPlace(freshx$$1, f$$5, a$$10, n$$33);\n  return BigNatModule$$$normN(freshx$$1);\n}\nexport function BigNatModule$$$removeFactor(x$$67, a$$11, n$$34) {\n  const patternInput$$6 = [BigNatModule$$$degree(a$$11), BigNatModule$$$degree(x$$67)];\n\n  if (patternInput$$6[1] < patternInput$$6[0] + n$$34) {\n    return 0;\n  } else {\n    const patternInput$$7 = [a$$11.digits, x$$67.digits];\n    let f$$6;\n\n    if (patternInput$$6[0] === 0) {\n      if (patternInput$$6[1] === n$$34) {\n        f$$6 = ~~(patternInput$$7[1][n$$34] / patternInput$$7[0][0]);\n      } else {\n        const f64 = op_Division(op_Addition(op_Multiply(fromInteger(patternInput$$7[1][patternInput$$6[1]], false, 2), BigNatModule$$$baseNi64), fromInteger(patternInput$$7[1][patternInput$$6[1] - 1], false, 2)), fromInteger(patternInput$$7[0][0], false, 2));\n        f$$6 = ~~toInt(f64);\n      }\n    } else if (patternInput$$6[1] === patternInput$$6[0] + n$$34) {\n      f$$6 = ~~(patternInput$$7[1][patternInput$$6[1]] / (patternInput$$7[0][patternInput$$6[0]] + 1));\n    } else {\n      const f64$$1 = op_Division(op_Addition(op_Multiply(fromInteger(patternInput$$7[1][patternInput$$6[1]], false, 2), BigNatModule$$$baseNi64), fromInteger(patternInput$$7[1][patternInput$$6[1] - 1], false, 2)), op_Addition(fromInteger(patternInput$$7[0][patternInput$$6[0]], false, 2), fromBits(1, 0, false)));\n      f$$6 = ~~toInt(f64$$1);\n    }\n\n    if (f$$6 === 0) {\n      const lte = BigNatModule$$$shiftCompare(a$$11, n$$34, x$$67, 0) !== 1;\n\n      if (lte) {\n        return 1;\n      } else {\n        return 0;\n      }\n    } else {\n      return f$$6 | 0;\n    }\n  }\n}\nexport function BigNatModule$$$divmod(b$$7, a$$12) {\n  if (BigNatModule$$$isZero(a$$12)) {\n    throw new Error();\n  } else if (BigNatModule$$$degree(b$$7) < BigNatModule$$$degree(a$$12)) {\n    return [BigNatModule$$$zero, b$$7];\n  } else {\n    const x$$68 = BigNatModule$$$copyN(b$$7);\n    const d$$6 = BigNatModule$$$createN(BigNatModule$$$degree(b$$7) - BigNatModule$$$degree(a$$12) + 1 + 1);\n    let p$$21 = BigNatModule$$$degree(b$$7) | 0;\n    const m$$2 = BigNatModule$$$degree(a$$12) | 0;\n    let n$$35 = p$$21 - m$$2 | 0;\n\n    const Invariant = function Invariant(tupledArg$$2) {};\n\n    let finished = false;\n\n    while (!finished) {\n      Invariant([d$$6, x$$68, n$$35, p$$21]);\n      const f$$7 = BigNatModule$$$removeFactor(x$$68, a$$12, n$$35) | 0;\n\n      if (f$$7 > 0) {\n        BigNatModule$$$scaleSubInPlace(x$$68, f$$7, a$$12, n$$35);\n        BigNatModule$$$scaleAddInPlace(d$$6, f$$7, BigNatModule$$$one, n$$35);\n        Invariant([d$$6, x$$68, n$$35, p$$21]);\n      } else {\n        finished = f$$7 === 0 ? n$$35 === 0 : false;\n\n        if (!finished) {\n          if (p$$21 === m$$2 + n$$35) {\n            Invariant([d$$6, x$$68, n$$35 - 1, p$$21]);\n            n$$35 = n$$35 - 1;\n          } else {\n            Invariant([d$$6, x$$68, n$$35 - 1, p$$21 - 1]);\n            n$$35 = n$$35 - 1;\n            p$$21 = p$$21 - 1;\n          }\n        }\n      }\n    }\n\n    return [BigNatModule$$$normN(d$$6), BigNatModule$$$normN(x$$68)];\n  }\n}\nexport function BigNatModule$$$div(b$$8, a$$13) {\n  return BigNatModule$$$divmod(b$$8, a$$13)[0];\n}\nexport function BigNatModule$$$rem(b$$9, a$$14) {\n  return BigNatModule$$$divmod(b$$9, a$$14)[1];\n}\nexport function BigNatModule$$$bitAnd(a$$15, b$$10) {\n  const rbound$$6 = BigNatModule$$$minInt(a$$15.bound, b$$10.bound) | 0;\n  const r$$19 = BigNatModule$$$createN(rbound$$6);\n\n  for (let i$$44 = 0; i$$44 <= r$$19.bound - 1; i$$44++) {\n    r$$19.digits[i$$44] = a$$15.digits[i$$44] & b$$10.digits[i$$44];\n  }\n\n  return BigNatModule$$$normN(r$$19);\n}\nexport function BigNatModule$$$bitOr(a$$16, b$$11) {\n  const rbound$$7 = BigNatModule$$$maxInt(a$$16.bound, b$$11.bound) | 0;\n  const r$$20 = BigNatModule$$$createN(rbound$$7);\n\n  for (let i$$45 = 0; i$$45 <= a$$16.bound - 1; i$$45++) {\n    r$$20.digits[i$$45] = r$$20.digits[i$$45] | a$$16.digits[i$$45];\n  }\n\n  for (let i$$46 = 0; i$$46 <= b$$11.bound - 1; i$$46++) {\n    r$$20.digits[i$$46] = r$$20.digits[i$$46] | b$$11.digits[i$$46];\n  }\n\n  return BigNatModule$$$normN(r$$20);\n}\nexport function BigNatModule$$$bitXor(a$$17, b$$12) {\n  const rbound$$8 = BigNatModule$$$maxInt(a$$17.bound, b$$12.bound) | 0;\n  const r$$21 = BigNatModule$$$createN(rbound$$8);\n\n  for (let i$$47 = 0; i$$47 <= a$$17.bound - 1; i$$47++) {\n    r$$21.digits[i$$47] = r$$21.digits[i$$47] ^ a$$17.digits[i$$47];\n  }\n\n  for (let i$$48 = 0; i$$48 <= b$$12.bound - 1; i$$48++) {\n    r$$21.digits[i$$48] = r$$21.digits[i$$48] ^ b$$12.digits[i$$48];\n  }\n\n  return BigNatModule$$$normN(r$$21);\n}\nexport function BigNatModule$$$hcf(a$$18, b$$13) {\n  const hcfloop = function hcfloop(a$$19, b$$14) {\n    hcfloop: while (true) {\n      if (BigNatModule$$$equal(BigNatModule$$$zero, a$$19)) {\n        return b$$14;\n      } else {\n        const patternInput$$8 = BigNatModule$$$divmod(b$$14, a$$19);\n        const $a$$19$$49 = a$$19;\n        a$$19 = patternInput$$8[1];\n        b$$14 = $a$$19$$49;\n        continue hcfloop;\n      }\n\n      break;\n    }\n  };\n\n  if (BigNatModule$$$lt(a$$18, b$$13)) {\n    return hcfloop(a$$18, b$$13);\n  } else {\n    return hcfloop(b$$13, a$$18);\n  }\n}\nexport const BigNatModule$$$two = BigNatModule$$$embed(2);\nexport function BigNatModule$$$powi(x$$69, n$$36) {\n  const power = function power(acc$$2, x$$70, n$$37) {\n    power: while (true) {\n      if (n$$37 === 0) {\n        return acc$$2;\n      } else if (n$$37 % 2 === 0) {\n        const $acc$$2$$50 = acc$$2;\n        const $n$$37$$52 = n$$37;\n        const $x$$70$$51 = x$$70;\n        acc$$2 = $acc$$2$$50;\n        x$$70 = BigNatModule$$$mul($x$$70$$51, $x$$70$$51);\n        n$$37 = ~~($n$$37$$52 / 2);\n        continue power;\n      } else {\n        const $acc$$2$$53 = acc$$2;\n        const $n$$37$$55 = n$$37;\n        const $x$$70$$54 = x$$70;\n        acc$$2 = BigNatModule$$$mul($x$$70$$54, $acc$$2$$53);\n        x$$70 = BigNatModule$$$mul($x$$70$$54, $x$$70$$54);\n        n$$37 = ~~($n$$37$$55 / 2);\n        continue power;\n      }\n\n      break;\n    }\n  };\n\n  return power(BigNatModule$$$one, x$$69, n$$36);\n}\nexport function BigNatModule$$$pow(x$$71, n$$38) {\n  const power$$1 = function power$$1(acc$$3, x$$72, n$$39) {\n    power$$1: while (true) {\n      if (BigNatModule$$$isZero(n$$39)) {\n        return acc$$3;\n      } else {\n        const patternInput$$9 = BigNatModule$$$divmod(n$$39, BigNatModule$$$two);\n\n        if (BigNatModule$$$isZero(patternInput$$9[1])) {\n          const $acc$$3$$56 = acc$$3;\n          const $x$$72$$57 = x$$72;\n          acc$$3 = $acc$$3$$56;\n          x$$72 = BigNatModule$$$mul($x$$72$$57, $x$$72$$57);\n          n$$39 = patternInput$$9[0];\n          continue power$$1;\n        } else {\n          const $acc$$3$$58 = acc$$3;\n          const $x$$72$$59 = x$$72;\n          acc$$3 = BigNatModule$$$mul($x$$72$$59, $acc$$3$$58);\n          x$$72 = BigNatModule$$$mul($x$$72$$59, $x$$72$$59);\n          n$$39 = patternInput$$9[0];\n          continue power$$1;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return power$$1(BigNatModule$$$one, x$$71, n$$38);\n}\nexport function BigNatModule$$$toFloat(n$$40) {\n  const basef = BigNatModule$$$baseN;\n\n  const evalFloat = function evalFloat(acc$$4, k$$10, i$$49) {\n    evalFloat: while (true) {\n      if (i$$49 === n$$40.bound) {\n        return acc$$4;\n      } else {\n        const $acc$$4$$60 = acc$$4;\n        const $i$$49$$62 = i$$49;\n        const $k$$10$$61 = k$$10;\n        acc$$4 = $acc$$4$$60 + $k$$10$$61 * n$$40.digits[$i$$49$$62];\n        k$$10 = $k$$10$$61 * basef;\n        i$$49 = $i$$49$$62 + 1;\n        continue evalFloat;\n      }\n\n      break;\n    }\n  };\n\n  return evalFloat(0, 1, 0);\n}\nexport function BigNatModule$$$ofInt32(n$$41) {\n  return BigNatModule$$$embed(n$$41);\n}\nexport function BigNatModule$$$ofInt64(n$$42) {\n  return BigNatModule$$$embed64(n$$42);\n}\nexport function BigNatModule$$$toUInt32(n$$43) {\n  const matchValue = n$$43.bound | 0;\n\n  switch (matchValue) {\n    case 0:\n      {\n        return 0;\n      }\n\n    case 1:\n      {\n        return n$$43.digits[0] >>> 0;\n      }\n\n    case 2:\n      {\n        const patternInput$$10 = [n$$43.digits[0], n$$43.digits[1]];\n\n        if (patternInput$$10[1] > BigNatModule$$$baseMask32B) {\n          throw new Error();\n        }\n\n        return ((patternInput$$10[0] & BigNatModule$$$baseMask32A) >>> 0) + ((patternInput$$10[1] & BigNatModule$$$baseMask32B) >>> 0 << BigNatModule$$$baseShift32B >>> 0);\n      }\n\n    default:\n      {\n        throw new Error();\n      }\n  }\n}\nexport function BigNatModule$$$toUInt64(n$$44) {\n  const matchValue$$1 = n$$44.bound | 0;\n\n  switch (matchValue$$1) {\n    case 0:\n      {\n        return fromBits(0, 0, true);\n      }\n\n    case 1:\n      {\n        return fromInteger(n$$44.digits[0], true, 2);\n      }\n\n    case 2:\n      {\n        const patternInput$$11 = [n$$44.digits[0], n$$44.digits[1]];\n        return op_Addition(fromInteger(patternInput$$11[0] & BigNatModule$$$baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput$$11[1] & BigNatModule$$$baseMask64B, true, 2), BigNatModule$$$baseShift64B));\n      }\n\n    case 3:\n      {\n        const patternInput$$12 = [n$$44.digits[0], n$$44.digits[1], n$$44.digits[2]];\n\n        if (patternInput$$12[2] > BigNatModule$$$baseMask64C) {\n          throw new Error();\n        }\n\n        return op_Addition(op_Addition(fromInteger(patternInput$$12[0] & BigNatModule$$$baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput$$12[1] & BigNatModule$$$baseMask64B, true, 2), BigNatModule$$$baseShift64B)), op_LeftShift(fromInteger(patternInput$$12[2] & BigNatModule$$$baseMask64C, true, 2), BigNatModule$$$baseShift64C));\n      }\n\n    default:\n      {\n        throw new Error();\n      }\n  }\n}\nexport function BigNatModule$$$toString(n$$45) {\n  const degn = BigNatModule$$$degree(n$$45) | 0;\n\n  const route = function route(prior, k$$11, ten2k) {\n    route: while (true) {\n      if (BigNatModule$$$degree(ten2k) > degn) {\n        return new List([k$$11, ten2k], prior);\n      } else {\n        const $k$$11$$64 = k$$11;\n        const $prior$$63 = prior;\n        const $ten2k$$65 = ten2k;\n        prior = new List([$k$$11$$64, $ten2k$$65], $prior$$63);\n        k$$11 = $k$$11$$64 + 1;\n        ten2k = BigNatModule$$$mul($ten2k$$65, $ten2k$$65);\n        continue route;\n      }\n\n      break;\n    }\n  };\n\n  const kten2ks = route(new List(), 0, BigNatModule$$$embed(10));\n\n  const collect = function collect(isLeading, digits, n$$46, _arg1$$3) {\n    if (_arg1$$3.tail != null) {\n      const ten2k$$1 = _arg1$$3.head[1];\n      const prior$$1 = _arg1$$3.tail;\n      const patternInput$$13 = BigNatModule$$$divmod(n$$46, ten2k$$1);\n\n      if (isLeading ? BigNatModule$$$isZero(patternInput$$13[0]) : false) {\n        const digits$$1 = collect(isLeading, digits, patternInput$$13[1], prior$$1);\n        return digits$$1;\n      } else {\n        const digits$$2 = collect(false, digits, patternInput$$13[1], prior$$1);\n        const digits$$3 = collect(isLeading, digits$$2, patternInput$$13[0], prior$$1);\n        return digits$$3;\n      }\n    } else {\n      const n$$47 = BigNatModule$$$eval32(n$$46) | 0;\n\n      if (isLeading ? n$$47 === 0 : false) {\n        return digits;\n      } else {\n        return new List(int32ToString(n$$47), digits);\n      }\n    }\n  };\n\n  const prior$$2 = kten2ks;\n  const digits$$4 = collect(true, new List(), n$$45, prior$$2);\n\n  if (digits$$4.tail == null) {\n    return \"0\";\n  } else {\n    return join(\"\", ...ofList(digits$$4, Array));\n  }\n}\nexport function BigNatModule$$$ofString(str) {\n  const len = str.length | 0;\n\n  if (isNullOrEmpty(str)) {\n    throw new Error(\"empty string\\\\nParameter name: str\");\n  }\n\n  const ten = BigNatModule$$$embed(10);\n\n  const build = function build(acc$$5, i$$50) {\n    build: while (true) {\n      if (i$$50 === len) {\n        return acc$$5;\n      } else {\n        const c$$12 = str[i$$50];\n        const d$$7 = c$$12.charCodeAt(0) - \"0\".charCodeAt(0) | 0;\n\n        if (0 <= d$$7 ? d$$7 <= 9 : false) {\n          const $acc$$5$$66 = acc$$5;\n          const $i$$50$$67 = i$$50;\n          acc$$5 = BigNatModule$$$add(BigNatModule$$$mul(ten, $acc$$5$$66), BigNatModule$$$embed(d$$7));\n          i$$50 = $i$$50$$67 + 1;\n          continue build;\n        } else {\n          throw new Error();\n        }\n      }\n\n      break;\n    }\n  };\n\n  return build(BigNatModule$$$embed(0), 0);\n}\nexport function BigNatModule$$$isSmall(n$$48) {\n  return n$$48.bound <= 1;\n}\nexport function BigNatModule$$$getSmall(n$$49) {\n  if (0 < n$$49.bound) {\n    return n$$49.digits[0] | 0;\n  } else {\n    return 0;\n  }\n}\nexport function BigNatModule$$$factorial(n$$50) {\n  const productR = function productR(a$$20, b$$15) {\n    if (BigNatModule$$$equal(a$$20, b$$15)) {\n      return a$$20;\n    } else {\n      const m$$3 = BigNatModule$$$div(BigNatModule$$$add(a$$20, b$$15), BigNatModule$$$ofInt32(2));\n      return BigNatModule$$$mul(productR(a$$20, m$$3), productR(BigNatModule$$$add(m$$3, BigNatModule$$$one), b$$15));\n    }\n  };\n\n  return productR(BigNatModule$$$one, n$$50);\n}","// https://github.com/MikeMcl/big.js/blob/01b3ce3a6b0ba7b42442ea48ec4ffc88d1669ec4/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n};\n/*\n *  big.js v5.2.2\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n *  https://github.com/MikeMcl/big.js/LICENCE\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -29, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big.\n * (This limit is not enforced or checked.)\n */\nPE = 29, // 0 to 1000000\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n *\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n            normalize(x);\n        }\n        else {\n            parse(x, n);\n        }\n        /*\n         * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\n         * points to Object.\n         */\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.version = '5.2.2';\n    return Big;\n}\nfunction normalize(x) {\n    x = round(x, DP, 0);\n    if (x.c.length > 1 && !x.c[0]) {\n        let i = x.c.findIndex(x => x);\n        x.c = x.c.slice(i);\n        x.e = x.e - i;\n    }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    // Minus zero?\n    if (n === 0 && 1 / n < 0)\n        n = '-0';\n    else if (!NUMERIC.test(n += ''))\n        throw Error(INVALID + 'number');\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros before decimal point.\n    for (i = 0; i < e && i < nl && n.charAt(i) == '0';)\n        ++i;\n    // older version (ignores decimal point).\n    // // Determine leading zeros.\n    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading zeros\n        for (e = 0; i < nl;)\n            x.c[e++] = +n.charAt(i++);\n        // older version (doesn't keep trailing zeroes).\n        // // Determine trailing zeros.\n        // for (; nl > 0 && n.charAt(--nl) == '0';);\n        // // Convert string to array of digits without leading/trailing zeros.\n        // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n    x = round(x, Big.DP, Big.RM);\n    return x;\n}\n/*\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\n * Called by stringify, P.div, P.round and P.sqrt.\n *\n * x {Big} The Big to round.\n * dp {number} Integer, 0 to MAX_DP inclusive.\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, dp, rm, more) {\n    var xc = x.c, i = x.e + dp + 1;\n    if (i < xc.length) {\n        if (rm === 1) {\n            // xc[i] is the digit after the digit that may be rounded up.\n            more = xc[i] >= 5;\n        }\n        else if (rm === 2) {\n            more = xc[i] > 5 || xc[i] == 5 &&\n                (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n        }\n        else if (rm === 3) {\n            more = more || !!xc[0];\n        }\n        else {\n            more = false;\n            if (rm !== 0)\n                throw Error(INVALID_RM);\n        }\n        if (i < 1) {\n            xc.length = 1;\n            if (more) {\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                x.e = -dp;\n                xc[0] = 1;\n            }\n            else {\n                // Zero.\n                xc[0] = x.e = 0;\n            }\n        }\n        else {\n            // Remove any digits after the required decimal places.\n            xc.length = i--;\n            // Round up?\n            if (more) {\n                // Rounding up may mean the previous digit has to be rounded up.\n                for (; ++xc[i] > 9;) {\n                    xc[i] = 0;\n                    if (!i--) {\n                        ++x.e;\n                        xc.unshift(1);\n                    }\n                }\n            }\n            // Remove trailing zeros.\n            for (i = xc.length; !xc[--i];)\n                xc.pop();\n        }\n    }\n    else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n        throw Error(INVALID_RM);\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n *\n * x {Big}\n * id? {number} Caller id.\n *         1 toExponential\n *         2 toFixed\n *         3 toPrecision\n *         4 valueOf\n * n? {number|undefined} Caller's argument.\n * k? {number|undefined}\n */\nfunction stringify(x, id, n, k) {\n    var e, s, Big = x.constructor, z = !x.c[0];\n    if (n !== UNDEFINED) {\n        if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n            throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n        }\n        x = new Big(x);\n        // The index of the digit that may be rounded up.\n        n = k - x.e;\n        // Round?\n        if (x.c.length > ++k)\n            round(x, n, Big.RM);\n        // toFixed: recalculate k as x.e may have changed if value rounded up.\n        if (id == 2)\n            k = x.e + n + 1;\n        // Append zeros?\n        for (; x.c.length < k;)\n            x.c.push(0);\n    }\n    e = x.e;\n    s = x.c.join('');\n    n = s.length;\n    // Exponential notation?\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n)\n            for (e -= n; e--;)\n                s += '0';\n        else if (e < n)\n            s = s.slice(0, e) + '.' + s.slice(e);\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n*/\nP.cmp = function (y) {\n    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    // Compare digit by digit.\n    j = Math.max(xc.length, yc.length);\n    for (i = 0; i < j; i++) {\n        k = i < xc.length ? xc[i] : 0;\n        l = i < yc.length ? yc[i] : 0;\n        if (k != l)\n            return k > l ^ isneg ? 1 : -1;\n    }\n    return 0;\n    // old version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)\n    // j = (k = xc.length) < (l = yc.length) ? k : l;\n    // // Compare digit by digit.\n    // for (i = -1; ++i < j;) {\n    //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    // }\n    // // Compare lengths.\n    // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, // dividend\n    b = y.c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    // Divisor is zero?\n    if (!b[0])\n        throw Error(DIV_BY_ZERO);\n    // Dividend is 0? Return +-0.\n    if (!a[0])\n        return new Big(k * 0);\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n    q.s = k;\n    k = d < 0 ? 0 : d;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n    }\n    // Round?\n    if (qi > d)\n        round(q, dp, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return !this.cmp(y);\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        // y is non-zero? x is non-zero? Or both are zero.\n        return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    if (!y.c[0])\n        throw Error(DIV_BY_ZERO);\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var t, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\n    if (!xc[0] || !yc[0])\n        return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (a = xe - ye) {\n        if (a > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            a = -a;\n            t = xc;\n        }\n        t.reverse();\n        for (; a--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    a = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (b = 0; a; xc[a] %= 10)\n        b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (b) {\n        xc.unshift(b);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (a = xc.length; xc[--a] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var Big = this.constructor, x = new Big(this), y = new Big(1), one = new Big(1), isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER)\n        throw Error(INVALID + 'exponent');\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\n * multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n * If rm is not specified, use Big.RM.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\n */\nP.round = function (dp, rm) {\n    var Big = this.constructor;\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big(0.5);\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0)\n        throw Error(NAME + 'No square root');\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s);\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, Big.DP -= 4, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0])\n        return new Big(y.s * 0);\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = (c[j] + b) % 10;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n */\nP.toExponential = function (dp) {\n    return stringify(this, 1, dp, dp);\n};\n/*\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp) {\n    return stringify(this, 2, dp, this.e + dp);\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Integer, 1 to MAX_DP inclusive.\n */\nP.toPrecision = function (sd) {\n    return stringify(this, 3, sd, sd - 1);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toString = function () {\n    return stringify(this);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = P.toJSON = function () {\n    return stringify(this, 4);\n};\n// Export\nexport var Big = _Big_();\nexport default Big;\n","import Decimal from \"./lib/big\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport const add = op_Addition;\nexport const subtract = op_Subtraction;\nexport const multiply = op_Multiply;\nexport const divide = op_Division;\nexport const remainder = op_Modulus;\nexport const negate = op_UnaryNegation;\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str) {\n    try {\n        return [true, new Decimal(str.trim())];\n    }\n    catch (_a) {\n        return [false, get_Zero];\n    }\n}\nexport function parse(str) {\n    const [ok, value] = tryParse(str);\n    if (ok) {\n        return value;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (let d = 0; d < dec.length; d++) {\n        let value = dec[d];\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + value | 0;\n            hex[i] = digit & 0xF;\n            value = digit >> 4;\n        }\n        if (value !== 0) {\n            hex[hexCount++] = value;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (let d = hex.length - 1; d >= 0; d--) {\n        let carry = hex[d];\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits, bitSize);\n    scale = scale & 0x7F;\n    const big = new Decimal(0);\n    big.c = Array.from(decDigits.reverse());\n    big.e = decDigits.length - scale - 1;\n    big.s = isNegative ? -1 : 1;\n    const d = new Decimal(big);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const dotPos = decStr.indexOf(\".\");\n    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n    const signExp = ((scale & 0x7F) << 16) | (d.s < 0 ? 0x80000000 : 0);\n    return [low, mid, high, signExp];\n}\n","import { declare, Record } from \"../Types.js\";\nimport { type } from \"../Reflection.js\";\nimport { BigNatModule$$$factorial as BigNatModule$0024$0024$0024factorial, BigNatModule$$$ofString as BigNatModule$0024$0024$0024ofString, BigNatModule$$$toFloat as BigNatModule$0024$0024$0024toFloat, BigNatModule$$$toUInt64 as BigNatModule$0024$0024$0024toUInt64, BigNatModule$$$toUInt32 as BigNatModule$0024$0024$0024toUInt32, BigNatModule$$$pow as BigNatModule$0024$0024$0024pow, BigNatModule$$$rem as BigNatModule$0024$0024$0024rem, BigNatModule$$$two as BigNatModule$0024$0024$0024two, BigNatModule$$$lte as BigNatModule$0024$0024$0024lte, BigNatModule$$$hcf as BigNatModule$0024$0024$0024hcf, BigNatModule$$$bitXor as BigNatModule$0024$0024$0024bitXor, BigNatModule$$$bitOr as BigNatModule$0024$0024$0024bitOr, BigNatModule$$$bitAnd as BigNatModule$0024$0024$0024bitAnd, BigNatModule$$$divmod as BigNatModule$0024$0024$0024divmod, BigNatModule$$$mul as BigNatModule$0024$0024$0024mul, BigNatModule$$$isOne as BigNatModule$0024$0024$0024isOne, BigNatModule$$$sub as BigNatModule$0024$0024$0024sub, BigNatModule$$$gte as BigNatModule$0024$0024$0024gte, BigNatModule$$$scale as BigNatModule$0024$0024$0024scale, BigNatModule$$$add as BigNatModule$0024$0024$0024add, BigNatModule$$$one as BigNatModule$0024$0024$0024one, BigNatModule$$$ofInt64 as BigNatModule$0024$0024$0024ofInt64, BigNatModule$$$toString as BigNatModule$0024$0024$0024toString, BigNatModule$$$hash as BigNatModule$0024$0024$0024hash, BigNatModule$$$gt as BigNatModule$0024$0024$0024gt, BigNatModule$$$lt as BigNatModule$0024$0024$0024lt, BigNatModule$$$isZero as BigNatModule$0024$0024$0024isZero, BigNatModule$$$equal as BigNatModule$0024$0024$0024equal, BigNatModule$$$getSmall as BigNatModule$0024$0024$0024getSmall, BigNatModule$$$isSmall as BigNatModule$0024$0024$0024isSmall, BigNatModule$$$ofInt32 as BigNatModule$0024$0024$0024ofInt32 } from \"./n\";\nimport { initialize } from \"../Array.js\";\nimport { op_Addition, op_Multiply, fromValue, equals, compare, fromBits, op_UnaryNegation, fromInteger } from \"../Long.js\";\nimport { op_UnaryNegation_Int32 } from \"../Int32.js\";\nimport Decimal from \"../Decimal.js\";\nexport const BigInteger = declare(function BigInt_BigInteger(signInt, v) {\n  const $this$$1 = this;\n  $this$$1.signInt = signInt;\n  $this$$1.v = v;\n}, Record);\nexport function BigInteger$reflection() {\n  return type(\"BigInt.BigInteger\");\n}\nexport function BigInteger$$$$002Ector$$Z2BE94A1(signInt, v) {\n  return this instanceof BigInteger ? BigInteger.call(this, signInt, v) : new BigInteger(signInt, v);\n}\n\n(function BigInteger$$$$002Ecctor() {\n  BigInteger.smallLim = 4096;\n  BigInteger.smallPosTab = initialize(BigInteger.smallLim, BigNatModule$0024$0024$0024ofInt32, Array);\n  BigInteger.one = BigInteger$$$$002Ector$$Z524259A4(1);\n  BigInteger.two = BigInteger$$$$002Ector$$Z524259A4(2);\n  BigInteger.zero = BigInteger$$$$002Ector$$Z524259A4(0);\n})();\n\nexport function BigInteger$$$nat$$Z67CCE57D(n$$1) {\n  if (BigNatModule$0024$0024$0024isSmall(n$$1) ? BigNatModule$0024$0024$0024getSmall(n$$1) < BigInteger.smallLim : false) {\n    return BigInteger.smallPosTab[BigNatModule$0024$0024$0024getSmall(n$$1)];\n  } else {\n    return n$$1;\n  }\n}\nexport function BigInteger$$$create$$Z2BE94A1(s, n$$2) {\n  return BigInteger$$$$002Ector$$Z2BE94A1(s, BigInteger$$$nat$$Z67CCE57D(n$$2));\n}\nexport function BigInteger$$$posn$$Z67CCE57D(n$$3) {\n  return BigInteger$$$$002Ector$$Z2BE94A1(1, BigInteger$$$nat$$Z67CCE57D(n$$3));\n}\nexport function BigInteger$$$negn$$Z67CCE57D(n$$4) {\n  return BigInteger$$$$002Ector$$Z2BE94A1(-1, BigInteger$$$nat$$Z67CCE57D(n$$4));\n}\nexport function BigInteger$$get_Sign(x) {\n  if (BigInteger$$get_IsZero(x)) {\n    return 0;\n  } else {\n    return x.signInt | 0;\n  }\n}\nexport function BigInteger$$get_SignInt(x$$1) {\n  return x$$1.signInt;\n}\nexport function BigInteger$$get_V(x$$2) {\n  return x$$2.v;\n}\nexport function BigInteger$$$op_Equality$$56F059C0(x$$3, y) {\n  const matchValue = [BigInteger$$get_SignInt(x$$3), BigInteger$$get_SignInt(y)];\n  var $target$$2;\n\n  if (matchValue[0] === -1) {\n    if (matchValue[1] === -1) {\n      $target$$2 = 1;\n    } else if (matchValue[1] === 0) {\n      $target$$2 = 8;\n    } else if (matchValue[1] === 1) {\n      $target$$2 = 3;\n    } else {\n      $target$$2 = 9;\n    }\n  } else if (matchValue[0] === 0) {\n    if (matchValue[1] === -1) {\n      $target$$2 = 6;\n    } else if (matchValue[1] === 0) {\n      $target$$2 = 4;\n    } else if (matchValue[1] === 1) {\n      $target$$2 = 5;\n    } else {\n      $target$$2 = 9;\n    }\n  } else if (matchValue[0] === 1) {\n    if (matchValue[1] === -1) {\n      $target$$2 = 2;\n    } else if (matchValue[1] === 0) {\n      $target$$2 = 7;\n    } else if (matchValue[1] === 1) {\n      $target$$2 = 0;\n    } else {\n      $target$$2 = 9;\n    }\n  } else {\n    $target$$2 = 9;\n  }\n\n  switch ($target$$2) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024equal(BigInteger$$get_V(x$$3), BigInteger$$get_V(y));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024equal(BigInteger$$get_V(x$$3), BigInteger$$get_V(y));\n      }\n\n    case 2:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n        } else {\n          return false;\n        }\n      }\n\n    case 3:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n        } else {\n          return false;\n        }\n      }\n\n    case 4:\n      {\n        return true;\n      }\n\n    case 5:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n      }\n\n    case 6:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n      }\n\n    case 7:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3));\n      }\n\n    case 8:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3));\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$op_Inequality$$56F059C0(x$$4, y$$1) {\n  return !BigInteger$$$op_Equality$$56F059C0(x$$4, y$$1);\n}\nexport function BigInteger$$$op_LessThan$$56F059C0(x$$5, y$$2) {\n  const matchValue$$1 = [BigInteger$$get_SignInt(x$$5), BigInteger$$get_SignInt(y$$2)];\n  var $target$$3;\n\n  if (matchValue$$1[0] === -1) {\n    if (matchValue$$1[1] === -1) {\n      $target$$3 = 1;\n    } else if (matchValue$$1[1] === 0) {\n      $target$$3 = 8;\n    } else if (matchValue$$1[1] === 1) {\n      $target$$3 = 3;\n    } else {\n      $target$$3 = 9;\n    }\n  } else if (matchValue$$1[0] === 0) {\n    if (matchValue$$1[1] === -1) {\n      $target$$3 = 6;\n    } else if (matchValue$$1[1] === 0) {\n      $target$$3 = 4;\n    } else if (matchValue$$1[1] === 1) {\n      $target$$3 = 5;\n    } else {\n      $target$$3 = 9;\n    }\n  } else if (matchValue$$1[0] === 1) {\n    if (matchValue$$1[1] === -1) {\n      $target$$3 = 2;\n    } else if (matchValue$$1[1] === 0) {\n      $target$$3 = 7;\n    } else if (matchValue$$1[1] === 1) {\n      $target$$3 = 0;\n    } else {\n      $target$$3 = 9;\n    }\n  } else {\n    $target$$3 = 9;\n  }\n\n  switch ($target$$3) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024lt(BigInteger$$get_V(x$$5), BigInteger$$get_V(y$$2));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024lt(BigInteger$$get_V(y$$2), BigInteger$$get_V(x$$5));\n      }\n\n    case 2:\n      {\n        return false;\n      }\n\n    case 3:\n      {\n        if (!BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$5))) {\n          return true;\n        } else {\n          return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$2));\n        }\n      }\n\n    case 4:\n      {\n        return false;\n      }\n\n    case 5:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$2));\n      }\n\n    case 6:\n      {\n        return false;\n      }\n\n    case 7:\n      {\n        return false;\n      }\n\n    case 8:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$5));\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$op_GreaterThan$$56F059C0(x$$6, y$$3) {\n  const matchValue$$2 = [BigInteger$$get_SignInt(x$$6), BigInteger$$get_SignInt(y$$3)];\n  var $target$$4;\n\n  if (matchValue$$2[0] === -1) {\n    if (matchValue$$2[1] === -1) {\n      $target$$4 = 1;\n    } else if (matchValue$$2[1] === 0) {\n      $target$$4 = 8;\n    } else if (matchValue$$2[1] === 1) {\n      $target$$4 = 3;\n    } else {\n      $target$$4 = 9;\n    }\n  } else if (matchValue$$2[0] === 0) {\n    if (matchValue$$2[1] === -1) {\n      $target$$4 = 6;\n    } else if (matchValue$$2[1] === 0) {\n      $target$$4 = 4;\n    } else if (matchValue$$2[1] === 1) {\n      $target$$4 = 5;\n    } else {\n      $target$$4 = 9;\n    }\n  } else if (matchValue$$2[0] === 1) {\n    if (matchValue$$2[1] === -1) {\n      $target$$4 = 2;\n    } else if (matchValue$$2[1] === 0) {\n      $target$$4 = 7;\n    } else if (matchValue$$2[1] === 1) {\n      $target$$4 = 0;\n    } else {\n      $target$$4 = 9;\n    }\n  } else {\n    $target$$4 = 9;\n  }\n\n  switch ($target$$4) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024gt(BigInteger$$get_V(x$$6), BigInteger$$get_V(y$$3));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024gt(BigInteger$$get_V(y$$3), BigInteger$$get_V(x$$6));\n      }\n\n    case 2:\n      {\n        if (!BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$6))) {\n          return true;\n        } else {\n          return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$3));\n        }\n      }\n\n    case 3:\n      {\n        return false;\n      }\n\n    case 4:\n      {\n        return false;\n      }\n\n    case 5:\n      {\n        return false;\n      }\n\n    case 6:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$3));\n      }\n\n    case 7:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$6));\n      }\n\n    case 8:\n      {\n        return false;\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$compare$$56F059C0(n$$5, nn) {\n  if (BigInteger$$$op_LessThan$$56F059C0(n$$5, nn)) {\n    return -1 | 0;\n  } else if (BigInteger$$$op_Equality$$56F059C0(n$$5, nn)) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\nexport function BigInteger$$$hash$$Z665282C2(z) {\n  if (BigInteger$$get_SignInt(z) === 0) {\n    return 1;\n  } else {\n    return BigInteger$$get_SignInt(z) + BigNatModule$0024$0024$0024hash(BigInteger$$get_V(z)) | 0;\n  }\n}\n\nBigInteger.prototype.toString = function () {\n  const x$$7 = this;\n  const matchValue$$3 = BigInteger$$get_SignInt(x$$7) | 0;\n\n  switch (matchValue$$3) {\n    case -1:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$7)) ? \"0\" : \"-\" + BigNatModule$0024$0024$0024toString(BigInteger$$get_V(x$$7));\n      }\n\n    case 0:\n      {\n        return \"0\";\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024toString(BigInteger$$get_V(x$$7));\n      }\n\n    default:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\");\n      }\n  }\n};\n\nexport function BigInteger$$get_StructuredDisplayString(x$$8) {\n  return String(x$$8);\n}\n\nBigInteger.prototype.Equals = function (obj) {\n  const this$ = this;\n\n  if (obj instanceof BigInteger) {\n    const that = obj;\n    return BigInteger$$$op_Equality$$56F059C0(this$, that);\n  } else {\n    return false;\n  }\n};\n\nBigInteger.prototype.GetHashCode = function () {\n  const x$$9 = this;\n  return BigInteger$$$hash$$Z665282C2(x$$9) | 0;\n};\n\nexport function BigInteger$$$$002Ector$$Z524259A4(n$$6) {\n  if (n$$6 >= 0) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, 1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt32(n$$6)));\n  } else if (n$$6 === -2147483648) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt64(op_UnaryNegation(fromInteger(n$$6, false, 2)))));\n  } else {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt32(op_UnaryNegation_Int32(n$$6))));\n  }\n}\nexport function BigInteger$$$$002Ector$$Z524259C1(n$$7) {\n  if (compare(n$$7, fromBits(0, 0, false)) >= 0) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, 1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt64(n$$7)));\n  } else if (equals(n$$7, fromBits(0, 2147483648, false))) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024add(BigNatModule$0024$0024$0024ofInt64(fromBits(4294967295, 2147483647, false)), BigNatModule$0024$0024$0024one)));\n  } else {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt64(op_UnaryNegation(n$$7))));\n  }\n}\nexport function BigInteger$$$get_One() {\n  return BigInteger.one;\n}\nexport function BigInteger$$$get_Two() {\n  return BigInteger.two;\n}\nexport function BigInteger$$$get_Zero() {\n  return BigInteger.zero;\n}\nexport function BigInteger$$$op_UnaryNegation$$Z665282C2(z$$1) {\n  const matchValue$$4 = BigInteger$$get_SignInt(z$$1) | 0;\n\n  if (matchValue$$4 === 0) {\n    return BigInteger$$$get_Zero();\n  } else {\n    const i = matchValue$$4 | 0;\n    return BigInteger$$$create$$Z2BE94A1(op_UnaryNegation_Int32(i), BigInteger$$get_V(z$$1));\n  }\n}\nexport function BigInteger$$$Scale$$Z320F31E(k, z$$2) {\n  if (BigInteger$$get_SignInt(z$$2) === 0) {\n    return BigInteger$$$get_Zero();\n  } else if (k < 0) {\n    return BigInteger$$$create$$Z2BE94A1(op_UnaryNegation_Int32(BigInteger$$get_SignInt(z$$2)), BigNatModule$0024$0024$0024scale(op_UnaryNegation_Int32(k), BigInteger$$get_V(z$$2)));\n  } else {\n    return BigInteger$$$create$$Z2BE94A1(BigInteger$$get_SignInt(z$$2), BigNatModule$0024$0024$0024scale(k, BigInteger$$get_V(z$$2)));\n  }\n}\nexport function BigInteger$$$subnn$$6A57060(nx, ny) {\n  if (BigNatModule$0024$0024$0024gte(nx, ny)) {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024sub(nx, ny));\n  } else {\n    return BigInteger$$$negn$$Z67CCE57D(BigNatModule$0024$0024$0024sub(ny, nx));\n  }\n}\nexport function BigInteger$$$addnn$$6A57060(nx$$1, ny$$1) {\n  return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024add(nx$$1, ny$$1));\n}\nexport function BigInteger$$get_IsZero(x$$10) {\n  if (BigInteger$$get_SignInt(x$$10) === 0) {\n    return true;\n  } else {\n    return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$10));\n  }\n}\nexport function BigInteger$$get_IsOne(x$$11) {\n  if (BigInteger$$get_SignInt(x$$11) === 1) {\n    return BigNatModule$0024$0024$0024isOne(BigInteger$$get_V(x$$11));\n  } else {\n    return false;\n  }\n}\nexport function BigInteger$$$op_Addition$$56F059C0(x$$12, y$$4) {\n  if (BigInteger$$get_IsZero(y$$4)) {\n    return x$$12;\n  } else if (BigInteger$$get_IsZero(x$$12)) {\n    return y$$4;\n  } else {\n    const matchValue$$5 = [BigInteger$$get_SignInt(x$$12), BigInteger$$get_SignInt(y$$4)];\n    var $target$$5;\n\n    if (matchValue$$5[0] === -1) {\n      if (matchValue$$5[1] === -1) {\n        $target$$5 = 1;\n      } else if (matchValue$$5[1] === 1) {\n        $target$$5 = 3;\n      } else {\n        $target$$5 = 4;\n      }\n    } else if (matchValue$$5[0] === 1) {\n      if (matchValue$$5[1] === -1) {\n        $target$$5 = 2;\n      } else if (matchValue$$5[1] === 1) {\n        $target$$5 = 0;\n      } else {\n        $target$$5 = 4;\n      }\n    } else {\n      $target$$5 = 4;\n    }\n\n    switch ($target$$5) {\n      case 0:\n        {\n          return BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$12), BigInteger$$get_V(y$$4));\n        }\n\n      case 1:\n        {\n          return BigInteger$$$op_UnaryNegation$$Z665282C2(BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$12), BigInteger$$get_V(y$$4)));\n        }\n\n      case 2:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(x$$12), BigInteger$$get_V(y$$4));\n        }\n\n      case 3:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(y$$4), BigInteger$$get_V(x$$12));\n        }\n\n      case 4:\n        {\n          throw new Error(\"signs should be +/- 1\\\\nParameter name: x\");\n        }\n    }\n  }\n}\nexport function BigInteger$$$op_Subtraction$$56F059C0(x$$13, y$$5) {\n  if (BigInteger$$get_IsZero(y$$5)) {\n    return x$$13;\n  } else if (BigInteger$$get_IsZero(x$$13)) {\n    return BigInteger$$$op_UnaryNegation$$Z665282C2(y$$5);\n  } else {\n    const matchValue$$6 = [BigInteger$$get_SignInt(x$$13), BigInteger$$get_SignInt(y$$5)];\n    var $target$$6;\n\n    if (matchValue$$6[0] === -1) {\n      if (matchValue$$6[1] === -1) {\n        $target$$6 = 1;\n      } else if (matchValue$$6[1] === 1) {\n        $target$$6 = 3;\n      } else {\n        $target$$6 = 4;\n      }\n    } else if (matchValue$$6[0] === 1) {\n      if (matchValue$$6[1] === -1) {\n        $target$$6 = 2;\n      } else if (matchValue$$6[1] === 1) {\n        $target$$6 = 0;\n      } else {\n        $target$$6 = 4;\n      }\n    } else {\n      $target$$6 = 4;\n    }\n\n    switch ($target$$6) {\n      case 0:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(x$$13), BigInteger$$get_V(y$$5));\n        }\n\n      case 1:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(y$$5), BigInteger$$get_V(x$$13));\n        }\n\n      case 2:\n        {\n          return BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$13), BigInteger$$get_V(y$$5));\n        }\n\n      case 3:\n        {\n          return BigInteger$$$op_UnaryNegation$$Z665282C2(BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$13), BigInteger$$get_V(y$$5)));\n        }\n\n      case 4:\n        {\n          throw new Error(\"signs should be +/- 1\\\\nParameter name: x\");\n        }\n    }\n  }\n}\nexport function BigInteger$$$op_Multiply$$56F059C0(x$$14, y$$6) {\n  if (BigInteger$$get_IsZero(x$$14)) {\n    return x$$14;\n  } else if (BigInteger$$get_IsZero(y$$6)) {\n    return y$$6;\n  } else if (BigInteger$$get_IsOne(x$$14)) {\n    return y$$6;\n  } else if (BigInteger$$get_IsOne(y$$6)) {\n    return x$$14;\n  } else {\n    const m = BigNatModule$0024$0024$0024mul(BigInteger$$get_V(x$$14), BigInteger$$get_V(y$$6));\n    return BigInteger$$$create$$Z2BE94A1(BigInteger$$get_SignInt(x$$14) * BigInteger$$get_SignInt(y$$6), m);\n  }\n}\nexport function BigInteger$$$DivRem$$56F059C0(x$$15, y$$7) {\n  if (BigInteger$$get_IsZero(y$$7)) {\n    throw new Error();\n  }\n\n  if (BigInteger$$get_IsZero(x$$15)) {\n    return [BigInteger$$$get_Zero(), BigInteger$$$get_Zero()];\n  } else {\n    const patternInput = BigNatModule$0024$0024$0024divmod(BigInteger$$get_V(x$$15), BigInteger$$get_V(y$$7));\n    const matchValue$$7 = [BigInteger$$get_SignInt(x$$15), BigInteger$$get_SignInt(y$$7)];\n    var $target$$7;\n\n    if (matchValue$$7[0] === -1) {\n      if (matchValue$$7[1] === -1) {\n        $target$$7 = 1;\n      } else if (matchValue$$7[1] === 1) {\n        $target$$7 = 3;\n      } else {\n        $target$$7 = 4;\n      }\n    } else if (matchValue$$7[0] === 1) {\n      if (matchValue$$7[1] === -1) {\n        $target$$7 = 2;\n      } else if (matchValue$$7[1] === 1) {\n        $target$$7 = 0;\n      } else {\n        $target$$7 = 4;\n      }\n    } else {\n      $target$$7 = 4;\n    }\n\n    switch ($target$$7) {\n      case 0:\n        {\n          return [BigInteger$$$posn$$Z67CCE57D(patternInput[0]), BigInteger$$$posn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 1:\n        {\n          return [BigInteger$$$posn$$Z67CCE57D(patternInput[0]), BigInteger$$$negn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 2:\n        {\n          return [BigInteger$$$negn$$Z67CCE57D(patternInput[0]), BigInteger$$$posn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 3:\n        {\n          return [BigInteger$$$negn$$Z67CCE57D(patternInput[0]), BigInteger$$$negn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 4:\n        {\n          throw new Error(\"signs should be +/- 1\\\\nParameter name: x\");\n        }\n    }\n  }\n}\nexport function BigInteger$$$op_Division$$56F059C0(x$$16, y$$8) {\n  return BigInteger$$$DivRem$$56F059C0(x$$16, y$$8)[0];\n}\nexport function BigInteger$$$op_Modulus$$56F059C0(x$$17, y$$9) {\n  return BigInteger$$$DivRem$$56F059C0(x$$17, y$$9)[1];\n}\nexport function BigInteger$$$op_RightShift$$62E082A2(x$$18, y$$10) {\n  return BigInteger$$$op_Division$$56F059C0(x$$18, BigInteger$$$Pow$$62E082A2(BigInteger$$$get_Two(), y$$10));\n}\nexport function BigInteger$$$op_LeftShift$$62E082A2(x$$19, y$$11) {\n  return BigInteger$$$op_Multiply$$56F059C0(x$$19, BigInteger$$$Pow$$62E082A2(BigInteger$$$get_Two(), y$$11));\n}\nexport function BigInteger$$$op_BitwiseAnd$$56F059C0(x$$20, y$$12) {\n  return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024bitAnd(BigInteger$$get_V(x$$20), BigInteger$$get_V(y$$12)));\n}\nexport function BigInteger$$$op_BitwiseOr$$56F059C0(x$$21, y$$13) {\n  return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024bitOr(BigInteger$$get_V(x$$21), BigInteger$$get_V(y$$13)));\n}\nexport function BigInteger$$$op_ExclusiveOr$$56F059C0(x$$22, y$$14) {\n  return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024bitXor(BigInteger$$get_V(x$$22), BigInteger$$get_V(y$$14)));\n}\nexport function BigInteger$$$GreatestCommonDivisor$$56F059C0(x$$23, y$$15) {\n  const matchValue$$8 = [BigInteger$$get_SignInt(x$$23), BigInteger$$get_SignInt(y$$15)];\n\n  if (matchValue$$8[0] === 0) {\n    if (matchValue$$8[1] === 0) {\n      return BigInteger$$$get_Zero();\n    } else {\n      return BigInteger$$$posn$$Z67CCE57D(BigInteger$$get_V(y$$15));\n    }\n  } else if (matchValue$$8[1] === 0) {\n    return BigInteger$$$posn$$Z67CCE57D(BigInteger$$get_V(x$$23));\n  } else {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024hcf(BigInteger$$get_V(x$$23), BigInteger$$get_V(y$$15)));\n  }\n}\nexport function BigInteger$$get_IsNegative(x$$24) {\n  if (BigInteger$$get_SignInt(x$$24) === -1) {\n    return !BigInteger$$get_IsZero(x$$24);\n  } else {\n    return false;\n  }\n}\nexport function BigInteger$$get_IsPositive(x$$25) {\n  if (BigInteger$$get_SignInt(x$$25) === 1) {\n    return !BigInteger$$get_IsZero(x$$25);\n  } else {\n    return false;\n  }\n}\nexport function BigInteger$$$Abs$$Z665282C2(x$$26) {\n  if (BigInteger$$get_SignInt(x$$26) === -1) {\n    return BigInteger$$$op_UnaryNegation$$Z665282C2(x$$26);\n  } else {\n    return x$$26;\n  }\n}\nexport function BigInteger$$$op_LessThanOrEqual$$56F059C0(x$$27, y$$16) {\n  const matchValue$$9 = [BigInteger$$get_SignInt(x$$27), BigInteger$$get_SignInt(y$$16)];\n  var $target$$8;\n\n  if (matchValue$$9[0] === -1) {\n    if (matchValue$$9[1] === -1) {\n      $target$$8 = 1;\n    } else if (matchValue$$9[1] === 0) {\n      $target$$8 = 6;\n    } else if (matchValue$$9[1] === 1) {\n      $target$$8 = 3;\n    } else {\n      $target$$8 = 9;\n    }\n  } else if (matchValue$$9[0] === 0) {\n    if (matchValue$$9[1] === -1) {\n      $target$$8 = 8;\n    } else if (matchValue$$9[1] === 0) {\n      $target$$8 = 4;\n    } else if (matchValue$$9[1] === 1) {\n      $target$$8 = 7;\n    } else {\n      $target$$8 = 9;\n    }\n  } else if (matchValue$$9[0] === 1) {\n    if (matchValue$$9[1] === -1) {\n      $target$$8 = 2;\n    } else if (matchValue$$9[1] === 0) {\n      $target$$8 = 5;\n    } else if (matchValue$$9[1] === 1) {\n      $target$$8 = 0;\n    } else {\n      $target$$8 = 9;\n    }\n  } else {\n    $target$$8 = 9;\n  }\n\n  switch ($target$$8) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024lte(BigInteger$$get_V(x$$27), BigInteger$$get_V(y$$16));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024lte(BigInteger$$get_V(y$$16), BigInteger$$get_V(x$$27));\n      }\n\n    case 2:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$27))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$16));\n        } else {\n          return false;\n        }\n      }\n\n    case 3:\n      {\n        return true;\n      }\n\n    case 4:\n      {\n        return true;\n      }\n\n    case 5:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$27));\n      }\n\n    case 6:\n      {\n        return true;\n      }\n\n    case 7:\n      {\n        return true;\n      }\n\n    case 8:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$16));\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$op_GreaterThanOrEqual$$56F059C0(x$$28, y$$17) {\n  const matchValue$$10 = [BigInteger$$get_SignInt(x$$28), BigInteger$$get_SignInt(y$$17)];\n  var $target$$9;\n\n  if (matchValue$$10[0] === -1) {\n    if (matchValue$$10[1] === -1) {\n      $target$$9 = 1;\n    } else if (matchValue$$10[1] === 0) {\n      $target$$9 = 6;\n    } else if (matchValue$$10[1] === 1) {\n      $target$$9 = 3;\n    } else {\n      $target$$9 = 9;\n    }\n  } else if (matchValue$$10[0] === 0) {\n    if (matchValue$$10[1] === -1) {\n      $target$$9 = 8;\n    } else if (matchValue$$10[1] === 0) {\n      $target$$9 = 4;\n    } else if (matchValue$$10[1] === 1) {\n      $target$$9 = 7;\n    } else {\n      $target$$9 = 9;\n    }\n  } else if (matchValue$$10[0] === 1) {\n    if (matchValue$$10[1] === -1) {\n      $target$$9 = 2;\n    } else if (matchValue$$10[1] === 0) {\n      $target$$9 = 5;\n    } else if (matchValue$$10[1] === 1) {\n      $target$$9 = 0;\n    } else {\n      $target$$9 = 9;\n    }\n  } else {\n    $target$$9 = 9;\n  }\n\n  switch ($target$$9) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024gte(BigInteger$$get_V(x$$28), BigInteger$$get_V(y$$17));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024gte(BigInteger$$get_V(y$$17), BigInteger$$get_V(x$$28));\n      }\n\n    case 2:\n      {\n        return true;\n      }\n\n    case 3:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$28))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$17));\n        } else {\n          return false;\n        }\n      }\n\n    case 4:\n      {\n        return true;\n      }\n\n    case 5:\n      {\n        return true;\n      }\n\n    case 6:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$28));\n      }\n\n    case 7:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$17));\n      }\n\n    case 8:\n      {\n        return true;\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$Pow$$62E082A2(x$$29, y$$18) {\n  if (y$$18 < 0) {\n    throw new Error(\"y\");\n  }\n\n  const matchValue$$11 = [BigInteger$$get_IsZero(x$$29), y$$18];\n\n  if (matchValue$$11[0]) {\n    if (matchValue$$11[1] === 0) {\n      return BigInteger$$$get_One();\n    } else {\n      return BigInteger$$$get_Zero();\n    }\n  } else {\n    const yval = BigInteger$$$$002Ector$$Z524259A4(y$$18);\n    return BigInteger$$$create$$Z2BE94A1(BigNatModule$0024$0024$0024isZero(BigNatModule$0024$0024$0024rem(BigInteger$$get_V(yval), BigNatModule$0024$0024$0024two)) ? 1 : BigInteger$$get_SignInt(x$$29), BigNatModule$0024$0024$0024pow(BigInteger$$get_V(x$$29), BigInteger$$get_V(yval)));\n  }\n}\nexport function BigInteger$$get_ToInt32(x$$30) {\n  if (BigInteger$$get_IsZero(x$$30)) {\n    return 0;\n  } else {\n    const u = BigNatModule$0024$0024$0024toUInt32(BigInteger$$get_V(x$$30));\n\n    if (u <= 2147483647 >>> 0) {\n      return BigInteger$$get_SignInt(x$$30) * ~~u | 0;\n    } else if (BigInteger$$get_SignInt(x$$30) === -1 ? u === 2147483647 + 1 >>> 0 : false) {\n      return -2147483648 | 0;\n    } else {\n      throw new Error();\n    }\n  }\n}\nexport function BigInteger$$get_ToUInt32(x$$31) {\n  if (BigInteger$$get_IsZero(x$$31)) {\n    return 0;\n  } else {\n    return BigNatModule$0024$0024$0024toUInt32(BigInteger$$get_V(x$$31));\n  }\n}\nexport function BigInteger$$get_ToInt64(x$$32) {\n  if (BigInteger$$get_IsZero(x$$32)) {\n    return fromBits(0, 0, false);\n  } else {\n    const u$$1 = BigNatModule$0024$0024$0024toUInt64(BigInteger$$get_V(x$$32));\n\n    if (compare(u$$1, fromValue(fromBits(4294967295, 2147483647, false), true)) <= 0) {\n      return op_Multiply(fromInteger(BigInteger$$get_SignInt(x$$32), false, 2), fromValue(u$$1, false));\n    } else if (BigInteger$$get_SignInt(x$$32) === -1 ? equals(u$$1, fromValue(op_Addition(fromBits(4294967295, 2147483647, false), fromBits(1, 0, false)), true)) : false) {\n      return fromBits(0, 2147483648, false);\n    } else {\n      throw new Error();\n    }\n  }\n}\nexport function BigInteger$$get_ToUInt64(x$$33) {\n  if (BigInteger$$get_IsZero(x$$33)) {\n    return fromBits(0, 0, true);\n  } else {\n    return BigNatModule$0024$0024$0024toUInt64(BigInteger$$get_V(x$$33));\n  }\n}\nexport function BigInteger$$get_ToDouble(x$$34) {\n  const matchValue$$12 = BigInteger$$get_SignInt(x$$34) | 0;\n\n  switch (matchValue$$12) {\n    case -1:\n      {\n        return -BigNatModule$0024$0024$0024toFloat(BigInteger$$get_V(x$$34));\n      }\n\n    case 0:\n      {\n        return 0;\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024toFloat(BigInteger$$get_V(x$$34));\n      }\n\n    default:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$get_ToSByte(x$$35) {\n  return (BigInteger$$get_ToInt32(x$$35) + 0x80 & 0xFF) - 0x80;\n}\nexport function BigInteger$$get_ToByte(x$$36) {\n  return BigInteger$$get_ToUInt32(x$$36) & 0xFF;\n}\nexport function BigInteger$$get_ToInt16(x$$37) {\n  return (BigInteger$$get_ToInt32(x$$37) + 0x8000 & 0xFFFF) - 0x8000;\n}\nexport function BigInteger$$get_ToUInt16(x$$38) {\n  return BigInteger$$get_ToUInt32(x$$38) & 0xFFFF;\n}\nexport function BigInteger$$get_ToSingle(x$$39) {\n  return BigInteger$$get_ToDouble(x$$39);\n}\nexport function BigInteger$$get_ToDecimal(x$$40) {\n  return new Decimal(BigInteger$$get_ToDouble(x$$40));\n}\nexport function BigInteger$$$Parse$$Z721C83C5(text) {\n  if (text == null) {\n    throw new Error(\"text\");\n  }\n\n  const text$$1 = text.trim();\n  const len = text$$1.length | 0;\n\n  if (len === 0) {\n    throw new Error();\n  }\n\n  const matchValue$$13 = [text$$1[0], len];\n\n  if (matchValue$$13[0] === \"+\") {\n    if (matchValue$$13[1] === 1) {\n      throw new Error();\n    } else {\n      return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024ofString(text$$1.slice(1, len - 1 + 1)));\n    }\n  } else if (matchValue$$13[0] === \"-\") {\n    if (matchValue$$13[1] === 1) {\n      throw new Error();\n    } else {\n      return BigInteger$$$negn$$Z67CCE57D(BigNatModule$0024$0024$0024ofString(text$$1.slice(1, len - 1 + 1)));\n    }\n  } else {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024ofString(text$$1));\n  }\n}\nexport function BigInteger$$get_IsSmall(x$$41) {\n  if (BigInteger$$get_IsZero(x$$41)) {\n    return true;\n  } else {\n    return BigNatModule$0024$0024$0024isSmall(BigInteger$$get_V(x$$41));\n  }\n}\nexport function BigInteger$$$Factorial$$Z665282C2(x$$42) {\n  if (BigInteger$$get_IsNegative(x$$42)) {\n    throw new Error(\"mustBeNonNegative\\\\nParameter name: x\");\n  }\n\n  if (BigInteger$$get_IsPositive(x$$42)) {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024factorial(BigInteger$$get_V(x$$42)));\n  } else {\n    return BigInteger$$$get_One();\n  }\n}\nexport function BigInteger$$$op_UnaryPlus$$Z665282C2(n1) {\n  return n1;\n}\nexport function BigInteger$$$FromInt64$$Z524259C1(x$$43) {\n  return BigInteger$$$$002Ector$$Z524259C1(x$$43);\n}\nexport function BigInteger$$$FromInt32$$Z524259A4(x$$44) {\n  return BigInteger$$$$002Ector$$Z524259A4(x$$44);\n}\n\nBigInteger.prototype.CompareTo = function (obj$$1) {\n  const this$$$1 = this;\n\n  if (obj$$1 instanceof BigInteger) {\n    const that$$1 = obj$$1;\n    return BigInteger$$$compare$$56F059C0(this$$$1, that$$1) | 0;\n  } else {\n    throw new Error(\"the objects are not comparable\\\\nParameter name: obj\");\n  }\n};","import { BigInteger$$$op_Inequality$$56F059C0 as BigInteger$0024$0024$0024op_Inequality$0024$002456F059C0, BigInteger$$$op_Equality$$56F059C0 as BigInteger$0024$0024$0024op_Equality$0024$002456F059C0, BigInteger$$$op_GreaterThanOrEqual$$56F059C0 as BigInteger$0024$0024$0024op_GreaterThanOrEqual$0024$002456F059C0, BigInteger$$$op_GreaterThan$$56F059C0 as BigInteger$0024$0024$0024op_GreaterThan$0024$002456F059C0, BigInteger$$$op_LessThanOrEqual$$56F059C0 as BigInteger$0024$0024$0024op_LessThanOrEqual$0024$002456F059C0, BigInteger$$$op_LessThan$$56F059C0 as BigInteger$0024$0024$0024op_LessThan$0024$002456F059C0, BigInteger$$$op_ExclusiveOr$$56F059C0 as BigInteger$0024$0024$0024op_ExclusiveOr$0024$002456F059C0, BigInteger$$$op_BitwiseOr$$56F059C0 as BigInteger$0024$0024$0024op_BitwiseOr$0024$002456F059C0, BigInteger$$$op_BitwiseAnd$$56F059C0 as BigInteger$0024$0024$0024op_BitwiseAnd$0024$002456F059C0, BigInteger$$$op_LeftShift$$62E082A2 as BigInteger$0024$0024$0024op_LeftShift$0024$002462E082A2, BigInteger$$$op_RightShift$$62E082A2 as BigInteger$0024$0024$0024op_RightShift$0024$002462E082A2, BigInteger$$$op_UnaryPlus$$Z665282C2 as BigInteger$0024$0024$0024op_UnaryPlus$0024$0024Z665282C2, BigInteger$$$op_UnaryNegation$$Z665282C2 as BigInteger$0024$0024$0024op_UnaryNegation$0024$0024Z665282C2, BigInteger$$$op_Modulus$$56F059C0 as BigInteger$0024$0024$0024op_Modulus$0024$002456F059C0, BigInteger$$$op_Division$$56F059C0 as BigInteger$0024$0024$0024op_Division$0024$002456F059C0, BigInteger$$$op_Multiply$$56F059C0 as BigInteger$0024$0024$0024op_Multiply$0024$002456F059C0, BigInteger$$$op_Subtraction$$56F059C0 as BigInteger$0024$0024$0024op_Subtraction$0024$002456F059C0, BigInteger$$$op_Addition$$56F059C0 as BigInteger$0024$0024$0024op_Addition$0024$002456F059C0, BigInteger$$get_IsOne as BigInteger$0024$0024get_IsOne, BigInteger$$get_IsZero as BigInteger$0024$0024get_IsZero, BigInteger$$get_Sign as BigInteger$0024$0024get_Sign, BigInteger$$get_ToDecimal as BigInteger$0024$0024get_ToDecimal, BigInteger$$get_ToDouble as BigInteger$0024$0024get_ToDouble, BigInteger$$get_ToSingle as BigInteger$0024$0024get_ToSingle, BigInteger$$get_ToUInt64 as BigInteger$0024$0024get_ToUInt64, BigInteger$$get_ToInt64 as BigInteger$0024$0024get_ToInt64, BigInteger$$get_ToUInt32 as BigInteger$0024$0024get_ToUInt32, BigInteger$$get_ToInt32 as BigInteger$0024$0024get_ToInt32, BigInteger$$get_ToUInt16 as BigInteger$0024$0024get_ToUInt16, BigInteger$$get_ToInt16 as BigInteger$0024$0024get_ToInt16, BigInteger$$get_ToByte as BigInteger$0024$0024get_ToByte, BigInteger$$get_ToSByte as BigInteger$0024$0024get_ToSByte, BigInteger$$$$002Ector$$Z524259A4 as BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259A4, BigInteger$$$$002Ector$$Z524259C1 as BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259C1, BigInteger$$$get_Two as BigInteger$0024$0024$0024get_Two, BigInteger$$$get_One as BigInteger$0024$0024$0024get_One, BigInteger$$$Abs$$Z665282C2 as BigInteger$0024$0024$0024Abs$0024$0024Z665282C2, BigInteger$$$Pow$$62E082A2 as BigInteger$0024$0024$0024Pow$0024$002462E082A2, BigInteger$$$GreatestCommonDivisor$$56F059C0 as BigInteger$0024$0024$0024GreatestCommonDivisor$0024$002456F059C0, BigInteger$$$DivRem$$56F059C0 as BigInteger$0024$0024$0024DivRem$0024$002456F059C0, BigInteger$$$Parse$$Z721C83C5 as BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5, BigInteger$$$get_Zero as BigInteger$0024$0024$0024get_Zero, BigInteger } from \"./BigInt/z\";\nimport { fromInteger } from \"./Long.js\";\nimport { min, comparePrimitives, equals as equals$$1, structuralHash } from \"./Util.js\";\nimport { rangeNumber } from \"./Seq.js\";\nimport { fold, head, skipWhile, find, ofSeq } from \"./List.js\";\nimport { List } from \"./Types.js\";\nimport { fill, reverse, ofList } from \"./Array.js\";\nexport function isBigInt(x) {\n  return x instanceof BigInteger;\n}\nexport function tryParse(str) {\n  try {\n    const res = BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5(str);\n    return [true, res];\n  } catch (matchValue) {\n    return [false, BigInteger$0024$0024$0024get_Zero()];\n  }\n}\nexport function parse(arg00) {\n  return BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5(arg00);\n}\nexport function divRem(arg00$$1, arg01) {\n  return BigInteger$0024$0024$0024DivRem$0024$002456F059C0(arg00$$1, arg01);\n}\nexport function greatestCommonDivisor(arg00$$2, arg01$$1) {\n  return BigInteger$0024$0024$0024GreatestCommonDivisor$0024$002456F059C0(arg00$$2, arg01$$1);\n}\nexport function pow(arg00$$3, arg01$$2) {\n  return BigInteger$0024$0024$0024Pow$0024$002462E082A2(arg00$$3, arg01$$2);\n}\nexport function abs(arg00$$4) {\n  return BigInteger$0024$0024$0024Abs$0024$0024Z665282C2(arg00$$4);\n}\nexport const zero = BigInteger$0024$0024$0024get_Zero();\nexport const one = BigInteger$0024$0024$0024get_One();\nexport const two = BigInteger$0024$0024$0024get_Two();\nexport function fromString(s) {\n  return BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5(s);\n}\nexport function fromZero() {\n  return BigInteger$0024$0024$0024get_Zero();\n}\nexport function fromOne() {\n  return BigInteger$0024$0024$0024get_One();\n}\nexport function fromInt64(i) {\n  return BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259C1(i);\n}\nexport function fromInt32(i$$1) {\n  if (i$$1 > 2147483647) {\n    return BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259C1(fromInteger(i$$1, false, 6));\n  } else {\n    return BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259A4(i$$1);\n  }\n}\nexport function toSByte(x$$1) {\n  return BigInteger$0024$0024get_ToSByte(x$$1);\n}\nexport function toByte(x$$2) {\n  return BigInteger$0024$0024get_ToByte(x$$2);\n}\nexport function toInt16(x$$3) {\n  return BigInteger$0024$0024get_ToInt16(x$$3);\n}\nexport function toUInt16(x$$4) {\n  return BigInteger$0024$0024get_ToUInt16(x$$4);\n}\nexport function toInt32(x$$5) {\n  return BigInteger$0024$0024get_ToInt32(x$$5);\n}\nexport function toUInt32(x$$6) {\n  return BigInteger$0024$0024get_ToUInt32(x$$6);\n}\nexport function toInt64(x$$7) {\n  return BigInteger$0024$0024get_ToInt64(x$$7);\n}\nexport function toUInt64(x$$8) {\n  return BigInteger$0024$0024get_ToUInt64(x$$8);\n}\nexport function toSingle(x$$9) {\n  return BigInteger$0024$0024get_ToSingle(x$$9);\n}\nexport function toDouble(x$$10) {\n  return BigInteger$0024$0024get_ToDouble(x$$10);\n}\nexport function toDecimal(x$$11) {\n  return BigInteger$0024$0024get_ToDecimal(x$$11);\n}\nexport function sign(x$$12) {\n  return BigInteger$0024$0024get_Sign(x$$12);\n}\nexport function isZero(x$$13) {\n  return BigInteger$0024$0024get_IsZero(x$$13);\n}\nexport function isOne(x$$14) {\n  return BigInteger$0024$0024get_IsOne(x$$14);\n}\nexport function hash(x$$15) {\n  return structuralHash(x$$15);\n}\nexport function compare(x$$16, y) {\n  return x$$16.CompareTo(y);\n}\nexport function equals(x$$17, y$$1) {\n  return equals$$1(x$$17, y$$1);\n}\nexport function toString(x$$18) {\n  return String(x$$18);\n}\nexport const get_Zero = BigInteger$0024$0024$0024get_Zero();\nexport const get_One = BigInteger$0024$0024$0024get_One();\nexport function op_Addition(arg00$$5, arg01$$3) {\n  return BigInteger$0024$0024$0024op_Addition$0024$002456F059C0(arg00$$5, arg01$$3);\n}\nexport function op_Subtraction(arg00$$6, arg01$$4) {\n  return BigInteger$0024$0024$0024op_Subtraction$0024$002456F059C0(arg00$$6, arg01$$4);\n}\nexport function op_Multiply(arg00$$7, arg01$$5) {\n  return BigInteger$0024$0024$0024op_Multiply$0024$002456F059C0(arg00$$7, arg01$$5);\n}\nexport function op_Division(arg00$$8, arg01$$6) {\n  return BigInteger$0024$0024$0024op_Division$0024$002456F059C0(arg00$$8, arg01$$6);\n}\nexport function op_Modulus(arg00$$9, arg01$$7) {\n  return BigInteger$0024$0024$0024op_Modulus$0024$002456F059C0(arg00$$9, arg01$$7);\n}\nexport function op_UnaryNegation(arg00$$10) {\n  return BigInteger$0024$0024$0024op_UnaryNegation$0024$0024Z665282C2(arg00$$10);\n}\nexport function op_UnaryPlus(arg00$$11) {\n  return BigInteger$0024$0024$0024op_UnaryPlus$0024$0024Z665282C2(arg00$$11);\n}\nexport function op_RightShift(arg00$$12, arg01$$8) {\n  return BigInteger$0024$0024$0024op_RightShift$0024$002462E082A2(arg00$$12, arg01$$8);\n}\nexport function op_LeftShift(arg00$$13, arg01$$9) {\n  return BigInteger$0024$0024$0024op_LeftShift$0024$002462E082A2(arg00$$13, arg01$$9);\n}\nexport function op_BitwiseAnd(arg00$$14, arg01$$10) {\n  return BigInteger$0024$0024$0024op_BitwiseAnd$0024$002456F059C0(arg00$$14, arg01$$10);\n}\nexport function op_BitwiseOr(arg00$$15, arg01$$11) {\n  return BigInteger$0024$0024$0024op_BitwiseOr$0024$002456F059C0(arg00$$15, arg01$$11);\n}\nexport function op_ExclusiveOr(arg00$$16, arg01$$12) {\n  return BigInteger$0024$0024$0024op_ExclusiveOr$0024$002456F059C0(arg00$$16, arg01$$12);\n}\nexport function op_LessThan(arg00$$17, arg01$$13) {\n  return BigInteger$0024$0024$0024op_LessThan$0024$002456F059C0(arg00$$17, arg01$$13);\n}\nexport function op_LessThanOrEqual(arg00$$18, arg01$$14) {\n  return BigInteger$0024$0024$0024op_LessThanOrEqual$0024$002456F059C0(arg00$$18, arg01$$14);\n}\nexport function op_GreaterThan(arg00$$19, arg01$$15) {\n  return BigInteger$0024$0024$0024op_GreaterThan$0024$002456F059C0(arg00$$19, arg01$$15);\n}\nexport function op_GreaterThanOrEqual(arg00$$20, arg01$$16) {\n  return BigInteger$0024$0024$0024op_GreaterThanOrEqual$0024$002456F059C0(arg00$$20, arg01$$16);\n}\nexport function op_Equality(arg00$$21, arg01$$17) {\n  return BigInteger$0024$0024$0024op_Equality$0024$002456F059C0(arg00$$21, arg01$$17);\n}\nexport function op_Inequality(arg00$$22, arg01$$18) {\n  return BigInteger$0024$0024$0024op_Inequality$0024$002456F059C0(arg00$$22, arg01$$18);\n}\n\nfunction flipTwosComplement(currByte, lowBitFound) {\n  const matchValue$$1 = [currByte, lowBitFound];\n\n  if (matchValue$$1[1]) {\n    return [(currByte ^ 255) & 255, true];\n  } else if (matchValue$$1[0] === 0) {\n    return [0, false];\n  } else {\n    const firstBitIndex = find(function predicate(i$$2) {\n      return (currByte & 1 << i$$2) > 0;\n    }, ofSeq(rangeNumber(0, 1, 7))) | 0;\n    return [(currByte ^ 254 << firstBitIndex) & 255, true];\n  }\n}\n\nexport function toByteArray(value$$1) {\n  if (equals$$1(value$$1, zero)) {\n    return new Uint8Array([0]);\n  } else {\n    const isPositive = value$$1.CompareTo(zero) > 0;\n    const value$$2 = isPositive ? value$$1 : BigInteger$0024$0024$0024op_Multiply$0024$002456F059C0(BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259A4(-1), value$$1);\n    const mask32 = fromInt64(fromInteger(4294967295, false, 6));\n\n    const loop = function loop(accumBytes, consumeValue, lowBitFound$$1) {\n      loop: while (true) {\n        if (consumeValue.CompareTo(zero) <= 0) {\n          const accumBytes$$1 = isPositive ? skipWhile(function predicate$$1(b) {\n            return b === 0;\n          }, accumBytes) : skipWhile(function predicate$$2(b$$1) {\n            return b$$1 === 255;\n          }, accumBytes);\n          const isHighBitOne = (head(accumBytes$$1) & 128) !== 0;\n          const accumBytes$$2 = (isPositive ? isHighBitOne : false) ? new List(0, accumBytes$$1) : (!isPositive ? !isHighBitOne : false) ? new List(255, accumBytes$$1) : accumBytes$$1;\n          return reverse(ofList(accumBytes$$2, Uint8Array), Uint8Array);\n        } else {\n          const currValue = toUInt32(BigInteger$0024$0024$0024op_BitwiseAnd$0024$002456F059C0(consumeValue, mask32));\n\n          if (isPositive) {\n            const b0 = currValue & 0xFF;\n            const b1 = currValue >>> 8 & 0xFF;\n            const b2 = currValue >>> 16 & 0xFF;\n            const b3 = currValue >>> 24 & 0xFF;\n            const $accumBytes$$3 = accumBytes;\n            const $consumeValue$$4 = consumeValue;\n            accumBytes = new List(b3, new List(b2, new List(b1, new List(b0, $accumBytes$$3))));\n            consumeValue = BigInteger$0024$0024$0024op_RightShift$0024$002462E082A2($consumeValue$$4, 32);\n            lowBitFound$$1 = false;\n            continue loop;\n          } else {\n            const patternInput = flipTwosComplement(currValue & 0xFF, lowBitFound$$1);\n            const patternInput$$1 = flipTwosComplement(currValue >>> 8 & 0xFF, patternInput[1]);\n            const patternInput$$2 = flipTwosComplement(currValue >>> 16 & 0xFF, patternInput$$1[1]);\n            const patternInput$$3 = flipTwosComplement(currValue >>> 24 & 0xFF, patternInput$$2[1]);\n            const $accumBytes$$5 = accumBytes;\n            const $consumeValue$$6 = consumeValue;\n            accumBytes = new List(patternInput$$3[0], new List(patternInput$$2[0], new List(patternInput$$1[0], new List(patternInput[0], $accumBytes$$5))));\n            consumeValue = BigInteger$0024$0024$0024op_RightShift$0024$002462E082A2($consumeValue$$6, 32);\n            lowBitFound$$1 = patternInput$$3[1];\n            continue loop;\n          }\n        }\n\n        break;\n      }\n    };\n\n    return loop(new List(), value$$2, false);\n  }\n}\nexport function fromByteArray(bytes) {\n  if (bytes == null) {\n    throw new Error(\"bytes\");\n  }\n\n  if (bytes.length === 0) {\n    return zero;\n  } else {\n    const isPositive$$1 = (bytes[bytes.length - 1] & 128) === 0;\n    const buffer = fill(new Uint8Array(4), 0, 4, 0);\n\n    const loop$$1 = function loop$$1(accumUInt32, currIndex, bytesRemaining, lowBitFound$$6) {\n      loop$$1: while (true) {\n        if (bytesRemaining === 0) {\n          const value$$14 = fold(function folder(acc, value$$12) {\n            return BigInteger$0024$0024$0024op_Addition$0024$002456F059C0(BigInteger$0024$0024$0024op_LeftShift$0024$002462E082A2(acc, 32), fromInt64(fromInteger(value$$12, false, 6)));\n          }, zero, accumUInt32);\n\n          if (isPositive$$1) {\n            return value$$14;\n          } else {\n            return BigInteger$0024$0024$0024op_Multiply$0024$002456F059C0(BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259A4(-1), value$$14);\n          }\n        } else {\n          const bytesToProcess = min(comparePrimitives, bytesRemaining, 4) | 0;\n\n          for (let i$$5 = 0; i$$5 <= bytesToProcess - 1; i$$5++) {\n            buffer[i$$5] = bytes[currIndex + i$$5];\n          }\n\n          if (isPositive$$1) {\n            fill(buffer, bytesToProcess, 4 - bytesToProcess, 0);\n            const value$$15 = (((buffer[0] | buffer[1] << 8 >>> 0) >>> 0 | buffer[2] << 16 >>> 0) >>> 0 | buffer[3] << 24 >>> 0) >>> 0;\n            const $accumUInt32$$7 = accumUInt32;\n            const $bytesRemaining$$9 = bytesRemaining;\n            const $currIndex$$8 = currIndex;\n            accumUInt32 = new List(value$$15, $accumUInt32$$7);\n            currIndex = $currIndex$$8 + bytesToProcess;\n            bytesRemaining = $bytesRemaining$$9 - bytesToProcess;\n            lowBitFound$$6 = false;\n            continue loop$$1;\n          } else {\n            fill(buffer, bytesToProcess, 4 - bytesToProcess, 255);\n            const patternInput$$4 = flipTwosComplement(buffer[0], lowBitFound$$6);\n            const patternInput$$5 = flipTwosComplement(buffer[1], patternInput$$4[1]);\n            const patternInput$$6 = flipTwosComplement(buffer[2], patternInput$$5[1]);\n            const patternInput$$7 = flipTwosComplement(buffer[3], patternInput$$6[1]);\n            const value$$16 = (((patternInput$$4[0] | patternInput$$5[0] << 8 >>> 0) >>> 0 | patternInput$$6[0] << 16 >>> 0) >>> 0 | patternInput$$7[0] << 24 >>> 0) >>> 0;\n            const $accumUInt32$$10 = accumUInt32;\n            const $bytesRemaining$$12 = bytesRemaining;\n            const $currIndex$$11 = currIndex;\n            accumUInt32 = new List(value$$16, $accumUInt32$$10);\n            currIndex = $currIndex$$11 + bytesToProcess;\n            bytesRemaining = $bytesRemaining$$12 - bytesToProcess;\n            lowBitFound$$6 = patternInput$$7[1];\n            continue loop$$1;\n          }\n        }\n\n        break;\n      }\n    };\n\n    return loop$$1(new List(), 0, bytes.length, false);\n  }\n}","\nnamespace Thoth.Json\n\n[<RequireQualifiedAccess>]\nmodule Decode =\n\n    open System.Globalization\n    open Fable.Core\n    open Fable.Core.JsInterop\n\n    module internal Helpers =\n        [<Emit(\"typeof $0\")>]\n        let jsTypeof (_ : JsonValue) : string = jsNative\n\n        [<Emit(\"$0 instanceof SyntaxError\")>]\n        let isSyntaxError (_ : JsonValue) : bool = jsNative\n\n        let inline getField (fieldName: string) (o: JsonValue) = o?(fieldName)\n        let inline isString (o: JsonValue) : bool = o :? string\n\n        let inline isBoolean (o: JsonValue) : bool = o :? bool\n\n        let inline isNumber (o: JsonValue) : bool = jsTypeof o = \"number\"\n\n        let inline isArray (o: JsonValue) : bool = JS.Array.isArray(o)\n\n        [<Emit(\"$0 === null ? false : (Object.getPrototypeOf($0 || false) === Object.prototype)\")>]\n        let isObject (_ : JsonValue) : bool = jsNative\n\n        let inline isNaN (o: JsonValue) : bool = JS.Number.isNaN(!!o)\n\n        let inline isNullValue (o: JsonValue): bool = isNull o\n\n        [<Emit(\"-2147483648 < $0 && $0 < 2147483647 && ($0 | 0) === $0\")>]\n        let isValidIntRange (_: JsonValue) : bool = jsNative\n\n        [<Emit(\"isFinite($0) && !($0 % 1)\")>]\n        let isIntFinite (_: JsonValue) : bool = jsNative\n\n        let isUndefined (o: JsonValue): bool = jsTypeof o = \"undefined\"\n\n        [<Emit(\"JSON.stringify($0, null, 4) + ''\")>]\n        let anyToString (_: JsonValue) : string = jsNative\n\n        let inline isFunction (o: JsonValue) : bool = jsTypeof o = \"function\"\n\n        let inline objectKeys (o: JsonValue) : string seq = upcast JS.Object.keys(o)\n        let inline asBool (o: JsonValue): bool = unbox o\n        let inline asInt (o: JsonValue): int = unbox o\n        let inline asFloat (o: JsonValue): float = unbox o\n        let inline asString (o: JsonValue): string = unbox o\n        let inline asArray (o: JsonValue): JsonValue[] = unbox o\n\n    let private genericMsg msg value newLine =\n        try\n            \"Expecting \"\n                + msg\n                + \" but instead got:\"\n                + (if newLine then \"\\n\" else \" \")\n                + (Helpers.anyToString value)\n        with\n            | _ ->\n                \"Expecting \"\n                + msg\n                + \" but decoder failed. Couldn't report given value due to circular structure.\"\n                + (if newLine then \"\\n\" else \" \")\n\n    let private errorToString (path : string, error) =\n        let reason =\n            match error with\n            | BadPrimitive (msg, value) ->\n                genericMsg msg value false\n            | BadType (msg, value) ->\n                genericMsg msg value true\n            | BadPrimitiveExtra (msg, value, reason) ->\n                genericMsg msg value false + \"\\nReason: \" + reason\n            | BadField (msg, value) ->\n                genericMsg msg value true\n            | BadPath (msg, value, fieldName) ->\n                genericMsg msg value true + (\"\\nNode `\" + fieldName + \"` is unkown.\")\n            | TooSmallArray (msg, value) ->\n                \"Expecting \" + msg + \".\\n\" + (Helpers.anyToString value)\n            | BadOneOf messages ->\n                \"The following errors were found:\\n\\n\" + String.concat \"\\n\\n\" messages\n            | FailMessage msg ->\n                \"The following `failure` occurred with the decoder: \" + msg\n\n        match error with\n        | BadOneOf _ ->\n            // Don't need to show the path here because each error case will show it's own path\n            reason\n        | _ ->\n            \"Error at: `\" + path + \"`\\n\" + reason\n\n    ///////////////\n    // Runners ///\n    /////////////\n\n    let fromValue (path : string) (decoder : Decoder<'T>) =\n        fun value ->\n            match decoder path value with\n            | Ok success ->\n                Ok success\n            | Error error ->\n                Error (errorToString error)\n\n    let fromString (decoder : Decoder<'T>) =\n        fun value ->\n            try\n                let json = JS.JSON.parse value\n                fromValue \"$\" decoder json\n            with\n                | ex when Helpers.isSyntaxError ex ->\n                    Error(\"Given an invalid JSON: \" + ex.Message)\n\n    let unsafeFromString (decoder : Decoder<'T>) =\n        fun value ->\n            match fromString decoder value with\n            | Ok x -> x\n            | Error msg -> failwith msg\n\n    [<System.Obsolete(\"Please use fromValue instead\")>]\n    let decodeValue (path : string) (decoder : Decoder<'T>) = fromValue path decoder\n\n    [<System.Obsolete(\"Please use fromString instead\")>]\n    let decodeString (decoder : Decoder<'T>) = fromString decoder\n\n    //////////////////\n    // Primitives ///\n    ////////////////\n\n    let string : Decoder<string> =\n        fun path value ->\n            if Helpers.isString value then\n                Ok(Helpers.asString value)\n            else\n                (path, BadPrimitive(\"a string\", value)) |> Error\n\n    let guid : Decoder<System.Guid> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.Guid.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a guid\", value)) |> Error\n            else (path, BadPrimitive(\"a guid\", value)) |> Error\n\n    let int : Decoder<int> =\n        fun path value ->\n            if Helpers.isNumber value then\n                if Helpers.isValidIntRange value then\n                    Ok(Helpers.asInt value)\n                else\n                    (path, BadPrimitiveExtra(\"an int\", value, \"Value was either too large or too small for an int\")) |> Error\n            elif Helpers.isString value then\n                match System.Int32.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an int\", value)) |> Error\n            else\n                (path, BadPrimitive(\"an int\", value)) |> Error\n\n\n    let int64 : Decoder<int64> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asInt value |> int64 |> Ok\n            elif Helpers.isString value then\n                match System.Int64.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an int64\", value)) |> Error\n            else (path, BadPrimitive(\"an int64\", value)) |> Error\n\n    let uint32 : Decoder<uint32> =\n        fun path value ->\n            if Helpers.isNumber value then\n                let x = Helpers.asFloat value\n                if x >= 0. && x <= (float System.UInt32.MaxValue) then\n                    Helpers.asInt value |> uint32 |> Ok\n                else\n                    (path, BadPrimitiveExtra(\"an uint32\", value, \"Value was either too large or too small for an uint32\")) |> Error\n            elif Helpers.isString value then\n                match System.UInt32.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an uint32\", value)) |> Error\n            else (path, BadPrimitive(\"an uint32\", value)) |> Error\n\n    let uint64 : Decoder<uint64> =\n        fun path value ->\n            if Helpers.isNumber value then\n                let x = Helpers.asFloat value\n                if x >= 0. && x <= (float System.UInt64.MaxValue) then\n                    Helpers.asInt value |> uint64 |> Ok\n                else\n                    (path, BadPrimitiveExtra(\"an uint64\", value, \"Value was either too large or too small for an uint64\")) |> Error\n            elif Helpers.isString value then\n                match System.UInt64.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an uint64\", value)) |> Error\n            else (path, BadPrimitive(\"an uint64\", value)) |> Error\n\n    let bigint : Decoder<bigint> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asInt value |> bigint |> Ok\n            elif Helpers.isString value then\n                // TODO: BigInt.TryParse has been added in Fable 2.1.4\n                // Don't use it for now to support lower Fable versions\n                try\n                    bigint.Parse (Helpers.asString value) |> Ok\n                with _ ->\n                    (path, BadPrimitive(\"a bigint\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a bigint\", value)) |> Error\n\n    let bool : Decoder<bool> =\n        fun path value ->\n            if Helpers.isBoolean value then\n                Ok(Helpers.asBool value)\n            else\n                (path, BadPrimitive(\"a boolean\", value)) |> Error\n\n    let float : Decoder<float> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Ok(Helpers.asFloat value)\n            else\n                (path, BadPrimitive(\"a float\", value)) |> Error\n\n    let decimal : Decoder<decimal> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asFloat value |> decimal |> Ok\n            elif Helpers.isString value then\n                match System.Decimal.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a decimal\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a decimal\", value)) |> Error\n\n    let datetime : Decoder<System.DateTime> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.DateTime.TryParse (Helpers.asString value) with\n                | true, x -> x.ToUniversalTime() |> Ok\n                | _ -> (path, BadPrimitive(\"a datetime\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a datetime\", value)) |> Error\n\n    let datetimeOffset : Decoder<System.DateTimeOffset> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.DateTimeOffset.TryParse(Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a datetimeoffset\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a datetime\", value)) |> Error\n\n    let timespan : Decoder<System.TimeSpan> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.TimeSpan.TryParse(Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a timespan\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a timespan\", value)) |> Error\n\n    /////////////////////////\n    // Object primitives ///\n    ///////////////////////\n\n    let private decodeMaybeNull path (decoder : Decoder<'T>) value =\n        // The decoder may be an option decoder so give it an opportunity to check null values\n        match decoder path value with\n        | Ok v -> Ok(Some v)\n        | Error _ when Helpers.isNullValue value -> Ok None\n        | Error er -> Error er\n\n    let optional (fieldName : string) (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun path value ->\n            if Helpers.isObject value then\n                let fieldValue = Helpers.getField fieldName value\n                if Helpers.isUndefined fieldValue then Ok None\n                else decodeMaybeNull (path + \".\" + fieldName) decoder fieldValue\n            else\n                Error(path, BadType(\"an object\", value))\n\n    let private badPathError fieldNames currentPath value =\n        let currentPath = defaultArg currentPath (\"$\"::fieldNames |> String.concat \".\")\n        let msg = \"an object with path `\" + (String.concat \".\" fieldNames) + \"`\"\n        Error(currentPath, BadPath (msg, value, List.tryLast fieldNames |> Option.defaultValue \"\"))\n\n    let optionalAt (fieldNames : string list) (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun firstPath firstValue ->\n            ((firstPath, firstValue, None), fieldNames)\n            ||> List.fold (fun (curPath, curValue, res) field ->\n                match res with\n                | Some _ -> curPath, curValue, res\n                | None ->\n                    if Helpers.isNullValue curValue then\n                        let res = badPathError fieldNames (Some curPath) firstValue\n                        curPath, curValue, Some res\n                    elif Helpers.isObject curValue then\n                        let curValue = Helpers.getField field curValue\n                        curPath + \".\" + field, curValue, None\n                    else\n                        let res = Error(curPath, BadType(\"an object\", curValue))\n                        curPath, curValue, Some res)\n            |> function\n                | _, _, Some res -> res\n                | lastPath, lastValue, None ->\n                    if Helpers.isUndefined lastValue then Ok None\n                    else decodeMaybeNull lastPath decoder lastValue\n\n    let field (fieldName: string) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun path value ->\n            if Helpers.isObject value then\n                let fieldValue = Helpers.getField fieldName value\n                if Helpers.isUndefined fieldValue then\n                    Error(path, BadField (\"an object with a field named `\" + fieldName + \"`\", value))\n                else\n                    decoder (path + \".\" + fieldName) fieldValue\n            else\n                Error(path, BadType(\"an object\", value))\n\n    let at (fieldNames: string list) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun firstPath firstValue ->\n            ((firstPath, firstValue, None), fieldNames)\n            ||> List.fold (fun (curPath, curValue, res) field ->\n                match res with\n                | Some _ -> curPath, curValue, res\n                | None ->\n                    if Helpers.isNullValue curValue then\n                        let res = badPathError fieldNames (Some curPath) firstValue\n                        curPath, curValue, Some res\n                    elif Helpers.isObject curValue then\n                        let curValue = Helpers.getField field curValue\n                        if Helpers.isUndefined curValue then\n                            let res = badPathError fieldNames None firstValue\n                            curPath, curValue, Some res\n                        else\n                            curPath + \".\" + field, curValue, None\n                    else\n                        let res = Error(curPath, BadType(\"an object\", curValue))\n                        curPath, curValue, Some res)\n            |> function\n                | _, _, Some res -> res\n                | lastPath, lastValue, None ->\n                    decoder lastPath lastValue\n\n    let index (requestedIndex: int) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun path value ->\n            let currentPath = path + \".[\" + (Operators.string requestedIndex) + \"]\"\n            if Helpers.isArray value then\n                let vArray = Helpers.asArray value\n                if requestedIndex < vArray.Length then\n                    decoder currentPath (vArray.[requestedIndex])\n                else\n                    let msg =\n                        \"a longer array. Need index `\"\n                            + (requestedIndex.ToString())\n                            + \"` but there are only `\"\n                            + (vArray.Length.ToString())\n                            + \"` entries\"\n\n                    (currentPath, TooSmallArray(msg, value))\n                    |> Error\n            else\n                (currentPath, BadPrimitive(\"an array\", value))\n                |> Error\n\n    let option (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun path value ->\n            if Helpers.isNullValue value then Ok None\n            else decoder path value |> Result.map Some\n\n    //////////////////////\n    // Data structure ///\n    ////////////////////\n\n    let list (decoder : Decoder<'value>) : Decoder<'value list> =\n        fun path value ->\n            if Helpers.isArray value then\n                let mutable i = -1\n                let tokens = Helpers.asArray value\n                (Ok [], tokens) ||> Array.fold (fun acc value ->\n                    i <- i + 1\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match decoder (path + \".[\" + (i.ToString()) + \"]\") value with\n                        | Error er -> Error er\n                        | Ok value -> Ok (value::acc))\n                |> Result.map List.rev\n            else\n                (path, BadPrimitive (\"a list\", value))\n                |> Error\n\n    let array (decoder : Decoder<'value>) : Decoder<'value array> =\n        fun path value ->\n            if Helpers.isArray value then\n                let mutable i = -1\n                let tokens = Helpers.asArray value\n                let arr = Array.zeroCreate tokens.Length\n                (Ok arr, tokens) ||> Array.fold (fun acc value ->\n                    i <- i + 1\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match decoder (path + \".[\" + (i.ToString()) + \"]\") value with\n                        | Error er -> Error er\n                        | Ok value -> acc.[i] <- value; Ok acc)\n            else\n                (path, BadPrimitive (\"an array\", value))\n                |> Error\n\n    let keyValuePairs (decoder : Decoder<'value>) : Decoder<(string * 'value) list> =\n        fun path value ->\n            if Helpers.isObject value then\n                (Ok [], Helpers.objectKeys value) ||> Seq.fold (fun acc prop ->\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match Helpers.getField prop value |> decoder path with\n                        | Error er -> Error er\n                        | Ok value -> (prop, value)::acc |> Ok)\n                |> Result.map List.rev\n            else\n                (path, BadPrimitive (\"an object\", value))\n                |> Error\n\n    //////////////////////////////\n    // Inconsistent Structure ///\n    ////////////////////////////\n\n    let oneOf (decoders : Decoder<'value> list) : Decoder<'value> =\n        fun path value ->\n            let rec runner (decoders : Decoder<'value> list) (errors : string list) =\n                match decoders with\n                | head::tail ->\n                    match fromValue path head value with\n                    | Ok v ->\n                        Ok v\n                    | Error error -> runner tail (errors @ [error])\n                | [] -> (path, BadOneOf errors) |> Error\n\n            runner decoders []\n\n    //////////////////////\n    // Fancy decoding ///\n    ////////////////////\n\n    let nil (output : 'a) : Decoder<'a> =\n        fun path value ->\n            if Helpers.isNullValue value then\n                Ok output\n            else\n                (path, BadPrimitive(\"null\", value)) |> Error\n\n    let value _ v = Ok v\n\n    let succeed (output : 'a) : Decoder<'a> =\n        fun _ _ ->\n            Ok output\n\n    let fail (msg: string) : Decoder<'a> =\n        fun path _ ->\n            (path, FailMessage msg) |> Error\n\n    let andThen (cb: 'a -> Decoder<'b>) (decoder : Decoder<'a>) : Decoder<'b> =\n        fun path value ->\n            match decoder path value with\n            | Error error -> Error error\n            | Ok result -> cb result path value\n\n    /////////////////////\n    // Map functions ///\n    ///////////////////\n\n    let map\n        (ctor : 'a -> 'value)\n        (d1 : Decoder<'a>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value with\n            | Ok v1 -> Ok (ctor v1)\n            | Error er -> Error er\n\n    let map2\n        (ctor : 'a -> 'b -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value with\n            | Ok v1, Ok v2 -> Ok (ctor v1 v2)\n            | Error er,_ -> Error er\n            | _,Error er -> Error er\n\n    let map3\n        (ctor : 'a -> 'b -> 'c -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value with\n            | Ok v1, Ok v2, Ok v3 -> Ok (ctor v1 v2 v3)\n            | Error er,_,_ -> Error er\n            | _,Error er,_ -> Error er\n            | _,_,Error er -> Error er\n\n    let map4\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4 -> Ok (ctor v1 v2 v3 v4)\n            | Error er,_,_,_ -> Error er\n            | _,Error er,_,_ -> Error er\n            | _,_,Error er,_ -> Error er\n            | _,_,_,Error er -> Error er\n\n    let map5\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5 -> Ok (ctor v1 v2 v3 v4 v5)\n            | Error er,_,_,_,_ -> Error er\n            | _,Error er,_,_,_ -> Error er\n            | _,_,Error er,_,_ -> Error er\n            | _,_,_,Error er,_ -> Error er\n            | _,_,_,_,Error er -> Error er\n\n    let map6\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6 -> Ok (ctor v1 v2 v3 v4 v5 v6)\n            | Error er,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_ -> Error er\n            | _,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,Error er -> Error er\n\n    let map7\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>)\n        (d7 : Decoder<'g>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value, d7 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6, Ok v7 -> Ok (ctor v1 v2 v3 v4 v5 v6 v7)\n            | Error er,_,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_,_ -> Error er\n            | _,_,_,Error er,_,_,_ -> Error er\n            | _,_,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,_,Error er -> Error er\n\n    let map8\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g -> 'h -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>)\n        (d7 : Decoder<'g>)\n        (d8 : Decoder<'h>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value, d7 path value, d8 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6, Ok v7, Ok v8 -> Ok (ctor v1 v2 v3 v4 v5 v6 v7 v8)\n            | Error er,_,_,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_,_,_ -> Error er\n            | _,_,_,Error er,_,_,_,_ -> Error er\n            | _,_,_,_,Error er,_,_,_ -> Error er\n            | _,_,_,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,_,_,Error er -> Error er\n\n    let dict (decoder : Decoder<'value>) : Decoder<Map<string, 'value>> =\n        map Map.ofList (keyValuePairs decoder)\n\n    //////////////////////\n    // Object builder ///\n    ////////////////////\n\n    type IRequiredGetter =\n        abstract Field : string -> Decoder<'a> -> 'a\n        abstract At : List<string> -> Decoder<'a> -> 'a\n        abstract Raw : Decoder<'a> -> 'a\n\n    type IOptionalGetter =\n        abstract Field : string -> Decoder<'a> -> 'a option\n        abstract At : List<string> -> Decoder<'a> -> 'a option\n        abstract Raw : Decoder<'a> -> 'a option\n\n    type IGetters =\n        abstract Required: IRequiredGetter\n        abstract Optional: IOptionalGetter\n\n    let private unwrapWith (errors: ResizeArray<DecoderError>) path (decoder: Decoder<'T>) value: 'T =\n        match decoder path value with\n        | Ok v -> v\n        | Error er -> errors.Add(er); Unchecked.defaultof<'T>\n\n    type Getters<'T>(path: string, v: 'T) =\n        let mutable errors = ResizeArray<DecoderError>()\n        let required =\n            { new IRequiredGetter with\n                member __.Field (fieldName : string) (decoder : Decoder<_>) =\n                    unwrapWith errors path (field fieldName decoder) v\n                member __.At (fieldNames : string list) (decoder : Decoder<_>) =\n                    unwrapWith errors path (at fieldNames decoder) v\n                member __.Raw (decoder: Decoder<_>) =\n                    unwrapWith errors path decoder v }\n        let optional =\n            { new IOptionalGetter with\n                member __.Field (fieldName : string) (decoder : Decoder<_>) =\n                    unwrapWith errors path (optional fieldName decoder) v\n                member __.At (fieldNames : string list) (decoder : Decoder<_>) =\n                    unwrapWith errors path (optionalAt fieldNames decoder) v\n                member __.Raw (decoder: Decoder<_>) =\n                    match decoder path v with\n                    | Ok v -> Some v\n                    | Error((_, reason) as error) ->\n                        match reason with\n                        | BadPrimitive(_,v)\n                        | BadPrimitiveExtra(_,v,_)\n                        | BadType(_,v) ->\n                            if Helpers.isNullValue v then None\n                            else errors.Add(error); Unchecked.defaultof<_>\n                        | BadField _\n                        | BadPath _ -> None\n                        | TooSmallArray _\n                        | FailMessage _\n                        | BadOneOf _ -> errors.Add(error); Unchecked.defaultof<_> }\n        member __.Errors: _ list = Seq.toList errors\n        interface IGetters with\n            member __.Required = required\n            member __.Optional = optional\n\n    let object (builder: IGetters -> 'value) : Decoder<'value> =\n        fun path v ->\n            let getters = Getters(path, v)\n            let result = builder getters\n            match getters.Errors with\n            | [] -> Ok result\n            | fst::_ as errors ->\n                if errors.Length > 1 then\n                    let errors = List.map errorToString errors\n                    (path, BadOneOf errors) |> Error\n                else\n                    Error fst\n\n    ///////////////////////\n    // Tuples decoders ///\n    ////////////////////\n\n    let tuple2 (decoder1: Decoder<'T1>) (decoder2: Decoder<'T2>) : Decoder<'T1 * 'T2> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                succeed (v1, v2)\n            )\n        )\n\n    let tuple3 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>) : Decoder<'T1 * 'T2 * 'T3> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    succeed (v1, v2, v3)\n                )\n            )\n        )\n\n    let tuple4 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>) : Decoder<'T1 * 'T2 * 'T3 * 'T4> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        succeed (v1, v2, v3, v4)\n                    )\n                )\n            )\n        )\n\n    let tuple5 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            succeed (v1, v2, v3, v4, v5)\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple6 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                succeed (v1, v2, v3, v4, v5, v6)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple7 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>)\n               (decoder7: Decoder<'T7>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                index 6 decoder7\n                                |> andThen (fun v7 ->\n                                    succeed (v1, v2, v3, v4, v5, v6, v7)\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple8 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>)\n               (decoder7: Decoder<'T7>)\n               (decoder8: Decoder<'T8>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                index 6 decoder7\n                                |> andThen (fun v7 ->\n                                    index 7 decoder8\n                                    |> andThen (fun v8 ->\n                                        succeed (v1, v2, v3, v4, v5, v6, v7, v8)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    //////////////////\n    // Reflection ///\n    ////////////////\n\n    open FSharp.Reflection\n\n    // As generics are erased by Fable, let's just do an unsafe cast for performance\n    let inline boxDecoder (d: Decoder<'T>): BoxedDecoder =\n        !!d // d >> Result.map box\n\n    let inline unboxDecoder (d: BoxedDecoder): Decoder<'T> =\n        !!d // d >> Result.map unbox\n\n    // This is used to force Fable use a generic comparer for map keys\n    let private toMap<'key, 'value when 'key: comparison> (xs: ('key*'value) seq) = Map.ofSeq xs\n    let private toSet<'key when 'key: comparison> (xs: 'key seq) = Set.ofSeq xs\n\n    let private autoObject (decoderInfos: (string * BoxedDecoder)[]) (path : string) (value: JsonValue) =\n        if not (Helpers.isObject value) then\n            (path, BadPrimitive (\"an object\", value)) |> Error\n        else\n            (decoderInfos, Ok []) ||> Array.foldBack (fun (name, decoder) acc ->\n                match acc with\n                | Error _ -> acc\n                | Ok result ->\n                    Helpers.getField name value\n                    |> decoder (path + \".\" + name)\n                    |> Result.map (fun v -> v::result))\n\n    let private autoObject2 (keyDecoder: BoxedDecoder) (valueDecoder: BoxedDecoder) (path : string) (value: JsonValue) =\n        if not (Helpers.isObject value) then\n            (path, BadPrimitive (\"an object\", value)) |> Error\n        else\n            (Ok [], Helpers.objectKeys(value)) ||> Seq.fold (fun acc name ->\n                match acc with\n                | Error _ -> acc\n                | Ok acc ->\n                    match keyDecoder path name with\n                    | Error er -> Error er\n                    | Ok k ->\n                        Helpers.getField name value\n                        |> valueDecoder (path + \".\" + name)\n                        |> function\n                            | Error er -> Error er\n                            | Ok v -> (k,v)::acc |> Ok)\n\n    let private mixedArray msg (decoders: BoxedDecoder[]) (path: string) (values: JsonValue[]): Result<JsonValue list, DecoderError> =\n        if decoders.Length <> values.Length then\n            (path, sprintf \"Expected %i %s but got %i\" decoders.Length msg values.Length\n            |> FailMessage) |> Error\n        else\n            (values, decoders, Ok [])\n            |||> Array.foldBack2 (fun value decoder acc ->\n                match acc with\n                | Error _ -> acc\n                | Ok result -> decoder path value |> Result.map (fun v -> v::result))\n\n    let rec private makeUnion extra isCamelCase t name (path : string) (values: JsonValue[]) =\n        let uci =\n            FSharpType.GetUnionCases(t, allowAccessToPrivateRepresentation=true)\n            |> Array.tryFind (fun x -> x.Name = name)\n        match uci with\n        | None -> (path, FailMessage(\"Cannot find case \" + name + \" in \" + t.FullName)) |> Error\n        | Some uci ->\n            if values.Length = 0 then\n                FSharpValue.MakeUnion(uci, [||], allowAccessToPrivateRepresentation=true) |> Ok\n            else\n                let decoders = uci.GetFields() |> Array.map (fun fi -> autoDecoder extra isCamelCase false fi.PropertyType)\n                mixedArray \"union fields\" decoders path values\n                |> Result.map (fun values -> FSharpValue.MakeUnion(uci, List.toArray values, allowAccessToPrivateRepresentation=true))\n\n    and private autoDecodeRecordsAndUnions extra (isCamelCase : bool) (isOptional : bool) (t: System.Type) : BoxedDecoder =\n        // Add the decoder to extra in case one of the fields is recursive\n        let decoderRef = ref Unchecked.defaultof<_>\n        let extra = extra |> Map.add t.FullName decoderRef\n        let decoder =\n            if FSharpType.IsRecord(t, allowAccessToPrivateRepresentation=true) then\n                let decoders =\n                    FSharpType.GetRecordFields(t, allowAccessToPrivateRepresentation=true)\n                    |> Array.map (fun fi ->\n                        let name =\n                            if isCamelCase then fi.Name.[..0].ToLowerInvariant() + fi.Name.[1..]\n                            else fi.Name\n                        name, autoDecoder extra isCamelCase false fi.PropertyType)\n                fun path value ->\n                    autoObject decoders path value\n                    |> Result.map (fun xs -> FSharpValue.MakeRecord(t, List.toArray xs, allowAccessToPrivateRepresentation=true))\n\n            elif FSharpType.IsUnion(t, allowAccessToPrivateRepresentation=true) then\n                fun path (value: JsonValue) ->\n                    if Helpers.isString(value) then\n                        let name = Helpers.asString value\n                        makeUnion extra isCamelCase t name path [||]\n                    elif Helpers.isArray(value) then\n                        let values = Helpers.asArray value\n                        let name = Helpers.asString values.[0]\n                        makeUnion extra isCamelCase t name path values.[1..]\n                    else (path, BadPrimitive(\"a string or array\", value)) |> Error\n\n            else\n                if isOptional then\n                    // The error will only happen at runtime if the value is not null\n                    // See https://github.com/MangelMaxime/Thoth/pull/84#issuecomment-444837773\n                    boxDecoder(fun path value -> Error(path, BadType(\"an extra coder for \" + t.FullName, value)))\n                else\n                    // Don't use failwithf here, for some reason F#/Fable compiles it as a function\n                    // when the return type is a function too, so it doesn't fail immediately\n                    sprintf \"Cannot generate auto decoder for %s. Please pass an extra decoder.\" t.FullName |> failwith\n        decoderRef := decoder\n        decoder\n\n    and private autoDecoder (extra: Map<string, ref<BoxedDecoder>>) isCamelCase (isOptional : bool) (t: System.Type) : BoxedDecoder =\n      let fullname = t.FullName\n      match Map.tryFind fullname extra with\n      | Some decoderRef -> fun path value -> decoderRef.contents path value\n      | None ->\n        if t.IsArray then\n            let decoder = t.GetElementType() |> autoDecoder extra isCamelCase false\n            array decoder |> boxDecoder\n        elif t.IsGenericType then\n            if FSharpType.IsTuple(t) then\n                let decoders = FSharpType.GetTupleElements(t) |> Array.map (autoDecoder extra isCamelCase false)\n                fun path value ->\n                    if Helpers.isArray value then\n                        mixedArray \"tuple elements\" decoders path (Helpers.asArray value)\n                        |> Result.map (fun xs -> FSharpValue.MakeTuple(List.toArray xs, t))\n                    else (path, BadPrimitive (\"an array\", value)) |> Error\n            else\n                let fullname = t.GetGenericTypeDefinition().FullName\n                if fullname = typedefof<obj option>.FullName then\n                    t.GenericTypeArguments.[0] |> (autoDecoder extra isCamelCase true) |> option |> boxDecoder\n                elif fullname = typedefof<obj list>.FullName then\n                    t.GenericTypeArguments.[0] |> (autoDecoder extra isCamelCase false) |> list |> boxDecoder\n                elif fullname = typedefof< Map<string, obj> >.FullName then\n                    let keyDecoder = t.GenericTypeArguments.[0] |> autoDecoder extra isCamelCase false\n                    let valueDecoder = t.GenericTypeArguments.[1] |> autoDecoder extra isCamelCase false\n                    oneOf [\n                        autoObject2 keyDecoder valueDecoder\n                        list (tuple2 keyDecoder valueDecoder)\n                    ] |> map (fun ar -> toMap (unbox ar) |> box)\n                elif fullname = typedefof< Set<string> >.FullName then\n                    let decoder = t.GenericTypeArguments.[0] |> autoDecoder extra isCamelCase false\n                    fun path value ->\n                        match array decoder path value with\n                        | Error er -> Error er\n                        | Ok ar -> toSet (unbox ar) |> box |> Ok\n                else\n                    autoDecodeRecordsAndUnions extra isCamelCase isOptional t\n        else\n            if fullname = typeof<bool>.FullName then\n                boxDecoder bool\n            elif fullname = typeof<string>.FullName then\n                boxDecoder string\n            elif fullname = typeof<int>.FullName then\n                boxDecoder int\n            elif fullname = typeof<uint32>.FullName then\n                boxDecoder uint32\n            elif fullname = typeof<float>.FullName then\n                boxDecoder float\n            // These number types require extra libraries in Fable. To prevent penalizing\n            // all users, extra decoders (withInt64, etc) must be passed when they're needed.\n\n            // elif fullname = typeof<int64>.FullName then\n            //     boxDecoder int64\n            // elif fullname = typeof<uint64>.FullName then\n            //     boxDecoder uint64\n            // elif fullname = typeof<bigint>.FullName then\n            //     boxDecoder bigint\n            // elif fullname = typeof<decimal>.FullName then\n            //     boxDecoder decimal\n            elif fullname = typeof<System.DateTime>.FullName then\n                boxDecoder datetime\n            elif fullname = typeof<System.DateTimeOffset>.FullName then\n                boxDecoder datetimeOffset\n            elif fullname = typeof<System.TimeSpan>.FullName then\n                boxDecoder timespan\n            elif fullname = typeof<System.Guid>.FullName then\n                boxDecoder guid\n            elif fullname = typeof<obj>.FullName then\n                fun _ v -> Ok v\n            else autoDecodeRecordsAndUnions extra isCamelCase isOptional t\n\n    let private makeExtra (extra: ExtraCoders option) =\n        match extra with\n        | None -> Map.empty\n        | Some e -> Map.map (fun _ (_,dec) -> ref dec) e\n\n    type Auto =\n        /// ATTENTION: Use this only when other arguments (isCamelCase, extra) don't change\n        static member generateDecoderCached<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Decoder<'T> =\n            let t = Util.resolveType resolver\n            Util.CachedDecoders.GetOrAdd(t.FullName, fun _ ->\n                let isCamelCase = defaultArg isCamelCase false\n                autoDecoder (makeExtra extra) isCamelCase false t) |> unboxDecoder\n\n        static member generateDecoder<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Decoder<'T> =\n            let isCamelCase = defaultArg isCamelCase false\n            Util.resolveType resolver\n            |> autoDecoder (makeExtra extra) isCamelCase false |> unboxDecoder\n\n        static member fromString<'T>(json: string, ?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Result<'T, string> =\n            let decoder = Auto.generateDecoder(?isCamelCase=isCamelCase, ?extra=extra, ?resolver=resolver)\n            fromString decoder json\n\n        static member unsafeFromString<'T>(json: string, ?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): 'T =\n            let decoder = Auto.generateDecoder(?isCamelCase=isCamelCase, ?extra=extra, ?resolver=resolver)\n            match fromString decoder json with\n            | Ok x -> x\n            | Error msg -> failwith msg\n","﻿module ParseWorksheet\r\n\r\nopen Newtonsoft.Json.Linq\r\nopen System\r\nopen System.Text.RegularExpressions\r\n#if FABLE_COMPILER\r\nopen Thoth.Json\r\n#else\r\nopen Thoth.Json.Net\r\n#endif\r\n\r\ntype Class = {\r\n    Level: int\r\n    ParallelClass: string\r\n    Type: string\r\n    Department: string\r\n}\r\n\r\nmodule Class =\r\n    let tryParse text =\r\n        let m = Regex.Match(text, @\"^(\\d+)(\\w)(\\w)(\\w+)$\")\r\n        if m.Success then\r\n            Some {\r\n                Level = int m.Groups.[1].Value\r\n                ParallelClass = m.Groups.[2].Value\r\n                Type = m.Groups.[3].Value\r\n                Department = m.Groups.[4].Value\r\n            }\r\n        else None\r\n\r\n    let toString v =\r\n        sprintf \"%d%s%s%s\" v.Level v.ParallelClass v.Type v.Department\r\n\r\n    let decoder : Decoder<_> =\r\n        Decode.string |> Decode.andThen (fun text ->\r\n            match tryParse text with\r\n            | Some result -> Decode.succeed result\r\n            | None -> Decode.fail (sprintf \"Can't decode \\\"%s\\\" as class\" text))\r\n\r\n    let encode v =\r\n        toString v\r\n        |> Encode.string\r\n\r\nlet tryParseFloat text =\r\n    match System.Double.TryParse text with\r\n    | (true, value) -> Some value\r\n    | _ -> None\r\n\r\nlet tryParseInt text =\r\n    match System.Int32.TryParse text with\r\n    | (true, value) -> Some value\r\n    | _ -> None\r\n\r\ntype Student = {\r\n    LastName: string\r\n    FirstName: string\r\n}\r\n\r\nmodule Student =\r\n    let decoder : Decoder<_> =\r\n        Decode.object (fun get ->\r\n            {\r\n                LastName = get.Required.Field \"lastName\" Decode.string\r\n                FirstName = get.Required.Field \"firstName\" Decode.string\r\n            }\r\n        )\r\n\r\n    let encode v =\r\n        Encode.object [\r\n            \"lastName\", Encode.string v.LastName\r\n            \"firstName\", Encode.string v.FirstName\r\n        ]\r\n\r\n    let create lastName firstName =\r\n        { LastName = lastName; FirstName = firstName }\r\n\r\n    let fullName student =\r\n        sprintf \"%s %s\" (student.LastName.ToUpper()) student.FirstName\r\n\r\ntype Discipline = {\r\n    Name: string\r\n    Measurement: string\r\n}\r\n\r\nmodule Discipline =\r\n    let decoder : Decoder<_> =\r\n        Decode.object (fun get ->\r\n            {\r\n                Name = get.Required.Field \"name\" Decode.string\r\n                Measurement = get.Required.Field \"measurement\" Decode.string\r\n            }\r\n        )\r\n\r\n    let encode v =\r\n        Encode.object [\r\n            \"name\", Encode.string v.Name\r\n            \"measurement\", Encode.string v.Measurement\r\n        ]\r\n\r\n    let create name measurement =\r\n        { Name = name; Measurement = measurement }\r\n\r\ntype Performance = {\r\n    Discipline: Discipline\r\n    MeasurementValue: float option\r\n    Points: int option\r\n}\r\n\r\nmodule Performance =\r\n    let decoder : Decoder<_> =\r\n        Decode.object (fun get ->\r\n            {\r\n                Discipline = get.Required.Field \"discipline\" Discipline.decoder\r\n                MeasurementValue = get.Required.Field \"measurementValue\" (Decode.option Decode.float)\r\n                Points = get.Required.Field \"points\" (Decode.option Decode.int)\r\n            }\r\n        )\r\n\r\n    let encode v =\r\n        Encode.object [\r\n            \"discipline\", Discipline.encode v.Discipline\r\n            \"measurementValue\", Encode.option Encode.float v.MeasurementValue\r\n            \"points\", Encode.option Encode.int v.Points\r\n        ]\r\n\r\n    let create discipline measurementValue points =\r\n        { Discipline = discipline; MeasurementValue = measurementValue; Points = points }\r\n\r\ntype StudentPerformances = {\r\n    Student: Student\r\n    Performances: Performance list\r\n}\r\n\r\nmodule StudentPerformances =\r\n    let decoder : Decoder<_> =\r\n        Decode.object (fun get ->\r\n            {\r\n                Student = get.Required.Field \"student\" Student.decoder\r\n                Performances = get.Required.Field \"performances\" (Decode.list Performance.decoder)\r\n            }\r\n        )\r\n\r\n    let encode v =\r\n        Encode.object [\r\n            \"student\", Student.encode v.Student\r\n            \"performances\", v.Performances |> List.map Performance.encode |> Encode.list\r\n        ]\r\n\r\n    let create student performances =\r\n        { Student = student; Performances = performances }\r\n\r\ntype ClassPerformances = {\r\n    Class: Class\r\n    Performances: StudentPerformances list\r\n}\r\n\r\nmodule ClassPerformances =\r\n    let decoder : Decoder<_> =\r\n        Decode.object (fun get ->\r\n            {\r\n                Class = get.Required.Field \"class\" Class.decoder\r\n                Performances = get.Required.Field \"performances\" (Decode.list StudentPerformances.decoder)\r\n            }\r\n        )\r\n\r\n    let encode v =\r\n        Encode.object [\r\n            \"class\", Class.encode v.Class\r\n            \"performances\", v.Performances |> List.map StudentPerformances.encode |> Encode.list\r\n        ]\r\n\r\n    let create schoolClass performances =\r\n        { Class = schoolClass; Performances = performances }\r\n\r\ntype Cell = Cell of row: int * column: int\r\n\r\ntype DisciplineParseError =\r\n    | DisciplineNotFound of Cell\r\n    | MeasurementNotFound of Cell\r\n    | InvalidMeasurementValue of Cell * value: string\r\n    | InvalidPoints of Cell * value: string\r\n\r\ntype StudentParseError =\r\n    | EmptyStudentLastName of Cell\r\n    | EmptyStudentFirstName of Cell\r\n    | DisciplineParseErrors of DisciplineParseError list\r\n\r\ntype ParseError =\r\n    | NotEnoughRows\r\n    | StudentParseErrors of StudentParseError list\r\n\r\n#if !FABLE_COMPILER\r\nmodule Worksheet =\r\n    let private tryParseStudentPerformance disciplines header rowIndex (row: JToken) =\r\n        let lastName =\r\n            let col = 1\r\n            row\r\n            |> Seq.tryItem col\r\n            |> Option.map string\r\n            |> Option.bind String.noneIfNullOrWhitespace\r\n            |> Result.ofOption [ EmptyStudentLastName (Cell (rowIndex, col)) ]\r\n        let firstName =\r\n            let col = 2\r\n            row\r\n            |> Seq.tryItem col\r\n            |> Option.map string\r\n            |> Option.bind String.noneIfNullOrWhitespace\r\n            |> Result.ofOption [ EmptyStudentFirstName (Cell (rowIndex, col)) ]\r\n        let student =\r\n            Ok Student.create\r\n            |> Result.apply lastName\r\n            |> Result.apply firstName\r\n\r\n        let performances =\r\n            row\r\n            |> Seq.indexed\r\n            |> Seq.skip 3\r\n            |> Seq.chunkBySize 2\r\n            |> Seq.filter (fun cols -> cols.Length = 2)\r\n            |> Seq.map (fun cols -> (cols.[0], cols.[1]))\r\n            |> Seq.takeWhile (fun ((col1, _result), (_col2, _points)) ->\r\n                disciplines\r\n                |> Seq.tryItem col1\r\n                |> Option.map string\r\n                |> Option.bind String.noneIfNullOrWhitespace\r\n                |> Option.isSome\r\n            )\r\n            |> Seq.map (fun ((col1, measurement), (col2, points)) ->\r\n                let parsedDisciplineName =\r\n                    disciplines\r\n                    |> Seq.tryItem col1\r\n                    |> Option.map (string >> String.removeDuplicateWhitespace)\r\n                    |> Option.bind String.noneIfNullOrWhitespace\r\n                    |> Result.ofOption [ DisciplineNotFound (Cell (rowIndex, col1)) ]\r\n\r\n                let parsedMeasurementName =\r\n                    header\r\n                    |> Seq.tryItem col1\r\n                    |> Option.map (string >> String.removeDuplicateWhitespace)\r\n                    |> Option.bind String.noneIfNullOrWhitespace\r\n                    |> Result.ofOption [ MeasurementNotFound (Cell (rowIndex, col1)) ]\r\n\r\n                let parsedMeasurement =\r\n                    match String.noneIfNullOrWhitespace (string measurement) with\r\n                    | None -> Ok None\r\n                    | Some v ->\r\n                        tryParseFloat v\r\n                        |> Result.ofOption [ InvalidMeasurementValue (Cell (rowIndex, col1), measurement.ToString()) ]\r\n                        |> Result.map Some\r\n\r\n                let parsedPoints =\r\n                    match String.noneIfNullOrWhitespace (string points) with\r\n                    | None -> Ok None\r\n                    | Some v ->\r\n                        tryParseInt v\r\n                        |> Result.ofOption [ InvalidPoints (Cell (rowIndex, col2), points.ToString()) ]\r\n                        |> Result.map Some\r\n\r\n                let parsedDiscipline =\r\n                    Ok Discipline.create\r\n                    |> Result.apply parsedDisciplineName\r\n                    |> Result.apply parsedMeasurementName\r\n\r\n                Ok Performance.create\r\n                |> Result.apply parsedDiscipline\r\n                |> Result.apply parsedMeasurement\r\n                |> Result.apply parsedPoints\r\n            )\r\n            |> Seq.toList\r\n            |> List.sequenceResultApplicative\r\n            |> Result.mapError (List.collect id >> DisciplineParseErrors >> List.singleton)\r\n\r\n        Ok StudentPerformances.create\r\n        |> Result.apply student\r\n        |> Result.apply performances\r\n            \r\n    let tryParse (data: JToken) =\r\n        match data |> Seq.indexed |> Seq.toList with\r\n        | (_, disciplines) :: (_, header) :: values ->\r\n            values\r\n            |> List.takeWhile (fun (_index, row) -> not <| String.IsNullOrWhiteSpace (string row.[0]))\r\n            |> List.map (uncurry (tryParseStudentPerformance disciplines header))\r\n            |> List.sequenceResultApplicative\r\n            |> Result.mapError (List.collect id >> StudentParseErrors)\r\n        | _ -> Error NotEnoughRows\r\n#endif\r\n","namespace Fable.FontAwesome\n\nopen Fable.Core\nopen Fable.React\nopen Fable.React.Props\n\nmodule internal Helpers =\n\n    let classes std (options : string option list) (booleans: (string * bool) list) =\n        let std = (std, options) ||> List.fold (fun complete opt ->\n            match opt with Some name -> complete + \" \" + name | None -> complete)\n        (std, booleans) ||> List.fold (fun complete (name, flag) ->\n            if flag then complete + \" \" + name else complete)\n        |> ClassName :> IHTMLProp\n\n[<RequireQualifiedAccess>]\nmodule Fa =\n\n    module Classes =\n        module Size =\n            let [<Literal>] FaExtraSmall = \"fa-xs\"\n            let [<Literal>] FaSmall = \"fa-sm\"\n            let [<Literal>] FaLarge = \"fa-lg\"\n            let [<Literal>] Fa2x = \"fa-2x\"\n            let [<Literal>] Fa3x = \"fa-3x\"\n            let [<Literal>] Fa4x = \"fa-4x\"\n            let [<Literal>] Fa5x = \"fa-5x\"\n            let [<Literal>] Fa6x = \"fa-6x\"\n            let [<Literal>] Fa7x = \"fa-7x\"\n            let [<Literal>] Fa8x = \"fa-8x\"\n            let [<Literal>] Fa9x = \"fa-9x\"\n            let [<Literal>] Fa10 = \"fa-10x\"\n\n        module Style =\n            let [<Literal>] FixedWidth = \"fa-fw\"\n            let [<Literal>] IsLi = \"fa-li\"\n            let [<Literal>] Border = \"fa-border\"\n            let [<Literal>] Inverse = \"fa-inverse\"\n\n        module Rotations =\n            let [<Literal>] Rotate90 = \"fa-rotate-90\"\n            let [<Literal>] Rotate180 = \"fa-rotate-180\"\n            let [<Literal>] Rotate270 = \"fa-rotate-270\"\n\n        module Flips =\n            let [<Literal>] Horizontal = \"fa-flip-horizontal\"\n            let [<Literal>] Vertical = \"fa-flip-vertical\"\n\n        module Animations =\n            let [<Literal>] Spin = \"fa-spin\"\n            let [<Literal>] Pulse = \"fa-pulse\"\n\n        module Pull =\n            let [<Literal>] Right = \"fa-pull-right\"\n            let [<Literal>] Left = \"fa-pull-left\"\n\n        module Stack =\n\n            let [<Literal>] Container = \"fa-stack\"\n\n            module Size =\n                let [<Literal>] Fa1x = \"fa-stack-1x\"\n                let [<Literal>] Fa2x = \"fa-stack-2x\"\n\n    type ISize =\n        | FaExtraSmall\n        | FaSmall\n        | FaLarge\n        | Fa2x\n        | Fa3x\n        | Fa4x\n        | Fa5x\n        | Fa6x\n        | Fa7x\n        | Fa8x\n        | Fa9x\n        | Fa10\n\n    type IconOption =\n        | Size of ISize\n        | Border\n        | PullLeft\n        | PullRight\n        | Inverse\n        | Rotate90\n        | Rotate180\n        | Rotate270\n        | FlipHorizontal\n        | FlipVertical\n        | IsLi\n        | Icon of string\n        | Spin\n        | Pulse\n        | Props of IHTMLProp list\n        | CustomClass of string\n        | FixedWidth\n        | Stack1x\n        | Stack2x\n\n    let internal ofSize (size : ISize) =\n        match size with\n        | FaExtraSmall -> Classes.Size.FaExtraSmall\n        | FaSmall -> Classes.Size.FaSmall\n        | FaLarge -> Classes.Size.FaLarge\n        | Fa2x -> Classes.Size.Fa2x\n        | Fa3x -> Classes.Size.Fa3x\n        | Fa4x -> Classes.Size.Fa4x\n        | Fa5x -> Classes.Size.Fa5x\n        | Fa6x -> Classes.Size.Fa6x\n        | Fa7x -> Classes.Size.Fa7x\n        | Fa8x -> Classes.Size.Fa8x\n        | Fa9x -> Classes.Size.Fa9x\n        | Fa10 -> Classes.Size.Fa10\n\n    type IconOptions =\n        { Icon : string option\n          Size : string option\n          Border : string option\n          Pull : string option\n          HaveSpin : bool\n          HavePulse : bool\n          Rotation : string option\n          Flip : string option\n          IsInverse : bool\n          Props : IHTMLProp list\n          FixedWidth : bool\n          IsLi : bool\n          StackSize : string option\n          CustomClass : string option }\n\n        static member Empty =\n            { Icon = None\n              Size = None\n              Border = None\n              Pull = None\n              HaveSpin = false\n              HavePulse = false\n              Rotation = None\n              Flip = None\n              IsInverse = false\n              Props = [ ]\n              FixedWidth = false\n              IsLi = false\n              StackSize = None\n              CustomClass = None }\n\n    let toIconOptions (faOptions: IconOption list) =\n        let parseOptions (result: IconOptions) (option: IconOption) =\n            match option with\n            | Size s ->\n                { result with Size = ofSize s |> Some }\n            | Border ->\n                { result with Border = Some Classes.Style.Border }\n            | PullLeft ->\n                { result with Pull = Some Classes.Pull.Left }\n            | PullRight ->\n                { result with Pull = Some Classes.Pull.Right }\n            | Inverse ->\n                { result with IsInverse = true }\n            | Icon faIcon ->\n                { result with Icon = faIcon |> Some }\n            | Rotate90 ->\n                { result with Rotation = Classes.Rotations.Rotate90 |> Some }\n            | Rotate180 ->\n                { result with Rotation = Classes.Rotations.Rotate180 |> Some }\n            | Rotate270 ->\n                { result with Rotation = Classes.Rotations.Rotate270 |> Some }\n            | FlipHorizontal ->\n                { result with Rotation = Classes.Flips.Horizontal |> Some }\n            | FlipVertical ->\n                { result with Rotation = Classes.Flips.Vertical |> Some }\n            | Spin ->\n                { result with HaveSpin = true }\n            | Pulse ->\n                { result with HavePulse = true }\n            | Props props ->\n                { result with Props = props }\n            | FixedWidth ->\n                { result with FixedWidth = true }\n            | IsLi ->\n                { result with IsLi = true }\n            | CustomClass customClass ->\n                { result with CustomClass = Some customClass }\n            | Stack1x ->\n                { result with StackSize = Some Classes.Stack.Size.Fa1x }\n            | Stack2x ->\n                { result with StackSize = Some Classes.Stack.Size.Fa2x }\n\n        faOptions |> List.fold parseOptions IconOptions.Empty\n\n    /// Logic used to display one icon alone or as one item in an unordered list:\n    let internal displayIcon baseElement baseClass (opts: IconOptions) children  =\n        let classes =\n            Helpers.classes baseClass\n                [ opts.Icon\n                  opts.Size\n                  opts.Border\n                  opts.Pull\n                  opts.Rotation\n                  opts.Flip\n                  opts.CustomClass\n                  opts.StackSize ]\n                [ Classes.Style.FixedWidth, opts.FixedWidth\n                  Classes.Style.IsLi, opts.IsLi\n                  Classes.Animations.Pulse, opts.HavePulse\n                  Classes.Animations.Spin, opts.HaveSpin\n                  Classes.Style.Inverse, opts.IsInverse ]\n\n        baseElement (classes::opts.Props)\n          children\n\n    let ul props children =\n        ul [ ClassName \"fa-ul\" ]\n            children\n\n    let ol props children =\n        ol [ ClassName \"fa-ul\" ]\n            children\n\n    let i (faOptions: IconOption list) children =\n        let opts = toIconOptions faOptions\n        displayIcon i \"\" opts children\n\n    let span (faOptions: IconOption list) children =\n        let opts = toIconOptions faOptions\n        displayIcon span \"\" opts children\n\n    module Stack =\n        type Option =\n            | Size of ISize\n            | CustomClass of string\n            | Props of IHTMLProp list\n\n        type internal Options =\n            { Size : string option\n              Props : IHTMLProp list\n              CustomClass : string option }\n\n            static member Empty =\n                { Size = None\n                  Props = [ ]\n                  CustomClass = None }\n\n\n    let stack options children =\n        let parseOption (result : Stack.Options) opt =\n            match opt with\n            | Stack.Size size ->\n                { result with Size = ofSize size |> Some }\n            | Stack.CustomClass customClass ->\n                { result with CustomClass = Some customClass }\n            | Stack.Props props ->\n                { result with Props = props }\n\n        let opts = options |> List.fold parseOption Stack.Options.Empty\n        let classes = Helpers.classes\n                        Classes.Stack.Container\n                        ( opts.Size\n                            :: opts.CustomClass\n                            :: [] )\n                        [ ]\n\n        Fable.React.Standard.span (classes::opts.Props)\n            children\n","namespace Fulma\n\nopen Fable.React\nopen Fable.React.Props\n\nmodule Reflection =\n\n    open Microsoft.FSharp.Reflection\n    open System\n\n    let getCaseName (case : 'T) =\n#if FABLE_COMPILER\n        Fable.Core.Reflection.getCaseName case\n#else\n        // Get UnionCaseInfo value from the F# reflection tools\n        let (caseInfo, _args) = FSharpValue.GetUnionFields(case, typeof<'T>)\n        caseInfo.GetCustomAttributes()\n        |> Seq.tryPick (function\n                        | :? CompiledNameAttribute as att -> Some att.CompiledName\n                        | _ -> None)\n        |> Option.defaultWith (fun () -> caseInfo.Name)\n#endif\n\n    let getCaseTag (case : 'T) =\n#if FABLE_COMPILER\n        Fable.Core.Reflection.getCaseTag case\n#else\n        let (caseInfo, _args) = FSharpValue.GetUnionFields(case, typeof<'T>)\n        caseInfo.Tag\n#endif\n\n[<RequireQualifiedAccess>]\ntype Screen =\n    | All\n    | [<CompiledName(\"desktop\")>] Desktop\n    | [<CompiledName(\"tablet\")>] Tablet\n    | [<CompiledName(\"mobile\")>] Mobile\n    | [<CompiledName(\"widescreen\")>] WideScreen\n    | [<CompiledName(\"touch\")>] Touch\n    | [<CompiledName(\"fullhd\")>] FullHD\n\n    static member ToString (screen : Screen) =\n        match screen with\n        | All -> \"\"\n        | Desktop\n        | Tablet\n        | Mobile\n        | WideScreen\n        | Touch\n        | FullHD -> \"-\" + Reflection.getCaseName screen\n\n[<AutoOpen>]\nmodule Color =\n\n    type IColor =\n        | [<CompiledName(\"is-black\")>] IsBlack\n        | [<CompiledName(\"is-dark\")>] IsDark\n        | [<CompiledName(\"is-light\")>] IsLight\n        | [<CompiledName(\"is-white\")>] IsWhite\n        | [<CompiledName(\"is-primary\")>] IsPrimary\n        | [<CompiledName(\"is-info\")>] IsInfo\n        | [<CompiledName(\"is-success\")>] IsSuccess\n        | [<CompiledName(\"is-warning\")>] IsWarning\n        | [<CompiledName(\"is-danger\")>] IsDanger\n        | [<CompiledName(\"is-link\")>] IsLink\n        | [<CompiledName(\"is-black-bis\")>] IsBlackBis\n        | [<CompiledName(\"is-black-ter\")>] IsBlackTer\n        | [<CompiledName(\"is-grey-darker\")>] IsGreyDarker\n        | [<CompiledName(\"is-grey-dark\")>] IsGreyDark\n        | [<CompiledName(\"is-grey\")>] IsGrey\n        | [<CompiledName(\"is-grey-light\")>] IsGreyLight\n        | [<CompiledName(\"is-grey-lighter\")>] IsGreyLighter\n        | [<CompiledName(\"is-white-ter\")>] IsWhiteTer\n        | [<CompiledName(\"is-white-bis\")>] IsWhiteBis\n        /// Allow you to specify a custom color. The color will be prefixed by \"is-\"\n        | IsCustomColor of string\n        /// Allow you to specify a NoColor case.\n        | NoColor\n\n    let ofColor level =\n        match level with\n        | NoColor -> \"\"\n        | IsCustomColor color -> \"is-\" + color\n        | IsBlack\n        | IsDark\n        | IsLight\n        | IsWhite\n        | IsPrimary\n        | IsInfo\n        | IsSuccess\n        | IsWarning\n        | IsDanger\n        | IsLink\n        | IsBlackBis\n        | IsBlackTer\n        | IsGreyDarker\n        | IsGreyDark\n        | IsGrey\n        | IsGreyLight\n        | IsGreyLighter\n        | IsWhiteTer\n        | IsWhiteBis -> Reflection.getCaseName level\n\n[<AutoOpen>]\nmodule Size =\n\n    type ISize =\n        | [<CompiledName(\"is-small\")>] IsSmall\n        | [<CompiledName(\"is-medium\")>] IsMedium\n        | [<CompiledName(\"is-large\")>] IsLarge\n\n    let inline ofSize size =\n        Reflection.getCaseName size\n\n[<RequireQualifiedAccess>]\nmodule TextSize =\n    type Option =\n        | Is1\n        | Is2\n        | Is3\n        | Is4\n        | Is5\n        | Is6\n        | Is7\n\n        static member ToString (x: Option) =\n            Reflection.getCaseTag x + 1 |> string\n\n    let inline generic screen size =\n        \"is-size-\" + Option.ToString size + Screen.ToString screen\n\n    let inline only screen size =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            \"is-size-\" + Option.ToString size + Screen.ToString screen + \"-only\"\n        | x ->\n            Fable.Core.JS.console.warn(\"Screen `%s` does not support `is-size-xxx-only`.\" + string x)\n            \"\"\n\n[<RequireQualifiedAccess>]\nmodule TextAlignment =\n\n    type Option =\n        /// Add `has-text-centered`\n        | [<CompiledName(\"has-text-centered\")>] Centered\n        /// Add `has-text-justified`\n        | [<CompiledName(\"has-text-justified\")>] Justified\n        /// Add `has-text-left`\n        | [<CompiledName(\"has-text-left\")>] Left\n        /// Add `has-text-right`\n        | [<CompiledName(\"has-text-right\")>] Right\n\n        static member inline ToString opt =\n            Reflection.getCaseName opt\n\n    let inline generic screen alignment =\n        Option.ToString alignment + Screen.ToString screen\n\n    let inline only screen alignment =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            Option.ToString alignment + Screen.ToString screen + \"-only\"\n        | x ->\n            Fable.Core.JS.console.warn(\"Screen `%s` does not support `is-size-xxx-only`.\" + string x)\n            \"\"\n\n[<RequireQualifiedAccess>]\nmodule TextWeight =\n\n    type Option =\n        /// Add `has-text-weight-light`\n        | [<CompiledName(\"has-text-weight-light\")>] Light\n        /// Add `has-text-weight-normal`\n        | [<CompiledName(\"has-text-weight-normal\")>] Normal\n        /// Add `has-text-weight-semi-bold`\n        | [<CompiledName(\"has-text-weight-semi-bold\")>] SemiBold\n        /// Add `has-text-weight-bold`\n        | [<CompiledName(\"has-text-weight-bold\")>] Bold\n\n    let inline internal ofOption opt =\n        Reflection.getCaseName opt\n\n[<RequireQualifiedAccess>]\nmodule TextTransform =\n\n    type Option =\n        /// Add `is-capitalized`\n        | [<CompiledName(\"is-capitalized\")>] Capitalized\n        /// Add `is-lowercase`\n        | [<CompiledName(\"is-lowercase\")>] LowerCase\n        /// Add `is-uppercase`\n        | [<CompiledName(\"is-uppercase\")>] UpperCase\n        /// Add `is-italic`\n        | [<CompiledName(\"is-italic\")>] Italic\n\n        static member inline toClass opt =\n            Reflection.getCaseName opt\n\n[<RequireQualifiedAccess>]\nmodule Display =\n\n    type Option =\n        | [<CompiledName(\"block\")>] Block\n        | [<CompiledName(\"flex\")>] Flex\n        | [<CompiledName(\"inline\")>] Inline\n        | [<CompiledName(\"inline-block\")>] InlineBlock\n        | [<CompiledName(\"inline-flex\")>] InlineFlex\n\n        static member inline toClass opt =\n            Reflection.getCaseName opt\n\n    let internal toDisplayClass screen display =\n        let display = Option.toClass display\n        let screen = Screen.ToString screen\n\n        \"is-\" + display + screen\n\n    let internal toDisplayOnlyClass screen display =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            let display = Option.toClass display\n            let screen = Screen.ToString screen\n            \"is-\" + display + screen + \"-only\"\n\n        | x ->\n            Fable.Core.JS.console.warn(\"Screen `%s` does not support display only.\" + string x)\n            \"\"\n\n[<RequireQualifiedAccess>]\nmodule Modifier =\n    let internal ofBackground level =\n        match level with\n        | NoColor -> \"\"\n        | IsCustomColor color -> \"has-background-\" + color\n        | IsBlack\n        | IsDark\n        | IsLight\n        | IsWhite\n        | IsPrimary\n        | IsInfo\n        | IsSuccess\n        | IsWarning\n        | IsDanger\n        | IsLink\n        | IsBlackBis\n        | IsBlackTer\n        | IsGreyDarker\n        | IsGreyDark\n        | IsGrey\n        | IsGreyLight\n        | IsGreyLighter\n        | IsWhiteTer\n        | IsWhiteBis -> \"has-background-\" + (Reflection.getCaseName level).[3..]\n\n    let internal ofText level =\n        match level with\n        | NoColor -> \"\"\n        | IsCustomColor color -> \"has-text-\" + color\n        | IsBlack\n        | IsDark\n        | IsLight\n        | IsWhite\n        | IsPrimary\n        | IsInfo\n        | IsSuccess\n        | IsWarning\n        | IsDanger\n        | IsLink\n        | IsBlackBis\n        | IsBlackTer\n        | IsGreyDarker\n        | IsGreyDark\n        | IsGrey\n        | IsGreyLight\n        | IsGreyLighter\n        | IsWhiteTer\n        | IsWhiteBis -> \"has-text-\" + (Reflection.getCaseName level).[3..]\n\n    let internal ofInvisible screen =\n        \"is-invisible\" + Screen.ToString screen\n\n    let internal ofHidden screen =\n        \"is-hidden\" + Screen.ToString screen\n\n    let internal ofInvisibleOnly screen =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            \"is-invisible\" + Screen.ToString screen + \"-only\"\n        | x ->\n            Fable.Core.JS.console.warn(\"Screen `%s` does not support `is-invisible-xxx-only`.\" + string x)\n            \"\"\n\n    let internal ofHiddenOnly screen =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            \"is-hidden\" + Screen.ToString screen + \"-only\"\n        | x ->\n            Fable.Core.JS.console.warn(\"Screen `%s` does not support `is-hidden-xxx-only`.\" + string x)\n            \"\"\n\n    type IModifier =\n        | BackgroundColor of IColor\n        | TextColor of IColor\n        | TextWeight of TextWeight.Option\n        | TextSize of Screen * TextSize.Option\n        | TextSizeOnly of Screen * TextSize.Option\n        | TextAlignment of Screen * TextAlignment.Option\n        | TextAlignmentOnly of Screen * TextAlignment.Option\n        | TextTransform of TextTransform.Option\n        | Display of Screen * Display.Option\n        | DisplayOnly of Screen * Display.Option\n        | [<CompiledName(\"is-clearfix\")>] IsClearfix\n        | [<CompiledName(\"is-pulled-left\")>] IsPulledLeft\n        | [<CompiledName(\"is-pulled-right\")>] IsPulledRight\n        | [<CompiledName(\"is-marginless\")>] IsMarginless\n        | [<CompiledName(\"is-paddingless\")>] IsPaddingless\n        | [<CompiledName(\"is-overlay\")>] IsOverlay\n        | [<CompiledName(\"is-clipped\")>] IsClipped\n        | [<CompiledName(\"is-radiusless\")>] IsRadiusless\n        | [<CompiledName(\"is-shadowless\")>] IsShadowless\n        | [<CompiledName(\"is-unselectable\")>] IsUnselectable\n        | IsInvisible of Screen * bool\n        | IsHidden of Screen * bool\n        | IsInvisibleOnly of Screen * bool\n        | IsHiddenOnly of Screen * bool\n        | IsSrOnly\n        | IsScreenReaderOnly\n\n    let parseModifiers options =\n        let parseOptions result option =\n            match option with\n            | BackgroundColor color             -> (ofBackground color)::result\n            | TextColor color                   -> (ofText color)::result\n            | TextWeight textWeight             -> (TextWeight.ofOption textWeight)::result\n            | TextSize (screen, size)           -> (TextSize.generic screen size)::result\n            | TextSizeOnly (screen, size)       -> (TextSize.only screen size)::result\n            | TextAlignment (screen, size)      -> (TextAlignment.generic screen size)::result\n            | TextAlignmentOnly (screen, size)  -> (TextAlignment.only screen size)::result\n            | TextTransform transform           -> (TextTransform.Option.toClass transform)::result\n            | Display (screen, display)         -> (Display.toDisplayClass screen display)::result\n            | DisplayOnly (screen, display)     -> (Display.toDisplayOnlyClass screen display)::result\n            | IsInvisible (screen, b)           -> if b then (ofInvisible screen)::result else result\n            | IsInvisibleOnly (screen, b)       -> if b then (ofInvisibleOnly screen)::result else result\n            | IsHidden (screen, b)              -> if b then (ofHidden screen)::result else result\n            | IsHiddenOnly (screen, b)          -> if b then (ofHiddenOnly screen)::result else result\n            | IsSrOnly\n            | IsScreenReaderOnly -> \"is-sr-only\"::result\n            | IsClearfix\n            | IsPulledLeft\n            | IsPulledRight\n            | IsMarginless\n            | IsPaddingless\n            | IsOverlay\n            | IsClipped\n            | IsRadiusless\n            | IsShadowless\n            | IsUnselectable -> (Reflection.getCaseName option)::result\n\n        options |> List.fold parseOptions []\n\n[<AutoOpen>]\nmodule Common =\n    type GenericOption =\n        | CustomClass of string\n        | Props of IHTMLProp list\n        | Modifiers of Modifier.IModifier list\n\n    type GenericOptions =\n        { Props : IHTMLProp list\n          Classes : string list }\n\n        static member Empty =\n            { Props = []; Classes = [] }\n\n        static member Parse(options, parser, ?baseClass, ?baseProps) =\n            let result = options |> List.fold parser GenericOptions.Empty\n\n            let result =\n                match baseClass with\n                | Some baseClass -> result.AddClass(baseClass)\n                | None -> result\n\n            match baseProps with\n            | Some baseProps -> result.AddProps(baseProps)\n            | None -> result\n\n        member this.AddProp(prop : IHTMLProp) =\n            { this with Props = prop::this.Props }\n\n        member this.AddProps(props : IHTMLProp list) =\n            { this with Props = props@this.Props }\n\n        member this.AddClass(cl: string) =\n            { this with Classes = cl::this.Classes }\n\n        member this.RemoveClass(cl: string) =\n            let classes =\n                this.Classes\n                |> List.filter (fun cls ->\n                    cls <> cl\n                )\n            { this with Classes = classes }\n\n        member this.AddCaseName(case: 'T) =\n            Reflection.getCaseName case |> this.AddClass\n\n        member this.AddModifiers(modifiers) =\n            { this with Classes = (modifiers |> Modifier.parseModifiers) @ this.Classes }\n\n        /// Conver to standard element\n        member this.ToReactElement(el : IHTMLProp list -> ReactElement list -> ReactElement, ?children): ReactElement =\n            let children = defaultArg children []\n            // TODO: Remove empty classes?\n            let classes = String.concat \" \" this.Classes |> ClassName :> IHTMLProp\n            el (classes::this.Props) children\n\n        /// Convert to self closing element\n        member this.ToReactElement(el : IHTMLProp list -> ReactElement): ReactElement =\n            // TODO: Remove empty classes?\n            let classes = String.concat \" \" this.Classes |> ClassName :> IHTMLProp\n            el (classes::this.Props)\n\n    let parseOptions (result : GenericOptions) option =\n        match option with\n        | Props props -> result.AddProps props\n        | CustomClass customClass -> result.AddClass customClass\n        | Modifiers modifiers -> result.AddModifiers modifiers\n\n    module Helpers =\n\n        [<System.Obsolete(\"Use GenericOptions.Parse. This build an abstraction layer usable by all the components and helps reduce the bundle size\")>]\n        let classes std (options : string option list) (booleans: (string * bool) list) =\n            let std = (std, options) ||> List.fold (fun complete option ->\n                match option with\n                | Some name -> complete + \" \" + name\n                | None -> complete )\n            (std, booleans) ||> List.fold (fun complete (name, flag) ->\n                if flag then complete + \" \" + name else complete)\n            |> ClassName :> IHTMLProp\n\n[<RequireQualifiedAccess>]\nmodule Text =\n    open Fable.React\n\n    let p (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions).ToReactElement(p, children)\n\n    let div (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions).ToReactElement(div, children)\n\n    let span (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions).ToReactElement(span, children)\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\nopen Browser.Types\n\n[<RequireQualifiedAccess>]\nmodule Button =\n\n    type Option =\n        // Colors\n        | Color of IColor\n        | Size of ISize\n        /// Add `is-fullwidth` class\n        | [<CompiledName(\"is-fullwidth\")>] IsFullWidth\n        /// Add `is-link` class\n        | [<CompiledName(\"is-link\")>] IsLink\n        /// Add `is-outlined` class\n        | [<CompiledName(\"is-outlined\")>] IsOutlined\n        /// Add `is-inverted` class\n        | [<CompiledName(\"is-inverted\")>] IsInverted\n        /// Add `is-text` class\n        | [<CompiledName(\"is-text\")>] IsText\n        /// Add `is-rounded` class\n        | [<CompiledName(\"is-rounded\")>] IsRounded\n        /// Add `is-expanded` class\n        | [<CompiledName(\"is-expanded\")>] IsExpanded\n        /// Add `is-hovered` class if true\n        | [<CompiledName(\"is-hovered\")>] IsHovered of bool\n        /// Add `is-focused` class if true\n        | [<CompiledName(\"is-focused\")>] IsFocused of bool\n        /// Add `is-active` class if true\n        | [<CompiledName(\"is-active\")>] IsActive of bool\n        /// Add `is-loading` class if true\n        | [<CompiledName(\"is-loading\")>] IsLoading of bool\n        /// Add `is-static` class if true\n        | [<CompiledName(\"is-static\")>] IsStatic of bool\n        /// Set `disabled` HTMLAttr\n        | Disabled of bool\n        | Props of IHTMLProp list\n        | OnClick of (MouseEvent -> unit)\n        | CustomClass of string\n        | Modifiers of Modifier.IModifier list\n\n    let internal btnView element (options : Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | Color color -> ofColor color |> result.AddClass\n            | Size size -> ofSize size |> result.AddClass\n            // Styles\n            | IsLink\n            | IsFullWidth\n            | IsOutlined\n            | IsInverted\n            | IsText\n            | IsRounded\n            | IsExpanded -> result.AddCaseName option\n            // States\n            | IsHovered state\n            | IsFocused state\n            | IsActive state\n            | IsLoading state\n            | IsStatic state -> if state then result.AddCaseName option else result\n            | Disabled isDisabled -> Fable.React.Props.Disabled isDisabled |> result.AddProp\n            | OnClick cb -> DOMAttr.OnClick cb |> result.AddProp\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"button\").ToReactElement(element, children)\n\n    /// Generate <button class=\"button\"></button>\n    let button options children = btnView button options children\n    /// Generate <span class=\"button\"></span>\n    let span options children = btnView span options children\n    /// Generate <a class=\"button\"></a>\n    let a options children = btnView a options children\n\n    module Input =\n        let internal btnInput typ options =\n            let hasProps =\n                options\n                |> List.exists (fun opts ->\n                    match opts with\n                    | Props _ -> true\n                    | _ -> false\n                )\n\n            if hasProps then\n                let newOptions =\n                    options\n                    |> List.map (fun opts ->\n                        match opts with\n                        | Props props -> Props ((Type typ :> IHTMLProp) ::props)\n                        | forward -> forward\n                    )\n                btnView (fun options _ -> input options) newOptions [ ]\n\n            else\n                btnView (fun options _ -> input options) ((Props [ Type typ ])::options) [ ]\n\n        /// Generate <input type=\"reset\" class=\"button\" />\n        let reset options = btnInput \"reset\" options\n        /// Generate <input type=\"submit\" class=\"button\" />\n        let submit options = btnInput \"submit\" options\n\n    module List =\n\n        type Option =\n            | [<CompiledName(\"has-addons\")>] HasAddons\n            | [<CompiledName(\"is-centered\")>] IsCentered\n            | [<CompiledName(\"is-right\")>] IsRight\n            // | Size of ISize\n            | Props of IHTMLProp list\n            | CustomClass of string\n            | Modifiers of Modifier.IModifier list\n\n    /// Generate <div class=\"buttons\"></div>\n    let list (options : List.Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | List.HasAddons\n            | List.IsCentered\n            | List.IsRight -> result.AddCaseName option\n            | List.Props props -> result.AddProps props\n            | List.CustomClass customClass -> result.AddClass customClass\n            | List.Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"buttons\").ToReactElement(div, children)\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Container =\n\n    type Option =\n        /// Add `is-fluid` class\n        | [<CompiledName(\"is-fluid\")>] IsFluid\n        /// Add `is-widescreen` class\n        | [<CompiledName(\"is-widescreen\")>] IsWideScreen\n        /// Add `is-fullhd` class\n        | [<CompiledName(\"is-fullhd\")>] IsFullHD\n        | Props of IHTMLProp list\n        | CustomClass of string\n        | Modifiers of Modifier.IModifier list\n\n    /// Generate <div class=\"container\"></div>\n    let container (options: Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | IsFluid\n            | IsWideScreen\n            | IsFullHD -> result.AddCaseName option\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"container\").ToReactElement(div, children)\n","namespace Elmish.Streams\n\nopen System.Threading\n\nopen Fable.Core\nopen Browser\nopen Browser.Types\n\nopen FSharp.Control\n\n\n/// AsyncRx Extensions\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\nmodule AsyncRx =\n    /// Returns an observable that produces a notification when the\n    /// promise resolves. The observable will also complete after\n    /// producing an event.\n    let ofPromise (pr: Fable.Core.JS.Promise<_>) =\n        AsyncRx.ofAsyncWorker(fun obv _ -> async {\n            try\n                let! result = Async.AwaitPromise pr\n                do! obv.OnNextAsync result\n                do! obv.OnCompletedAsync ()\n            with\n            | ex ->\n                do! obv.OnErrorAsync ex\n        })\n\n    /// Returns an async observable of Window events.\n    let ofEvent<'ev> event : IAsyncObservable<'ev> =\n        let cts = new CancellationTokenSource()\n\n        let subscribe (obv: IAsyncObserver<'ev'>) : Async<IAsyncDisposable> =\n            async {\n                let mb = MailboxProcessor.Start(fun inbox ->\n                    let rec messageLoop _ = async {\n                        let! ev = inbox.Receive ()\n                        do! obv.OnNextAsync ev\n\n                        return! messageLoop ()\n                    }\n                    messageLoop ()\n                , cts.Token)\n\n                window.addEventListener (event, unbox mb.Post)\n                let cancel () = async {\n                    cts.Cancel ()\n                    window.removeEventListener (event, unbox mb.Post)\n                }\n                return AsyncDisposable.Create cancel\n            }\n\n        AsyncRx.create subscribe\n\n    /// Returns an async observable of mouse events.\n    let ofMouseMove () : IAsyncObservable<MouseEvent> =\n        ofEvent \"mousemove\"\n\n    /// Websocket channel operator. Passes string items as ws messages to\n    /// the server. Received ws messages will be forwarded down stream.\n    /// JSON encode/decode of application messages is left to the client.\n    let inline channel (uri: string) (source: IAsyncObservable<string>) : IAsyncObservable<string> =\n        Elmish.Streams.WebSocket.channel uri source\n\n    /// Websocket message channel operator. Items {'msg} will be encoded\n    /// to JSON using `encode` and passed as over the ws channel to the server.\n    /// Data received on the ws channel as strings (JSON) will be\n    /// decoded using `decode` and forwarded down stream as messages {'msg}.\n    let inline msgChannel<'msg> (uri: string) (encode: 'msg -> string) (decode: string -> 'msg option) (source: IAsyncObservable<'msg>) : IAsyncObservable<'msg> =\n        Elmish.Streams.WebSocket.msgChannel uri encode decode source\n\n    /// Websocket message channel operator. Items {'msg} will be encoded\n    /// to JSON using `encode` and passed as over the ws channel to the server.\n    /// Data received on the ws channel as strings (JSON) will be\n    /// decoded using `decode` and forwarded down stream as messages {Result<'msg, exn>}.\n    let msgResultChannel<'msg> (uri: string) (encode: 'msg -> string) (decode: string -> Result<'msg, exn>) (source: IAsyncObservable<'msg>) : IAsyncObservable<Result<'msg, exn>> =\n        Elmish.Streams.WebSocket.msgResultChannel uri encode decode source\n\n    /// Turn the observable into a named stream\n    let inline toStream (name: 'name) (source: IAsyncObservable<'a>) : Stream<'a, 'name> =\n        Stream [source, name]\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Heading =\n\n    type Option =\n        /// Add `is-1` class\n        | [<CompiledName(\"is-1\")>]Is1\n        /// Add `is-2` class\n        | [<CompiledName(\"is-2\")>]Is2\n        /// Add `is-3` class\n        | [<CompiledName(\"is-3\")>]Is3\n        /// Add `is-4` class\n        | [<CompiledName(\"is-4\")>]Is4\n        /// Add `is-5` class\n        | [<CompiledName(\"is-5\")>]Is5\n        /// Add `is-6` class\n        | [<CompiledName(\"is-6\")>]Is6\n        /// Add `subtitle` class\n        | [<CompiledName(\"subtitle`\")>]IsSubtitle\n        /// Add `is-spaced` class\n        | [<CompiledName(\"is-spaced\")>]IsSpaced\n        // Extra\n        | CustomClass of string\n        | Props of IHTMLProp list\n        | Modifiers of Modifier.IModifier list\n\n    let internal title (element : IHTMLProp list -> ReactElement list -> ReactElement) (options : Option list)\n        (children) =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            // Sizes\n            | Is1\n            | Is2\n            | Is3\n            | Is4\n            | Is5\n            | Is6\n            | IsSpaced -> result.AddCaseName option\n            // Styles\n            | IsSubtitle ->\n                result.RemoveClass(\"title\").AddClass(\"subtitle\")\n            // Extra\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, baseClass=\"title\").ToReactElement(element, children)\n\n    // Alias\n    /// Generate <h1 class=\"title is-1\"></h1>\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\n    let h1 (options : Option list) = title h1 (Is1 :: options)\n    /// Generate <h2 class=\"title is-2\"></h2>\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\n    let h2 (options : Option list) = title h2 (Is2 :: options)\n    /// Generate <h3 class=\"title is-3\"></h3>\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\n    let h3 (options : Option list) = title h3 (Is3 :: options)\n    /// Generate <h4 class=\"title is-4\"></h4>\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\n    let h4 (options : Option list) = title h4 (Is4 :: options)\n    /// Generate <h5 class=\"title is-5\"></h5>\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\n    let h5 (options : Option list) = title h5 (Is5 :: options)\n    /// Generate <h6 class=\"title is-6\"></h6>\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\n    let h6 (options : Option list) = title h6 (Is6 :: options)\n    /// Generate <p class=\"title\"></p>\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\n    let p opts children = title p opts children\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\nopen Browser.Types\n\n[<RequireQualifiedAccess>]\nmodule Delete =\n\n    type Option =\n        | Size of ISize\n        | Props of IHTMLProp list\n        | CustomClass of string\n        | OnClick of (MouseEvent -> unit)\n        | Modifiers of Modifier.IModifier list\n\n    /// Generate <a class=\"delete\"></a>\n    let delete (options : Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            // Sizes\n            | Size size -> ofSize size |> result.AddClass\n            // Extra\n            | OnClick cb -> DOMAttr.OnClick cb |> result.AddProp\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"delete\").ToReactElement(a, children)\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Table =\n\n    type TableOption =\n        /// Set `is-hovered` class\n        | [<CompiledName(\"is-bordered\")>]IsBordered\n        /// Set `is-striped` class\n        | [<CompiledName(\"is-striped\")>]IsStriped\n        /// Add `is-fullwidth` class\n        | [<CompiledName(\"is-fullwidth\")>]IsFullWidth\n        /// Set `is-narrow` class\n        | [<CompiledName(\"is-narrow\")>]IsNarrow\n        /// Set `is-hoverable` class\n        | [<CompiledName(\"is-hoverable\")>]IsHoverable\n        | CustomClass of string\n        | Props of IHTMLProp list\n        | Modifiers of Modifier.IModifier list\n\n    /// Generate <table class=\"table\"></table>\n    let table options children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | IsBordered\n            | IsStriped\n            | IsFullWidth\n            | IsNarrow\n            | IsHoverable -> result.AddCaseName option\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"table\").ToReactElement(table, children)\n","export class CancellationToken {\n    constructor(cancelled = false) {\n        this._id = 0;\n        this._cancelled = cancelled;\n        this._listeners = new Map();\n    }\n    get isCancelled() {\n        return this._cancelled;\n    }\n    cancel() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (const [, listener] of this._listeners) {\n                listener();\n            }\n        }\n    }\n    addListener(f) {\n        const id = this._id;\n        this._listeners.set(this._id++, f);\n        return id;\n    }\n    removeListener(id) {\n        return this._listeners.delete(id);\n    }\n    register(f, state) {\n        const $ = this;\n        const id = this.addListener(state == null ? f : () => f(state));\n        return { Dispose() { $.removeListener(id); } };\n    }\n}\nexport class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    constructor() {\n        this.callCount = 0;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(err);\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(err);\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (ex) {\n                    ctx.onError(ex);\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (ex2) {\n                        ctx.onError(ex2);\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n","import { OperationCanceledError, Trampoline } from \"./AsyncBuilder\";\nimport { CancellationToken } from \"./AsyncBuilder\";\nimport { protectedCont } from \"./AsyncBuilder\";\nimport { protectedBind } from \"./AsyncBuilder\";\nimport { protectedReturn } from \"./AsyncBuilder\";\nimport { choice1, choice2 } from \"./Option\";\nimport { map } from \"./Seq\";\n// Implemented just for type references\nexport default class Async {\n}\nfunction emptyContinuation(x) {\n    // NOP\n}\n// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>\nexport function makeAsync(body) {\n    return body;\n}\n// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn\nexport function invoke(computation, ctx) {\n    return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function callThenInvoke(ctx, result1, part2) {\n    return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function bind(ctx, part1, part2) {\n    return protectedBind(part1, part2)(ctx);\n}\nexport function createCancellationToken(arg) {\n    const token = new CancellationToken(typeof arg === \"boolean\" ? arg : false);\n    if (typeof arg === \"number\") {\n        setTimeout(() => { token.cancel(); }, arg);\n    }\n    return token;\n}\nexport function cancel(token) {\n    token.cancel();\n}\nexport function cancelAfter(token, ms) {\n    setTimeout(() => { token.cancel(); }, ms);\n}\nexport function isCancellationRequested(token) {\n    return token != null && token.isCancelled;\n}\nexport function startChild(computation) {\n    const promise = startAsPromise(computation);\n    // JS Promises are hot, computation has already started\n    // but we delay returning the result\n    return protectedCont((ctx) => protectedReturn(awaitPromise(promise))(ctx));\n}\nexport function awaitPromise(p) {\n    return fromContinuations((conts) => p.then(conts[0]).catch((err) => (err instanceof OperationCanceledError\n        ? conts[2] : conts[1])(err)));\n}\nexport function cancellationToken() {\n    return protectedCont((ctx) => ctx.onSuccess(ctx.cancelToken));\n}\nexport const defaultCancellationToken = new CancellationToken();\nexport function catchAsync(work) {\n    return protectedCont((ctx) => {\n        work({\n            onSuccess: (x) => ctx.onSuccess(choice1(x)),\n            onError: (ex) => ctx.onSuccess(choice2(ex)),\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function fromContinuations(f) {\n    return protectedCont((ctx) => f([ctx.onSuccess, ctx.onError, ctx.onCancel]));\n}\nexport function ignore(computation) {\n    return protectedBind(computation, (x) => protectedReturn(void 0));\n}\nexport function parallel(computations) {\n    return awaitPromise(Promise.all(map((w) => startAsPromise(w), computations)));\n}\nexport function sleep(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onSuccess(void 0);\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function start(computation, cancellationToken) {\n    return startWithContinuations(computation, cancellationToken);\n}\nexport function startImmediate(computation, cancellationToken) {\n    return start(computation, cancellationToken);\n}\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n    if (typeof continuation !== \"function\") {\n        cancelToken = continuation;\n        continuation = null;\n    }\n    const trampoline = new Trampoline();\n    computation({\n        onSuccess: continuation ? continuation : emptyContinuation,\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n        trampoline,\n    });\n}\nexport function startAsPromise(computation, cancellationToken) {\n    return new Promise((resolve, reject) => startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken));\n}\n","import { defaultCancellationToken } from \"./Async\";\nimport { fromContinuations } from \"./Async\";\nimport { startImmediate } from \"./Async\";\nclass QueueCell {\n    constructor(message) {\n        this.value = message;\n    }\n}\nclass MailboxQueue {\n    add(message) {\n        const itCell = new QueueCell(message);\n        if (this.firstAndLast) {\n            this.firstAndLast[1].next = itCell;\n            this.firstAndLast = [this.firstAndLast[0], itCell];\n        }\n        else {\n            this.firstAndLast = [itCell, itCell];\n        }\n    }\n    tryGet() {\n        if (this.firstAndLast) {\n            const value = this.firstAndLast[0].value;\n            if (this.firstAndLast[0].next) {\n                this.firstAndLast = [this.firstAndLast[0].next, this.firstAndLast[1]];\n            }\n            else {\n                delete this.firstAndLast;\n            }\n            return value;\n        }\n        return void 0;\n    }\n}\nexport default class MailboxProcessor {\n    constructor(body, cancellationToken) {\n        this.body = body;\n        this.cancellationToken = cancellationToken || defaultCancellationToken;\n        this.messages = new MailboxQueue();\n    }\n}\nfunction __processEvents($this) {\n    if ($this.continuation) {\n        const value = $this.messages.tryGet();\n        if (value) {\n            const cont = $this.continuation;\n            delete $this.continuation;\n            cont(value);\n        }\n    }\n}\nexport function startInstance($this) {\n    startImmediate($this.body($this), $this.cancellationToken);\n}\nexport function receive($this) {\n    return fromContinuations((conts) => {\n        if ($this.continuation) {\n            throw new Error(\"Receive can only be called once!\");\n        }\n        $this.continuation = conts[0];\n        __processEvents($this);\n    });\n}\nexport function post($this, message) {\n    $this.messages.add(message);\n    __processEvents($this);\n}\nexport function postAndAsyncReply($this, buildMessage) {\n    let result;\n    let continuation;\n    function checkCompletion() {\n        if (result !== void 0 && continuation !== void 0) {\n            continuation(result);\n        }\n    }\n    const reply = {\n        reply: (res) => {\n            result = res;\n            checkCompletion();\n        },\n    };\n    $this.messages.add(buildMessage(reply));\n    __processEvents($this);\n    return fromContinuations((conts) => {\n        continuation = conts[0];\n        checkCompletion();\n    });\n}\nexport function start(body, cancellationToken) {\n    const mbox = new MailboxProcessor(body, cancellationToken);\n    startInstance(mbox);\n    return mbox;\n}\n","namespace FSharp.Control\n\nopen System.Threading\nopen System.Runtime.CompilerServices\n\n[<assembly:InternalsVisibleTo(\"Tests\")>]\ndo()\n\nmodule internal Core =\n    let infinite = Seq.initInfinite id\n\n    let noopAsync = fun _ -> async { () }\n\n    let canceller () =\n        let cts = new CancellationTokenSource()\n        let cancel () = async {\n            cts.Cancel ()\n        }\n        let disposable = { new IAsyncDisposable with member __.DisposeAsync () = cancel () }\n        disposable, cts.Token\n\n    /// Safe observer that wraps the given observer. Makes sure that\n    /// invocations are serialized and that the Rx grammar (OnNext*\n    /// (OnError|OnCompleted)?) is not violated.\n    let safeObserver (obv: IAsyncObserver<'a>) : IAsyncObserver<'a> =\n        let agent = MailboxProcessor.Start (fun inbox ->\n            let rec messageLoop stopped = async {\n                let! n = inbox.Receive ()\n\n                if stopped then\n                    return! messageLoop stopped\n\n                let! stop = async {\n                    match n with\n                    | OnNext x ->\n                        try\n                            do! obv.OnNextAsync x\n                            return false\n                        with\n                        | ex ->\n                            do! obv.OnErrorAsync ex\n                            return true\n                    | OnError ex ->\n                        do! obv.OnErrorAsync ex\n                        return true\n                    | OnCompleted ->\n                        do! obv.OnCompletedAsync ()\n                        return true\n                }\n\n                return! messageLoop stop\n            }\n            messageLoop false)\n        { new IAsyncObserver<'a> with\n            member this.OnNextAsync x = async {\n                OnNext x |> agent.Post\n            }\n            member this.OnErrorAsync err = async {\n                OnError err |> agent.Post\n            }\n            member this.OnCompletedAsync () = async {\n                OnCompleted  |> agent.Post\n            }\n        }\n\n    type Async with\n        /// Starts the asynchronous computation in the thread pool, or\n        /// immediately for Fable. Do not await its result. If no cancellation\n        /// token is provided then the default cancellation token is used.\n        static member Start' (computation:Async<unit>, ?cancellationToken: CancellationToken) : unit =\n            #if FABLE_COMPILER\n                Async.StartImmediate (computation, ?cancellationToken=cancellationToken)\n            #else\n                Async.Start (computation, ?cancellationToken=cancellationToken)\n            #endif\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Navbar =\n\n    type Option =\n        | Color of IColor\n        /// Add `has-shadow` class\n        | [<CompiledName(\"has-shadow\")>] HasShadow\n        /// Add `is-transparent` class\n        | [<CompiledName(\"is-transparent\")>] IsTransparent\n        /// Add `is-fixed-top` class\n        /// You also need to add `has-navbar-fixed-top` to your html tag\n        | [<CompiledName(\"is-fixed-top\")>] IsFixedTop\n        /// Add `is-fixed-bottom` class\n        /// You also need to add `has-navbar-fixed-bottom` to your html tag\n        | [<CompiledName(\"is-fixed-bottom\")>] IsFixedBottom\n        /// Add `is-spaced` class\n        /// Increases horizontal and vertical padding of the navbar\n        | [<CompiledName(\"is-spaced\")>] IsSpaced\n        | Props of IHTMLProp list\n        | CustomClass of string\n        | Modifiers of Modifier.IModifier list\n\n    module Menu =\n\n        type Option =\n            /// Add `is-active` class if true\n            | [<CompiledName(\"is-active\")>] IsActive of bool\n            | Props of IHTMLProp list\n            | CustomClass of string\n            | Modifiers of Modifier.IModifier list\n\n    module Item =\n\n        type Option =\n            /// Add `is-tab` class\n            | [<CompiledName(\"is-tab\")>] IsTab\n            /// Add `is-active` class if true\n            | [<CompiledName(\"is-active\")>] IsActive of bool\n            /// Add `is-hoverable` class\n            | [<CompiledName(\"is-hoverable\")>] IsHoverable\n            /// Add `has-dropdown` class\n            | [<CompiledName(\"has-dropdown\")>] HasDropdown\n            /// Add `is-expanded` class\n            | [<CompiledName(\"is-expanded\")>] IsExpanded\n            | Props of IHTMLProp list\n            | CustomClass of string\n            | Modifiers of Modifier.IModifier list\n\n        let internal item element options children =\n            let parseOptions (result : GenericOptions) option =\n                match option with\n                | IsActive state -> if state then result.AddCaseName option else result\n                | IsExpanded\n                | IsTab\n                | IsHoverable\n                | HasDropdown -> result.AddCaseName option\n                | Props props -> result.AddProps props\n                | CustomClass customClass -> result.AddClass customClass\n                | Modifiers modifiers -> result.AddModifiers modifiers\n\n            GenericOptions.Parse(options, parseOptions, \"navbar-item\").ToReactElement(element, children)\n\n        /// Generate <div class=\"navbar-item\"></div>\n        let div x y = item div x y\n        /// Generate <a class=\"navbar-item\"></a>\n        let a x y = item a x y\n\n    module Link =\n\n        type Option =\n            /// Add `is-active` class if true\n            | [<CompiledName(\"is-active\")>] IsActive of bool\n            /// Add `is-arrowless`\n            | [<CompiledName(\"is-arrowless\")>] IsArrowless\n            | Props of IHTMLProp list\n            | CustomClass of string\n            | Modifiers of Modifier.IModifier list\n\n        let internal link element (options : Option list) children =\n            let parseOptions (result : GenericOptions) option =\n                match option with\n                | IsActive state -> if state then result.AddCaseName option else result\n                | IsArrowless -> result.AddCaseName option\n                | Props props -> result.AddProps props\n                | CustomClass customClass -> result.AddClass customClass\n                | Modifiers modifiers -> result.AddModifiers modifiers\n\n            GenericOptions.Parse(options, parseOptions, \"navbar-link\").ToReactElement(element, children)\n\n        /// Generate <div class=\"navbar-link\"></div>\n        let div x y = link div x y\n        /// Generate <a class=\"navbar-link\"></a>\n        let a x y = link a x y\n\n    module Dropdown =\n\n        type Option =\n            /// Add `is-active` class if true\n            | [<CompiledName(\"is-active\")>] IsActive of bool\n            /// Add `is-boxed` class\n            | [<CompiledName(\"is-boxed\")>] IsBoxed\n            /// Add `is-right` class\n            | [<CompiledName(\"is-right\")>] IsRight\n            | Props of IHTMLProp list\n            | CustomClass of string\n            | Modifiers of Modifier.IModifier list\n\n        let internal dropdown element (options : Option list) children =\n            let parseOptions (result : GenericOptions) option =\n                match option with\n                | IsActive state -> if state then result.AddCaseName option else result\n                | IsBoxed\n                | IsRight -> result.AddCaseName option\n                | Props props -> result.AddProps props\n                | CustomClass customClass -> result.AddClass customClass\n                | Modifiers modifiers -> result.AddModifiers modifiers\n\n            GenericOptions.Parse(options, parseOptions, \"navbar-dropdown\").ToReactElement(element, children)\n\n        /// Generate <div class=\"navbar-dropdown\"></div>\n        let div x y = dropdown div x y\n        /// Generate <a class=\"navbar-dropdown\"></a>\n        let a x y = dropdown a x y\n\n    module Brand =\n        let internal brand element (options: GenericOption list) children =\n            GenericOptions.Parse(options, parseOptions, \"navbar-brand\").ToReactElement(element, children)\n\n        /// Generate <div class=\"navbar-brand\"></div>\n        let div x y = brand div x y\n        /// Generate <a class=\"navbar-brand\"></a>\n        let a x y = brand a x y\n\n    module Start =\n        let internal start element (options: GenericOption list) children =\n            GenericOptions.Parse(options, parseOptions, \"navbar-start\").ToReactElement(element, children)\n\n        /// Generate <div class=\"navbar-start\"></div>\n        let div x y = start div x y\n        /// Generate <a class=\"navbar-start\"></a>\n        let a x y = start a x y\n\n    module End =\n        let internal ``end`` element (options: GenericOption list) children =\n            GenericOptions.Parse(options, parseOptions, \"navbar-end\").ToReactElement(element, children)\n\n        /// Generate <div class=\"navbar-end\"></div>\n        let div x y = ``end`` div x y\n        /// Generate <a class=\"navbar-end\"></a>\n        let a x y = ``end`` a x y\n\n    /// Generate <nav class=\"navbar\"></nav>\n    let navbar (options : Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | HasShadow\n            | IsFixedTop\n            | IsFixedBottom\n            | IsTransparent\n            | IsSpaced -> result.AddCaseName option\n            | Color color -> ofColor color |> result.AddClass\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"navbar\").ToReactElement(nav, children)\n\n    /// Generate <div class=\"navbar-menu\"></div>\n    let menu options children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | Menu.IsActive state -> if state then result.AddCaseName option else result\n            | Menu.Props props -> result.AddProps props\n            | Menu.CustomClass customClass -> result.AddClass customClass\n            | Menu.Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"navbar-menu\").ToReactElement(div, children)\n\n    /// Generate <div class=\"navbar-burger\"></div>\n    let burger (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions, \"navbar-burger\").ToReactElement(div, children)\n\n    /// Generate <div class=\"navbar-content\"></div>\n    let content (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions, \"navbar-content\").ToReactElement(div, children)\n\n    /// Generate <div class=\"navbar-divider\"></div>\n    let divider (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions, \"navbar-divider\").ToReactElement(div, children)\n","namespace FSharp.Control\n\nopen System.Threading\nopen System\n\n#if !FABLE_COMPILER\nopen FSharp.Control\n#endif\n\nopen Core\n\n\n[<RequireQualifiedAccess>]\nmodule internal Create =\n\n    /// Creates an async observable (`AsyncObservable{'a}`) from the\n    /// given subscribe function.\n    let create (subscribe : IAsyncObserver<'a> -> Async<IAsyncDisposable>) : IAsyncObservable<'a> =\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribe o }\n\n    // Create async observable from async worker function\n    let ofAsyncWorker (worker: IAsyncObserver<'a> -> CancellationToken -> Async<unit>) : IAsyncObservable<'a> =\n        let subscribeAsync (aobv : IAsyncObserver<_>) : Async<IAsyncDisposable> =\n            let disposable, token = canceller ()\n            let safeObv = safeObserver aobv\n\n            async {\n                Async.Start' ((worker safeObv token), token)\n                return disposable\n            }\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Returns the async observable sequence whose single element is\n    /// the result of the given async workflow.\n    let ofAsync (workflow : Async<'a>)  : IAsyncObservable<'a> =\n        let subscribeAsync (aobv : IAsyncObserver<_>) : Async<IAsyncDisposable> =\n            let safeObv = safeObserver aobv\n\n            async {\n                let! result = workflow\n                do! safeObv.OnNextAsync result\n                do! safeObv.OnCompletedAsync ()\n                return AsyncDisposable.Empty\n            }\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Returns an observable sequence containing the single specified element.\n    let single (value: 'a) =\n        let subscribeAsync (aobv : IAsyncObserver<_>) : Async<IAsyncDisposable> =\n            let safeObv = safeObserver aobv\n\n            async {\n                do! safeObv.OnNextAsync value\n                do! safeObv.OnCompletedAsync ()\n                return AsyncDisposable.Empty\n            }\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Returns an observable sequence with no elements.\n    let inline empty<'a> () : IAsyncObservable<'a> =\n        let subscribeAsync (aobv : IAsyncObserver<_>) : Async<IAsyncDisposable> =\n            async {\n                do! aobv.OnCompletedAsync ()\n                return AsyncDisposable.Empty\n            }\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Returns an empty observable sequence that never completes.\n    let inline never<'a> () : IAsyncObservable<'a> =\n        let subscribeAsync (_ : IAsyncObserver<_>) : Async<IAsyncDisposable> =\n            async {\n                return AsyncDisposable.Empty\n            }\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Returns the observable sequence that terminates exceptionally\n    /// with the specified exception.\n    let inline fail<'a> (error: exn) : IAsyncObservable<'a> =\n        ofAsyncWorker (fun obv _ -> async {\n            do! obv.OnErrorAsync error\n        })\n\n    /// Returns the async observable sequence whose elements are pulled\n    /// from the given enumerable sequence.\n    let ofSeq (xs: seq<'a>) : IAsyncObservable<'a> =\n        ofAsyncWorker (fun obv token -> async {\n            for x in xs do\n                try\n                    do! obv.OnNextAsync x\n                with ex ->\n                    do! obv.OnErrorAsync ex\n\n            do! obv.OnCompletedAsync ()\n        })\n\n#if !FABLE_COMPILER\n    /// Convert async sequence into an async observable.\n    let ofAsyncSeq (xs: AsyncSeq<'a>) : IAsyncObservable<'a> =\n        let subscribeAsync  (aobv : IAsyncObserver<'a>) : Async<IAsyncDisposable> =\n            let cancel, token = canceller ()\n\n            async {\n                let ie = xs.GetEnumerator ()\n\n                let rec loop () =\n                    async {\n                        let! result =\n                            async {\n                                try\n                                    let! value = ie.MoveNext ()\n                                    return Ok value\n                                with\n                                | ex -> return Error ex\n                            }\n\n                        match result with\n                        | Ok notification ->\n                            match notification with\n                            | Some x ->\n                                do! aobv.OnNextAsync x\n                                do! loop ()\n                            | None ->\n                                do! aobv.OnCompletedAsync ()\n                        | Error err ->\n                            do! aobv.OnErrorAsync err\n                    }\n\n                Async.StartImmediate (loop (), token)\n                return cancel\n            }\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n#endif\n\n    // Returns an observable sequence that invokes the specified factory\n    // function whenever a new observer subscribes.\n    let defer (factory: unit -> IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        let subscribeAsync  (aobv : IAsyncObserver<'a>) : Async<IAsyncDisposable> =\n            async {\n                let result =\n                    try\n                        factory ()\n                    with\n                    | ex ->\n                        fail ex\n\n                return! result.SubscribeAsync aobv\n            }\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Returns an observable sequence that triggers the increasing\n    /// sequence starting with 0 after the given msecs, and the after each period.\n    let interval (msecs: int) (period: int) : IAsyncObservable<int> =\n        let subscribeAsync  (aobv : IAsyncObserver<int>) : Async<IAsyncDisposable> =\n            let cancel, token = canceller ()\n            async {\n                let rec handler msecs next = async {\n                    do! Async.Sleep msecs\n                    do! aobv.OnNextAsync next\n\n                    if period > 0 then\n                        return! handler period (next + 1)\n                    else\n                        do! aobv.OnCompletedAsync ()\n                }\n\n                Async.Start' (handler msecs 0, token)\n                return cancel\n            }\n\n        { new IAsyncObservable<int> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Returns an observable sequence that triggers the value 0\n    /// after the given duetime in milliseconds.\n    let timer (dueTime: int) : IAsyncObservable<int> =\n        interval dueTime 0\n","namespace FSharp.Control\n\nopen System.Collections.Generic\n\n[<RequireQualifiedAccess>]\nmodule internal Combine =\n    type Key = int\n    type Model<'a> = {\n        Subscriptions: Map<Key, IAsyncDisposable>\n        Queue: List<IAsyncObservable<'a>>\n        IsStopped: bool\n        Key: Key\n    }\n\n    [<RequireQualifiedAccess>]\n    type Msg<'a> =\n        | InnerObservable of IAsyncObservable<'a>\n        | InnerCompleted of Key\n        | OuterCompleted\n        | Dispose\n\n    let mergeInner (maxConcurrent: int) (source: IAsyncObservable<IAsyncObservable<'a>>) : IAsyncObservable<'a> =\n        let subscribeAsync (aobv: IAsyncObserver<'a>) =\n            let safeObv = Core.safeObserver aobv\n\n            let initialModel = {\n                Subscriptions = Map.empty\n                Queue = new List<IAsyncObservable<'a>> ()\n                IsStopped = false\n                Key = 0\n            }\n\n            let agent =\n                MailboxProcessor.Start(fun inbox ->\n                    let obv key = {\n                        new IAsyncObserver<'a> with\n                            member this.OnNextAsync x = async {\n                                do! safeObv.OnNextAsync x\n                            }\n                            member this.OnErrorAsync err = async {\n                                do! safeObv.OnErrorAsync err\n                            }\n                            member this.OnCompletedAsync () = async {\n                                Msg.InnerCompleted key |> inbox.Post\n                            }\n                        }\n\n                    let update msg model =\n                        async {\n                            match msg with\n                            | Msg.InnerObservable xs ->\n                                //printfn \"InnerObservable: maxConcurrent=%A\" maxConcurrent\n                                if maxConcurrent = 0 || model.Subscriptions.Count < maxConcurrent then\n                                    //printfn \"InnerObservable: Subscribe: %A\" model.Key\n                                    let! inner = xs.SubscribeAsync (obv model.Key)\n                                    return { model with Subscriptions = model.Subscriptions.Add (model.Key, inner); Key = model.Key + 1 }\n                                else\n                                    //printfn \"InnerObservable: Queue\"\n                                    model.Queue.Add xs\n                                    return model\n                            | Msg.InnerCompleted key ->\n                                //printfn \"InnerComplete: %A\" key\n                                let subscriptions = model.Subscriptions.Remove key\n\n                                if model.Queue.Count > 0 then\n                                    let xs = model.Queue.[0]\n                                    model.Queue.RemoveAt 0\n                                    //printfn \"InnerComplete: Subscribing: %A\" model.Key\n                                    let! inner = xs.SubscribeAsync (obv model.Key)\n\n                                    return { model with Subscriptions = subscriptions.Add (model.Key, inner); Key = model.Key + 1 }\n                                else if subscriptions.Count > 0 then\n                                    return { model with Subscriptions = subscriptions }\n                                else\n                                    if model.IsStopped then\n                                        //printfn \"InnerComplete: completing\"\n                                        do! safeObv.OnCompletedAsync ()\n                                    return { model with Subscriptions = Map.empty }\n                            | Msg.OuterCompleted ->\n                                //printfn \"OuterComplete\"\n                                if model.Subscriptions.Count = 0 then\n                                    //printfn \"OuterComplete: completing\"\n                                    do! safeObv.OnCompletedAsync ()\n                                return { model with IsStopped = true }\n                            | Msg.Dispose ->\n                                for KeyValue(key, dispose) in model.Subscriptions do\n                                    do! dispose.DisposeAsync ()\n                                return initialModel\n                        }\n\n                    let rec messageLoop (model : Model<'a>) = async {\n                        let! msg = inbox.Receive ()\n                        let! newModel = update msg model\n                        return! messageLoop newModel\n                    }\n\n                    messageLoop initialModel\n                )\n            async {\n                let obv = {\n                    new IAsyncObserver<IAsyncObservable<'a>> with\n                        member this.OnNextAsync xs = async {\n                            Msg.InnerObservable xs |> agent.Post\n                        }\n                        member this.OnErrorAsync err = async {\n                            do! safeObv.OnErrorAsync err\n                            agent.Post Msg.Dispose\n                        }\n                        member this.OnCompletedAsync () = async {\n                            Msg.OuterCompleted |> agent.Post\n                        }\n                    }\n                let! dispose = source.SubscribeAsync obv\n                let cancel () =\n                    async {\n                        do! dispose.DisposeAsync ()\n                        agent.Post Msg.Dispose\n                    }\n                return AsyncDisposable.Create cancel\n            }\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Returns an observable sequence that contains the elements of\n    /// each given sequences, in sequential order.\n    let concatSeq (sources: seq<IAsyncObservable<'a>>) : IAsyncObservable<'a> =\n        Create.ofSeq(sources)\n        |> mergeInner 1\n\n    type Notifications<'a, 'b> =\n    | Source of Notification<'a>\n    | Other of Notification<'b>\n\n    /// Merges the specified observable sequences into one observable\n    /// sequence by combining elements of the sources into tuples.\n    /// Returns an observable sequence containing the combined results.\n    let combineLatest (other: IAsyncObservable<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a*'b> =\n        let subscribeAsync (aobv: IAsyncObserver<'a*'b>) =\n            let safeObserver = Core.safeObserver aobv\n\n            let agent = MailboxProcessor.Start(fun inbox ->\n                let rec messageLoop (source: option<'a>) (other: option<'b>) = async {\n                    let! cn = inbox.Receive()\n\n                    let onNextOption n =\n                        async {\n                            match n with\n                            | OnNext x ->\n                                return Some x\n                            | OnError ex ->\n                                do! safeObserver.OnErrorAsync ex\n                                return None\n                            | OnCompleted ->\n                                do! safeObserver.OnCompletedAsync ()\n                                return None\n                        }\n\n                    let! source', other' = async {\n                        match cn with\n                        | Source n ->\n                            let! onNextOptionN = onNextOption n\n                            return onNextOptionN, other\n                        | Other n ->\n                            let! onNextOptionN = onNextOption n\n                            return source, onNextOptionN\n                    }\n                    let c = source' |> Option.bind (fun a -> other' |> Option.map  (fun b -> a, b))\n                    match c with\n                    | Some x -> do! safeObserver.OnNextAsync x\n                    | _ -> ()\n\n                    return! messageLoop source' other'\n                }\n\n                messageLoop None None\n            )\n\n            async {\n                let obvA = AsyncObserver (fun (n : Notification<'a>) -> async { Source n |> agent.Post })\n                let! dispose1 = source.SubscribeAsync obvA\n                let obvB = AsyncObserver  (fun (n : Notification<'b>) -> async { Other n |> agent.Post })\n                let! dispose2 = other.SubscribeAsync obvB\n\n                return AsyncDisposable.Composite [ dispose1; dispose2 ]\n            }\n        { new IAsyncObservable<'a*'b> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Merges the specified observable sequences into one observable\n    /// sequence by combining the values into tuples only when the first\n    /// observable sequence produces an element. Returns the combined\n    /// observable sequence.\n    let withLatestFrom (other: IAsyncObservable<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a*'b> =\n        let subscribeAsync (aobv: IAsyncObserver<'a*'b>) =\n            let safeObserver = Core.safeObserver aobv\n\n            let agent = MailboxProcessor.Start(fun inbox ->\n                let rec messageLoop (latest : option<'b>) = async {\n                    let! cn = inbox.Receive()\n\n                    let onNextOption n =\n                        async {\n                            match n with\n                            | OnNext x ->\n                                return Some x\n                            | OnError ex ->\n                                do! safeObserver.OnErrorAsync ex\n                                return None\n                            | OnCompleted ->\n                                do! safeObserver.OnCompletedAsync ()\n                                return None\n                        }\n\n                    let! source', latest' = async {\n                        match cn with\n                        | Source n ->\n                            let! onNextOptionN = onNextOption n\n                            return onNextOptionN, latest\n                        | Other n ->\n                            let! onNextOptionN = onNextOption n\n                            return None, onNextOptionN\n                    }\n                    let c = source' |> Option.bind (fun a -> latest' |> Option.map  (fun b -> a, b))\n                    match c with\n                    | Some x -> do! safeObserver.OnNextAsync x\n                    | _ -> ()\n\n                    return! messageLoop latest'\n                }\n\n                messageLoop None\n            )\n\n            async {\n                let obvA = AsyncObserver (fun (n : Notification<'a>) -> async { Source n |> agent.Post })\n                let obvB = AsyncObserver  (fun (n : Notification<'b>) -> async { Other n |> agent.Post })\n\n                let! dispose1 = other.SubscribeAsync obvB\n                let! dispose2 = source.SubscribeAsync obvA\n\n                return AsyncDisposable.Composite [ dispose1; dispose2 ]\n            }\n        { new IAsyncObservable<'a*'b> with member __.SubscribeAsync o = subscribeAsync o }\n\n    let zipSeq (sequence: seq<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a*'b> =\n        let subscribeAsync (aobv: IAsyncObserver<'a*'b>) =\n            async {\n                let enumerator = sequence.GetEnumerator ()\n                let _obv n =\n                    async {\n                        match n with\n                        | OnNext x ->\n                            try\n                                if enumerator.MoveNext () then\n                                    let b =  x, enumerator.Current\n                                    do! aobv.OnNextAsync b\n                                else\n                                    do! aobv.OnCompletedAsync ()\n                            with\n                            | ex -> do! aobv.OnErrorAsync ex\n                        | OnError ex -> do! aobv.OnErrorAsync ex\n                        | OnCompleted -> do! aobv.OnCompletedAsync ()\n\n                    }\n                return! AsyncObserver _obv |> Core.safeObserver |> source.SubscribeAsync\n            }\n        { new IAsyncObservable<'a*'b> with member __.SubscribeAsync o = subscribeAsync o }\n","namespace FSharp.Control\n\nopen System.Collections.Generic\nopen System.Threading\n\nopen Core\n\nmodule Subjects =\n    /// A cold stream that only supports a single subscriber\n    let singleSubject<'a> () : IAsyncObserver<'a> * IAsyncObservable<'a> =\n        let mutable oobv: IAsyncObserver<'a> option = None\n        let cts = new CancellationTokenSource ()\n\n        let subscribeAsync (aobv : IAsyncObserver<'a>) : Async<IAsyncDisposable> =\n            let sobv = safeObserver aobv\n            if Option.isSome oobv then\n                failwith \"singleStream: Already subscribed\"\n\n            oobv <- Some sobv\n            cts.Cancel ()\n\n            async {\n                let cancel () = async {\n                    oobv <- None\n                }\n                return AsyncDisposable.Create cancel\n            }\n\n        let obv (n: Notification<'a>) =\n            async {\n                while oobv.IsNone do\n                    // Wait for subscriber\n                    Async.StartImmediate (Async.Sleep 100, cts.Token)\n\n                match oobv with\n                | Some obv ->\n                    match n with\n                    | OnNext x ->\n                        try\n                            do! obv.OnNextAsync x\n                        with ex ->\n                            do! obv.OnErrorAsync ex\n                    | OnError e -> do! obv.OnErrorAsync e\n                    | OnCompleted -> do! obv.OnCompletedAsync ()\n                | None ->\n                    printfn \"No observer for %A\" n\n                    ()\n            }\n        let obs = { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n        AsyncObserver obv :> IAsyncObserver<'a>, obs\n\n    /// A mailbox subject is a subscribable mailbox. Each message is\n    /// broadcasted to all subscribed observers.\n    let mbSubject<'a> () : MailboxProcessor<Notification<'a>>*IAsyncObservable<'a> =\n        let obvs = new List<IAsyncObserver<'a>>()\n        let cts = new CancellationTokenSource()\n\n        let mb = MailboxProcessor.Start(fun inbox ->\n            let rec messageLoop _ = async {\n                let! n = inbox.Receive ()\n\n                for aobv in obvs do\n                    match n with\n                    | OnNext x ->\n                        try\n                            do! aobv.OnNextAsync x\n                        with ex ->\n                            do! aobv.OnErrorAsync ex\n                            cts.Cancel ()\n                    | OnError err ->\n                        do! aobv.OnErrorAsync err\n                        cts.Cancel ()\n                    | OnCompleted ->\n                        do! aobv.OnCompletedAsync ()\n                        cts.Cancel ()\n\n                return! messageLoop ()\n            }\n            messageLoop ()\n        , cts.Token)\n\n        let subscribeAsync (aobv: IAsyncObserver<'a>) : Async<IAsyncDisposable> =\n            async {\n                let sobv = safeObserver aobv\n                obvs.Add sobv\n\n                let cancel () = async {\n                    obvs.Remove sobv |> ignore\n                }\n                return AsyncDisposable.Create cancel\n            }\n\n        mb, { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// A stream is both an observable sequence as well as an observer.\n    /// Each notification is broadcasted to all subscribed observers.\n    let subject<'a> () : IAsyncObserver<'a> * IAsyncObservable<'a> =\n        let mb, obs = mbSubject<'a> ()\n\n        let obv = { new IAsyncObserver<'a> with\n            member this.OnNextAsync x = async {\n                OnNext x |> mb.Post\n            }\n            member this.OnErrorAsync err = async {\n                OnError err |> mb.Post\n            }\n            member this.OnCompletedAsync () = async {\n                OnCompleted |> mb.Post\n            }\n        }\n\n        obv, obs","namespace FSharp.Control\n\nopen FSharp.Control.Core\nopen System.Collections.Generic\n\n[<RequireQualifiedAccess>]\nmodule internal Filter =\n    /// Applies the given async function to each element of the stream and\n    /// returns the stream comprised of the results for each element\n    /// where the function returns Some with some value.\n    let chooseAsync (chooser: 'a -> Async<'b option>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        let subscribeAsync (obvAsync : IAsyncObserver<'b>) =\n            async {\n                let _obv =\n                    { new IAsyncObserver<'a> with\n                        member this.OnNextAsync x = async {\n                            // Let exceptions bubble to the top\n                            let! result = chooser x\n                            match result with\n                            | Some b ->\n                                do! obvAsync.OnNextAsync b\n                            | None -> ()\n                        }\n                        member this.OnErrorAsync err = async {\n                            do! obvAsync.OnErrorAsync err\n                        }\n                        member this.OnCompletedAsync () = async {\n                            do! obvAsync.OnCompletedAsync ()\n                        }\n                    }\n                return! source.SubscribeAsync _obv\n            }\n\n        { new IAsyncObservable<'b> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Applies the given function to each element of the stream and\n    /// returns the stream comprised of the results for each element\n    /// where the function returns Some with some value.\n    let choose (chooser: 'a -> 'b option) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        chooseAsync  (fun x -> async { return chooser x }) source\n\n    /// Filters the elements of an observable sequence based on an async\n    /// predicate. Returns an observable sequence that contains elements\n    /// from the input sequence that satisfy the condition.\n    let filterAsync (predicate: 'a -> Async<bool>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        let predicate' a = async {\n            let! result = predicate a\n            match result with\n            | true -> return Some a\n            | _ -> return None\n        }\n        chooseAsync predicate' source\n\n    /// Filters the elements of an observable sequence based on a\n    /// predicate. Returns an observable sequence that contains elements\n    /// from the input sequence that satisfy the condition.\n    let filter (predicate: 'a -> bool) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        filterAsync (fun x -> async { return predicate x }) source\n\n    /// Return an observable sequence only containing the distinct\n    /// contiguous elementsfrom the source sequence.\n    let distinctUntilChanged (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        let subscribeAsync (aobv : IAsyncObserver<'a>) =\n            let safeObserver = safeObserver aobv\n            let agent = MailboxProcessor.Start(fun inbox ->\n                let rec messageLoop (latest : Notification<'a>) = async {\n                    let! n = inbox.Receive()\n\n                    let! latest' = async {\n                        match n with\n                        | OnNext x ->\n                            if n <> latest then\n                                try\n                                    do! safeObserver.OnNextAsync x\n                                with\n                                | ex -> do! safeObserver.OnErrorAsync ex\n                        | OnError err ->\n                            do! safeObserver.OnErrorAsync err\n                        | OnCompleted ->\n                            do! safeObserver.OnCompletedAsync ()\n                        return n\n                    }\n\n                    return! messageLoop latest'\n                }\n\n                messageLoop OnCompleted // Use as sentinel value as it will not match any OnNext value\n            )\n\n            async {\n                let obv n =\n                    async {\n                        agent.Post n\n                    }\n                return! AsyncObserver obv |> source.SubscribeAsync\n            }\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Bypasses a specified number of elements in an observable sequence\n    /// and then returns the remaining elements.\n    let skip (count: int) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        let subscribeAsync (obvAsync : IAsyncObserver<'a>) =\n            let safeObv = safeObserver obvAsync\n\n            async {\n                let mutable remaining = count\n\n                let _obv (n : Notification<'a>) =\n                    async {\n                        match n with\n                        | OnNext x ->\n                            if remaining <= 0 then\n                                do! safeObv.OnNextAsync x\n                            else\n                                remaining <- remaining - 1\n\n                        | OnError ex -> do! safeObv.OnErrorAsync ex\n                        | OnCompleted -> do! safeObv.OnCompletedAsync ()\n                    }\n\n                return! source.SubscribeAsync (AsyncObserver.Create _obv)\n            }\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Returns a specified number of contiguous elements from the start of\n    /// an observable sequence.\n    let take (count: int) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        let subscribeAsync (obvAsync : IAsyncObserver<'a>) =\n            let safeObv = safeObserver obvAsync\n\n            async {\n                let mutable remaining = count\n\n                let _obv (n : Notification<'a>) =\n                    async {\n                        match n with\n                        | OnNext x ->\n                            if remaining > 0 then\n                                do! safeObv.OnNextAsync x\n                                remaining <- remaining - 1\n                            if remaining = 0 then\n                                do! safeObv.OnCompletedAsync ()\n                                remaining <- remaining - 1\n\n                        | OnError ex -> do! safeObv.OnErrorAsync ex\n                        | OnCompleted -> do! safeObv.OnCompletedAsync ()\n                    }\n\n                return! source.SubscribeAsync (AsyncObserver.Create _obv)\n            }\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Returns a specified number of contiguous elements from the end of an\n    /// observable sequence.\n    let takeLast (count: int) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        let subscribeAsync (obvAsync : IAsyncObserver<'a>) =\n            let safeObv = safeObserver obvAsync\n            let mutable queue = List<'a> ()\n\n            async {\n                let _obv (n : Notification<'a>) =\n                    async {\n                        match n with\n                        | OnNext x ->\n                            queue.Add x\n                            if queue.Count > count then\n                                queue.RemoveAt 0\n                        | OnError ex -> do! safeObv.OnErrorAsync ex\n                        | OnCompleted ->\n                            for item in queue do\n                                do! safeObv.OnNextAsync item\n                            do! safeObv.OnCompletedAsync ()\n                    }\n\n                return! source.SubscribeAsync (AsyncObserver.Create _obv)\n            }\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Returns the values from the source observable sequence until the\n    /// other observable sequence produces a value.\n    let takeUntil (other: IAsyncObservable<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        let subscribeAsync (obvAsync : IAsyncObserver<'a>) =\n            let safeObv = safeObserver obvAsync\n\n            async {\n                let _obv (n : Notification<'b>) =\n                    async {\n                        match n with\n                        | OnNext x ->\n                            do! safeObv.OnCompletedAsync ()\n                        | OnError ex -> do! safeObv.OnErrorAsync ex\n                        | OnCompleted -> ()\n                    }\n\n                let! sub2 = AsyncObserver _obv |> other.SubscribeAsync\n                let! sub1 = source.SubscribeAsync safeObv\n\n                return AsyncDisposable.Composite [ sub1; sub2 ]\n            }\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }","namespace FSharp.Control\n\nopen Core\n\n[<RequireQualifiedAccess>]\nmodule internal Transformation =\n    /// Returns an observable sequence whose elements are the result of\n    /// invoking the async mapper function on each element of the source.\n    let mapAsync (mapperAsync: 'a -> Async<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        let subscribeAsync (aobv : IAsyncObserver<'b>) : Async<IAsyncDisposable> =\n            async {\n                let _obv =\n                    { new IAsyncObserver<'a> with\n                        member this.OnNextAsync x = async {\n                            let! b = mapperAsync x\n                            do! aobv.OnNextAsync b\n                        }\n                        member this.OnErrorAsync err = async {\n                            do! aobv.OnErrorAsync err\n                        }\n                        member this.OnCompletedAsync () = async {\n                            do! aobv.OnCompletedAsync ()\n                        }\n                    }\n                return! source.SubscribeAsync _obv\n            }\n        { new IAsyncObservable<'b> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Returns an observable sequence whose elements are the result of\n    /// invoking the mapper function on each element of the source.\n    let map (mapper:'a -> 'b) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        mapAsync (fun x -> async { return mapper x }) source\n\n    /// Returns an observable sequence whose elements are the result of\n    /// invoking the async mapper function by incorporating the element's\n    /// index on each element of the source.\n    let mapiAsync (mapper:'a*int -> Async<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        source\n        |> Combine.zipSeq Core.infinite\n        |> mapAsync mapper\n\n    /// Returns an observable sequence whose elements are the result of\n    /// invoking the mapper function and incorporating the element's\n    /// index on each element of the source.\n    let mapi (mapper:'a*int -> 'b) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        mapiAsync (fun (x, i) -> async { return mapper (x, i) }) source\n\n    /// Projects each element of an observable sequence into an\n    /// observable sequence and merges the resulting observable\n    /// sequences back into one observable sequence.\n    let flatMap (mapper:'a -> IAsyncObservable<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        source\n        |> map mapper\n        |> Combine.mergeInner 0\n\n    /// Projects each element of an observable sequence into an\n    /// observable sequence by incorporating the element's\n    /// index on each element of the source. Merges the resulting\n    /// observable sequences back into one observable sequence.\n    let flatMapi (mapper:'a*int -> IAsyncObservable<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        source\n        |> mapi mapper\n        |> Combine.mergeInner 0\n\n    /// Asynchronously projects each element of an observable sequence\n    /// into an observable sequence and merges the resulting observable\n    /// sequences back into one observable sequence.\n    let flatMapAsync (mapper:'a -> Async<IAsyncObservable<'b>>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        source\n        |> mapAsync mapper\n        |> Combine.mergeInner 0\n\n    /// Asynchronously projects each element of an observable sequence\n    /// into an observable sequence by incorporating the element's\n    /// index on each element of the source. Merges the resulting\n    /// observable sequences back into one observable sequence.\n    let flatMapiAsync (mapperAsync:'a*int -> Async<IAsyncObservable<'b>>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        source\n        |> mapiAsync mapperAsync\n        |> Combine.mergeInner 0\n\n    let concatMap (mapper:'a -> IAsyncObservable<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        source\n        |> map mapper\n        |> Combine.mergeInner 1\n\n\n    type InnerSubscriptionCmd<'a> =\n        | InnerObservable of IAsyncObservable<'a>\n        | InnerCompleted of int\n        | Completed\n        | Dispose\n\n    /// Transforms an observable sequence of observable sequences into\n    /// an observable sequence producing values only from the most\n    /// recent observable sequence.\n    let switchLatest (source: IAsyncObservable<IAsyncObservable<'a>>) : IAsyncObservable<'a> =\n        let subscribeAsync (aobv : IAsyncObserver<'a>) =\n            let safeObserver = safeObserver aobv\n            let innerAgent =\n                let obv (mb: MailboxProcessor<InnerSubscriptionCmd<'a>>) (id: int) = {\n                    new IAsyncObserver<'a> with\n                        member this.OnNextAsync x = async {\n                            do! safeObserver.OnNextAsync x\n                        }\n                        member this.OnErrorAsync err = async {\n                            do! safeObserver.OnErrorAsync err\n                        }\n                        member this.OnCompletedAsync () = async {\n                            mb.Post (InnerCompleted id)\n                        }\n                    }\n\n                MailboxProcessor.Start(fun inbox ->\n                    let rec messageLoop (current: IAsyncDisposable option, isStopped, currentId) = async {\n                        let! cmd = inbox.Receive ()\n\n                        let! (current', isStopped', currentId') = async {\n                            match cmd with\n                            | InnerObservable xs ->\n                                let nextId = currentId + 1\n                                if current.IsSome then\n                                    do! current.Value.DisposeAsync ()\n                                let! inner = xs.SubscribeAsync (obv inbox nextId)\n                                return Some inner, isStopped, nextId\n                            | InnerCompleted idx ->\n                                if isStopped && idx = currentId then\n                                    do! safeObserver.OnCompletedAsync ()\n                                    return (None, true, currentId)\n                                else\n                                    return (current, isStopped, currentId)\n                            | Completed ->\n                                if current.IsNone then\n                                    do! safeObserver.OnCompletedAsync ()\n                                return (current, true, currentId)\n                            | Dispose ->\n                                if current.IsSome then\n                                    do! current.Value.DisposeAsync ()\n                                return (None, true, currentId)\n                        }\n\n                        return! messageLoop (current', isStopped', currentId')\n                    }\n\n                    messageLoop (None, false, 0)\n                )\n\n            async {\n                let obv (ns: Notification<IAsyncObservable<'a>>) =\n                    async {\n                        match ns with\n                        | OnNext xs -> InnerObservable xs |> innerAgent.Post\n                        | OnError e -> do! safeObserver.OnErrorAsync e\n                        | OnCompleted -> innerAgent.Post Completed\n                    }\n\n                let! dispose = AsyncObserver obv |> source.SubscribeAsync\n                let cancel () =\n                    async {\n                        do! dispose.DisposeAsync ()\n                        innerAgent.Post Dispose\n                    }\n                return AsyncDisposable.Create cancel\n            }\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n\n    /// Asynchronosly transforms the items emitted by an source sequence\n    /// into observable streams, and mirror those items emitted by the\n    /// most-recently transformed observable sequence.\n    let flatMapLatestAsync (mapperAsync: 'a -> Async<IAsyncObservable<'b>>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        source\n        |> mapAsync mapperAsync\n        |> switchLatest\n\n    /// Transforms the items emitted by an source sequence into\n    /// observable streams, and mirror those items emitted by the\n    /// most-recently transformed observable sequence.\n    let flatMapLatest (mapper: 'a -> IAsyncObservable<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        source\n        |> map mapper\n        |> switchLatest\n\n    /// Returns an observable sequence containing the first sequence's\n    /// elements, followed by the elements of the handler sequence in\n    /// case an exception occurred.\n    let catch (handler: exn -> IAsyncObservable<'a>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        let subscribeAsync (aobv: IAsyncObserver<'a>) =\n            async {\n                let mutable disposable = AsyncDisposable.Empty\n\n                let rec action (source: IAsyncObservable<_>) = async {\n                    let _obv = {\n                        new IAsyncObserver<'a> with\n                        member this.OnNextAsync x = async {\n                            do! aobv.OnNextAsync x\n                        }\n                        member this.OnErrorAsync err = async {\n                            let nextSource = handler err\n                            do! action nextSource\n                        }\n                        member this.OnCompletedAsync () = async {\n                            do! aobv.OnCompletedAsync ()\n                        }\n                    }\n                    do! disposable.DisposeAsync ()\n                    let! subscription = source.SubscribeAsync _obv\n                    disposable <- subscription\n                }\n                do! action source\n\n                let cancel () =\n                    async {\n                        do! disposable.DisposeAsync ()\n                    }\n                return AsyncDisposable.Create cancel\n            }\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n\n    type Cmd =\n        | Connect\n        | Dispose\n\n    /// Share a single subscription among multple observers.\n    /// Returns a new Observable that multicasts (shares) the original\n    /// Observable. As long as there is at least one Subscriber this\n    /// Observable will be subscribed and emitting data. When all\n    /// subscribers have unsubscribed it will unsubscribe from the source\n    /// Observable.\n    let share (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        let dispatch, stream = Subjects.subject<'a> ()\n\n        let mb = MailboxProcessor.Start(fun inbox ->\n            let rec messageLoop (count: int) (subscription: IAsyncDisposable) = async {\n                let! cmd = inbox.Receive ()\n\n                let! count', subscription' =\n                    async {\n                        match cmd with\n                        | Connect ->\n                            if count = 0 then\n                                let! disposable = source.SubscribeAsync dispatch\n                                return count + 1, disposable\n                            else\n                                return count + 1, subscription\n                        | Dispose ->\n                            if count = 1 then\n                                do! subscription.DisposeAsync ()\n                                return count - 1, AsyncDisposable.Empty\n                            else\n                                return count - 1, subscription\n                    }\n                return! messageLoop count' subscription'\n            }\n            messageLoop 0 AsyncDisposable.Empty)\n\n        let subscribeAsync (aobv: IAsyncObserver<'a>) =\n            async {\n                mb.Post Connect\n\n                let! disposable = stream.SubscribeAsync aobv\n                let cancel () =\n                    async {\n                        mb.Post Dispose\n                        do! disposable.DisposeAsync ()\n                    }\n                return AsyncDisposable.Create cancel\n            }\n\n        { new IAsyncObservable<'a> with member __.SubscribeAsync o = subscribeAsync o }\n","namespace FSharp.Control\n\nopen System.Threading\n\n#if !FABLE_COMPILER\nopen FSharp.Control\n#endif\n\n/// Overloads and extensions for AsyncObservable\n[<AutoOpen>]\nmodule AsyncObservable =\n    type IAsyncObservable<'a> with\n        /// Repeat each element of the sequence n times\n        /// Subscribes the async observer to the async observable,\n        /// ignores the disposable\n        member this.RunAsync (obv: IAsyncObserver<'a>) = async {\n            let! _ = this.SubscribeAsync obv\n            return ()\n        }\n\n        /// Subscribes the observer function (`Notification{'a} -> Async{unit}`)\n        /// to the AsyncObservable, ignores the disposable.\n        member this.RunAsync<'a> (obv: Notification<'a> -> Async<unit>) = async {\n            do! this.SubscribeAsync (AsyncObserver obv) |> Async.Ignore\n        }\n\n        /// Subscribes the async observer function (`Notification{'a} -> Async{unit}`)\n        /// to the AsyncObservable\n        member this.SubscribeAsync<'a> (obv: Notification<'a> -> Async<unit>) = async {\n            let! disposable = this.SubscribeAsync (AsyncObserver obv)\n            return disposable\n        }\n\n    /// Returns an observable sequence that contains the elements of\n    /// the given sequences concatenated together.\n    let (++) source other = Combine.concatSeq [source; other]\n\n/// A single module that contains all the operators. Nicer and shorter way than writing\n/// AsyncObservable. We want to prefix our operators so we don't mix e.g. `map` with other modules.\nmodule AsyncRx =\n\n  // Aggregate Region\n\n    /// Groups the elements of an observable sequence according to a\n    /// specified key mapper function. Returns a sequence of observable\n    /// groups, each of which corresponds to a given key.\n    let groupBy (keyMapper: 'a -> 'g) (source: IAsyncObservable<'a>) : IAsyncObservable<IAsyncObservable<'a>> =\n        Aggregation.groupBy keyMapper source\n\n    /// Applies an accumulator function over an observable sequence and\n    /// returns each intermediate result. The seed value is used as the\n    /// initial accumulator value. Returns an observable sequence\n    /// containing the accumulated values.\n    let scanInit (initial: 's) (accumulator: 's -> 'a -> 's) (source: IAsyncObservable<'a>) : IAsyncObservable<'s> =\n        Aggregation.scanInitAsync initial (fun s x -> async { return accumulator s x } ) source\n\n    /// Applies an async accumulator function over an observable\n    /// sequence and returns each intermediate result. The seed value is\n    /// used as the initial accumulator value. Returns an observable\n    /// sequence containing the accumulated values.\n    let scanInitAsync (initial: 's) (accumulator: 's -> 'a -> Async<'s>) (source: IAsyncObservable<'a>) : IAsyncObservable<'s> =\n        Aggregation.scanInitAsync initial accumulator source\n\n    /// Applies an async accumulator function over an observable\n    /// sequence and returns each intermediate result. The first value\n    /// is used as the initial accumulator value. Returns an observable\n    /// sequence containing the accumulated values.\n    let scan (accumulator: 'a -> 'a -> 'a) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Aggregation.scanAsync (fun s x -> async { return accumulator s x } ) source\n\n    /// Applies an async accumulator function over an observable\n    /// sequence and returns each intermediate result. The first value\n    /// is used as the initial accumulator value. Returns an observable\n    /// sequence containing the accumulated values.\n    let scanAsync (accumulator: 'a -> 'a -> Async<'a>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Aggregation.scanAsync accumulator source\n\n  // Combine Region\n\n    /// Merges the specified observable sequences into one observable\n    /// sequence by combining elements of the sources into tuples.\n    /// Returns an observable sequence containing the combined results.\n    let combineLatest (other: IAsyncObservable<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a*'b> =\n        Combine.combineLatest other source\n\n    /// Concatenates an observable sequence with another observable sequence.\n    let concat (other : IAsyncObservable<'a>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Combine.concatSeq [source; other]\n\n    /// Returns an observable sequence that contains the elements of\n    /// each given sequences, in sequential order.\n    let concatSeq (sources: seq<IAsyncObservable<'a>>) : IAsyncObservable<'a> =\n        Combine.concatSeq sources\n\n    /// Merges an observable sequence of observable sequences into an\n    /// observable sequence.\n    let mergeInner (source: IAsyncObservable<IAsyncObservable<'a>>) : IAsyncObservable<'a> =\n        Combine.mergeInner 0 source\n\n    /// Merges an observable sequence with another observable sequence.\n    let merge (other : IAsyncObservable<'a>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Create.ofSeq [source; other] |> mergeInner\n\n    /// Merges a sequence of observable sequences.\n    let mergeSeq (sources: seq<IAsyncObservable<'a>>) : IAsyncObservable<'a> =\n        Create.ofSeq sources |> mergeInner\n\n    /// Prepends a sequence of values to an observable sequence.\n    /// Returns the source sequence prepended with the specified values.\n    let startWith (items : seq<'a>) (source: IAsyncObservable<'a>) =\n        Combine.concatSeq [Create.ofSeq items; source]\n\n    /// Merges the specified observable sequences into one observable\n    /// sequence by combining the values into tuples only when the first\n    /// observable sequence produces an element. Returns the combined\n    /// observable sequence.\n    let withLatestFrom (other: IAsyncObservable<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a*'b> =\n        Combine.withLatestFrom other source\n\n    /// Zip given sequence with source. Combines one and one item from each stream into one tuple.\n    let zipSeq (sequence: seq<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a*'b> =\n        Combine.zipSeq sequence source\n\n  // Create Region\n\n    /// Creates an async observable (`AsyncObservable{'a}`) from the\n    /// given subscribe function.\n    let create (subscribe : IAsyncObserver<'a> -> Async<IAsyncDisposable>) : IAsyncObservable<'a> =\n        Create.create subscribe\n\n    // Returns an observable sequence that invokes the specified factory\n    // function whenever a new observer subscribes.\n    let defer (factory: unit -> IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Create.defer factory\n\n    /// Returns an observable sequence with no elements.\n    let empty<'a> () : IAsyncObservable<'a> =\n        Create.empty<'a> ()\n\n    /// Returns an empty observable sequence that never completes.\n    let never<'a> () : IAsyncObservable<'a> =\n        Create.never<'a> ()\n\n    /// Returns the observable sequence that terminates exceptionally\n    /// with the specified exception.\n    let fail<'a> (error: exn) : IAsyncObservable<'a> =\n        Create.fail<'a> error\n\n    /// Returns an observable sequence that triggers the increasing\n    /// sequence starting with 0 after msecs and then repeats with the\n    /// given period.\n    let interval (msecs: int) (period: int) : IAsyncObservable<int> =\n        Create.interval msecs period\n\n    /// Returns the async observable sequence whose single element is\n    /// the result of the given async workflow.\n    let ofAsync (workflow: Async<'a>)  : IAsyncObservable<'a> =\n        Create.ofAsync workflow\n\n    let ofAsyncWorker (worker: IAsyncObserver<'a> -> CancellationToken -> Async<unit>) : IAsyncObservable<'a> =\n        Create.ofAsyncWorker worker\n\n    #if !FABLE_COMPILER\n    /// Convert async sequence into an async observable.\n    let ofAsyncSeq (xs: AsyncSeq<'a>) : IAsyncObservable<'a> =\n        Create.ofAsyncSeq xs\n    #endif\n\n    /// Returns the async observable sequence whose elements are pulled\n    /// from the given enumerable sequence.\n    let ofSeq (xs: seq<'a>) : IAsyncObservable<'a> =\n        Create.ofSeq xs\n\n    /// Returns an observable sequence containing the single specified\n    /// element.\n    let single (x : 'a) : IAsyncObservable<'a> =\n        Create.single x\n\n    /// Returns an observable sequence that triggers the value 0\n    /// after the given duetime.\n    let timer (dueTime: int) : IAsyncObservable<int> =\n        Create.timer dueTime\n\n  // Filter Region\n\n    /// Applies the given function to each element of the stream and\n    /// returns the stream comprised of the results for each element\n    /// where the function returns Some with some value.\n    let choose (chooser: 'a -> 'b option) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        Filter.choose chooser source\n\n    /// Applies the given async function to each element of the stream and\n    /// returns the stream comprised of the results for each element\n    /// where the function returns Some with some value.\n    let chooseAsync (chooser: 'a -> Async<'b option>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        Filter.chooseAsync chooser source\n\n    /// Return an observable sequence only containing the distinct\n    /// contiguous elementsfrom the source sequence.\n    let distinctUntilChanged (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Filter.distinctUntilChanged source\n\n    /// Filters the elements of an observable sequence based on a\n    /// predicate. Returns an observable sequence that contains elements\n    /// from the input sequence that satisfy the condition.\n    let filter (predicate: 'a -> bool) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Filter.filter predicate source\n\n    /// Filters the elements of an observable sequence based on an async\n    /// predicate. Returns an observable sequence that contains elements\n    /// from the input sequence that satisfy the condition.\n    let filterAsync (predicate: 'a -> Async<bool>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Filter.filterAsync predicate source\n\n    /// Returns the values from the source observable sequence until the\n    /// other observable sequence produces a value.\n    let takeUntil (other: IAsyncObservable<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Filter.takeUntil other source\n\n  // Leave Region\n    #if !FABLE_COMPILER\n    /// Convert async observable to async sequence, non-blocking.\n    /// Producer will be awaited until item is consumed by the async\n    /// enumerator.\n    let toAsyncSeq (source: IAsyncObservable<'a>) : AsyncSeq<'a> =\n        Leave.toAsyncSeq source\n    #endif\n\n  // Timeshift Region\n\n    /// Ignores values from an observable sequence which are followed by\n    /// another value before the given timeout.\n    let debounce (msecs: int) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Timeshift.debounce msecs source\n\n    /// Time shifts the observable sequence by the given timeout. The\n    /// relative time intervals between the values are preserved.\n    let delay (msecs: int) (source: IAsyncObservable<_>) : IAsyncObservable<'a> =\n        Timeshift.delay msecs source\n\n    /// Samples the observable sequence at each interval.\n    let sample (msecs: int) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Timeshift.sample msecs source\n\n  // Transform Region\n\n    /// Returns an observable sequence containing the first sequence's\n    /// elements, followed by the elements of the handler sequence in\n    /// case an exception occurred.\n    let catch (handler: exn -> IAsyncObservable<'a>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Transformation.catch handler source\n\n    /// Projects each element of an observable sequence into an\n    /// observable sequence and merges the resulting observable\n    /// sequences back into one observable sequence.\n    let flatMap (mapper:'a -> IAsyncObservable<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        Transformation.flatMap mapper source\n\n    /// Asynchronously projects each element of an observable sequence\n    /// into an observable sequence and merges the resulting observable\n    /// sequences back into one observable sequence.\n    let flatMapAsync (mapperAsync:'a -> Async<IAsyncObservable<'b>>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        Transformation.flatMapAsync mapperAsync source\n\n    /// Projects each element of an observable sequence into an\n    /// observable sequence by incorporating the element's\n    /// index on each element of the source. Merges the resulting\n    /// observable sequences back into one observable sequence.\n    let flatMapi (mapper:'a*int -> IAsyncObservable<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        Transformation.flatMapi mapper source\n\n    /// Asynchronously projects each element of an observable sequence\n    /// into an observable sequence by incorporating the element's\n    /// index on each element of the source. Merges the resulting\n    /// observable sequences back into one observable sequence.\n    let flatMapiAsync  (mapperAsync:'a*int -> Async<IAsyncObservable<'b>>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        Transformation.flatMapiAsync mapperAsync source\n\n    /// Transforms the items emitted by an source sequence into\n    /// observable streams, and mirror those items emitted by the\n    /// most-recently transformed observable sequence.\n    let flatMapLatest (mapper: 'a -> IAsyncObservable<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        Transformation.flatMapLatest mapper source\n\n    /// Asynchronosly transforms the items emitted by an source sequence\n    /// into observable streams, and mirror those items emitted by the\n    /// most-recently transformed observable sequence.\n    let flatMapLatestAsync (mapperAsync: 'a -> Async<IAsyncObservable<'b>>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        Transformation.flatMapLatestAsync mapperAsync source\n\n    /// Returns an observable sequence whose elements are the result of\n    /// invoking the mapper function on each element of the source.\n    let map (mapper:'a -> 'b) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        Transformation.map mapper source\n\n    /// Returns an observable sequence whose elements are the result of\n    /// invoking the async mapper function on each element of the source.\n    let mapAsync (mapperAsync: 'a -> Async<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        Transformation.mapAsync mapperAsync source\n\n    /// Returns an observable sequence whose elements are the result of\n    /// invoking the mapper function and incorporating the element's\n    /// index on each element of the source.\n    let mapi (mapper:'a*int -> 'b) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        Transformation.mapi mapper source\n\n    /// Returns an observable sequence whose elements are the result of\n    /// invoking the async mapper function by incorporating the element's\n    /// index on each element of the source.\n    let mapiAsync (mapper:'a*int -> Async<'b>) (source: IAsyncObservable<'a>) : IAsyncObservable<'b> =\n        Transformation.mapiAsync mapper source\n\n    /// Transforms an observable sequence of observable sequences into\n    /// an observable sequence producing values only from the most\n    /// recent observable sequence.\n    let switchLatest (source: IAsyncObservable<IAsyncObservable<'a>>) : IAsyncObservable<'a> =\n        Transformation.switchLatest source\n\n    /// Share a single subscription among multple observers.\n    /// Returns a new Observable that multicasts (shares) the original\n    /// Observable. As long as there is at least one Subscriber this\n    /// Observable will be subscribed and emitting data. When all\n    /// subscribers have unsubscribed it will unsubscribe from the source\n    /// Observable.\n    let share (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Transformation.share source\n\n  // Subjects Region\n\n    /// A stream is both an observable sequence as well as an observer.\n    /// Each notification is broadcasted to all subscribed observers.\n    let subject<'a> () : IAsyncObserver<'a> * IAsyncObservable<'a> =\n        Subjects.subject<'a> ()\n\n    /// A mailbox stream is a subscribable mailbox. Each message is\n    /// broadcasted to all subscribed observers.\n    let mbStream<'a> () : MailboxProcessor<Notification<'a>>*IAsyncObservable<'a> =\n        Subjects.mbSubject<'a> ()\n\n    /// A cold stream that only supports a single subscriber. Will await the\n    /// caller if no-one is subscribing.\n    let singleSubject<'a> () : IAsyncObserver<'a> * IAsyncObservable<'a> =\n        Subjects.singleSubject<'a> ()\n\n  // Tap Region\n\n    /// Tap asynchronously into the stream performing side effects by the given async actions.\n    let tapAsync (onNextAsync: 'a -> Async<unit>) (onErrorAsync: exn -> Async<unit>) (onCompletedAsync: unit -> Async<unit>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Tap.tapAsync onNextAsync onErrorAsync onCompletedAsync source\n\n    /// Tap asynchronously into the stream performing side effects by the given `onNextAsync` action.\n    let tapOnNextAsync (onNextAsync: 'a -> Async<unit>) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Tap.tapOnNextAsync onNextAsync source\n\n    /// Tap synchronously into the stream performing side effects by the given `onNext` action.\n    let tapOnNext (onNext: 'a -> unit) (source: IAsyncObservable<'a>) : IAsyncObservable<'a> =\n        Tap.tapOnNext onNext source\n","\n[<RequireQualifiedAccess>]\nmodule Promise\n\n#nowarn \"1182\" // Unused values\n\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\n\nlet inline private (!!) (x:obj): 'T = unbox x\n\n[<Emit(\"new Promise($0)\")>]\n/// The promise function receives two other function parameters: success and fail\nlet create (f: ('T->unit)->(Exception->unit)->unit): JS.Promise<'T> = jsNative\n\n[<Emit(\"new Promise(resolve => setTimeout(resolve, $0))\")>]\nlet sleep (ms: int): JS.Promise<unit> = jsNative\n\n[<Emit(\"Promise.resolve($0)\")>]\nlet lift<'T> (a: 'T): JS.Promise<'T> = jsNative\n\n/// Creates promise (in rejected state) with supplied reason.\nlet reject<'T> reason : JS.Promise<'T> = JS.Promise.reject<'T> reason\n\n[<Emit(\"$1.then($0)\")>]\nlet bind (a: 'T->JS.Promise<'R>) (pr: JS.Promise<'T>): JS.Promise<'R> = jsNative\n\n[<Emit(\"$1.then($0)\")>]\nlet map (a: 'T->'R) (pr: JS.Promise<'T>): JS.Promise<'R> = jsNative\n\n[<Emit(\"$1.then($0)\")>]\nlet iter (a: 'T->unit) (pr: JS.Promise<'T>): unit = jsNative\n\n[<Emit(\"$1.then(void 0, $0)\")>]\n/// This version of `catch` fakes a function returning just 'T, as opposed to `Promise<'T>`. If you need to return `Promise<'T>`, use `catchBind`.\nlet catch (fail: Exception->'T) (pr: JS.Promise<'T>): JS.Promise<'T> = jsNative\n\n[<Emit(\"$1.then(void 0, $0)\")>]\n/// This is a version of `catch` that fakes a function returning Promise<'T> as opposed to just 'T. If you need to return just 'T, use `catch`.\nlet catchBind (fail: Exception->JS.Promise<'T>) (pr: JS.Promise<'T>): JS.Promise<'T> = jsNative\n\n[<Emit(\"$1.then(void 0, $0)\")>]\n/// Used to catch errors at the end of a promise chain.\nlet catchEnd (fail: Exception->unit) (pr: JS.Promise<'T>): unit = jsNative\n\n[<Emit(\"$2.then($0,$1)\")>]\n/// A combination of `map/bind` and `catch/catchBind`, this function applies the `success` continuation when the input promise resolves successfully, or `fail` continuation when the input promise fails. Both continuations may return either naked value `'R` or another promise `Promise<'R>`. Use the erased-cast operator `!^` to cast values when returning, for example:\n/// ```\n/// somePromise |> Promise.either (fun x -> !^(string x)) (fun err -> ^!(Promise.lift err.Message))\n/// ```\nlet either (success: 'T->U2<'R, JS.Promise<'R>>) (fail: 'E->U2<'R, JS.Promise<'R>>) (pr: JS.Promise<'T>): JS.Promise<'R> = jsNative\n\n[<Emit(\"$2.then($0,$1)\")>]\nlet eitherEnd (success: 'T->unit) (fail: 'E->unit) (pr: JS.Promise<'T>): unit = jsNative\n\n[<Emit(\"$0.then()\")>]\nlet start (pr: JS.Promise<'T>): unit = jsNative\n\n[<Emit(\"$1.then(void 0, $0)\")>]\nlet tryStart (fail: Exception->unit) (pr: JS.Promise<'T>): unit = jsNative\n\n[<Emit(\"Promise.all($0)\")>]\nlet Parallel (pr: seq<JS.Promise<'T>>): JS.Promise<'T[]> = jsNative\n\n[<Emit(\"Promise.all($0)\")>]\nlet all (pr: seq<JS.Promise<'T>>): JS.Promise<'T[]> = jsNative\n\nlet result (a: JS.Promise<'A>): JS.Promise<Result<'A, 'E>> =\n    either (U2.Case1 << Ok) (U2.Case1 << Error) a\n\nlet mapResult (fn: 'A -> 'B) (a: JS.Promise<Result<'A, 'E>>): JS.Promise<Result<'B, 'E>> =\n    a |> map (Result.map fn)\n\nlet bindResult (fn: 'A -> JS.Promise<'B>) (a: JS.Promise<Result<'A, 'E>>): JS.Promise<Result<'B, 'E>> =\n    a |> bind (fun a ->\n        match a with\n        | Ok a ->\n            result (fn a)\n        | Error e ->\n            lift (Error e))\n\nlet mapResultError (fn: 'B -> 'C) (a: JS.Promise<Result<'A,'B>>): JS.Promise<Result<'A,'C>> =\n    a |> map (Result.mapError fn)\n\nlet tap (fn: 'A -> unit) (a: JS.Promise<'A>): JS.Promise<'A> =\n    a |> map (fun x -> fn x; x)\n\ntype PromiseBuilder() =\n    [<Emit(\"$1.then($2)\")>]\n    member x.Bind(p: JS.Promise<'T>, f: 'T->JS.Promise<'R>): JS.Promise<'R> = jsNative\n\n    [<Emit(\"$1.then(() => $2)\")>]\n    member x.Combine(p1: JS.Promise<unit>, p2: JS.Promise<'T>): JS.Promise<'T> = jsNative\n\n    member x.For(seq: seq<'T>, body: 'T->JS.Promise<unit>): JS.Promise<unit> =\n        // (lift (), seq)\n        // ||> Seq.fold (fun p a ->\n        //     bind (fun () -> body a) p)\n        let mutable p = lift ()\n        for a in seq do\n            p <- !!p?``then``(fun () -> body a)\n        p\n\n    [<Emit(\"$1.then($2)\")>]\n    member x.For(p: JS.Promise<'T>, f: 'T->JS.Promise<'R>): JS.Promise<'R> = jsNative\n\n    member x.While(guard, p): JS.Promise<unit> =\n        if guard()\n        then bind (fun () -> x.While(guard, p)) p\n        else lift()\n\n    [<Emit(\"Promise.resolve($1)\")>]\n    member x.Return(a: 'T): JS.Promise<'T> = jsNative\n\n    [<Emit(\"$1\")>]\n    member x.ReturnFrom(p: JS.Promise<'T>): JS.Promise<'T> = jsNative\n\n    [<Emit(\"Promise.resolve()\")>]\n    member x.Zero(): JS.Promise<unit> = jsNative\n\n    member x.TryFinally(p: JS.Promise<'T>, compensation: unit->unit): JS.Promise<'T> =\n        either (fun (x: 'T) -> compensation(); U2.Case1 x) (fun er -> compensation(); raise !!er) p\n\n    [<Emit(\"$1.catch($2)\")>]\n    member x.TryWith(p: JS.Promise<'T>, catchHandler: Exception->JS.Promise<'T>): JS.Promise<'T> = jsNative\n\n    member x.Delay(generator: unit->JS.Promise<'T>): JS.Promise<'T> =\n        !!createObj[\n            \"then\" ==> fun f1 f2 ->\n                try generator()?``then``(f1,f2)\n                with er ->\n                    if box f2 = null\n                    then !!JS.Promise.reject(er)\n                    else\n                        try !!JS.Promise.resolve(f2(er))\n                        with er -> !!JS.Promise.reject(er)\n            \"catch\" ==> fun f ->\n                try generator()?catch(f)\n                with er ->\n                    try !!JS.Promise.resolve(f(er))\n                    with er -> !!JS.Promise.reject(er)\n        ]\n\n    member x.Run(p:JS.Promise<'T>): JS.Promise<'T> =\n        create (fun success fail ->\n            try\n                let p : JS.Promise<'T> = !!JS.Promise.resolve(p)\n                p?``then``(success, fail)\n            with\n              er -> fail(er)\n        )\n\n    member x.Using<'T, 'R when 'T :> IDisposable>(resource: 'T, binder: 'T->JS.Promise<'R>): JS.Promise<'R> =\n        x.TryFinally(binder(resource), fun () -> resource.Dispose())\n\n    [<Emit(\"Promise.all([$1,$2]).then(([a,b]) => $3(a,b))\")>]\n    [<CustomOperation(\"andFor\", IsLikeZip=true)>]\n    member x.Merge(a: JS.Promise<'T1>, b: JS.Promise<'T2>, [<ProjectionParameter>] resultSelector : 'T1 -> 'T2 -> 'R): JS.Promise<'R> = jsNative\n","/// The Fetch API provides a JavaScript interface for accessing and manipulating parts of the HTTP pipeline, such as requests and responses.\r\n/// It also provides a global fetch() method that provides an easy, logical way to fetch resources asynchronously across the network.\r\nmodule Fetch\r\n\r\n#nowarn \"1182\" // Unused values\r\n\r\nopen System\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Browser.Types\r\n\r\n[<AutoOpen>]\r\nmodule Types =\r\n\r\n    type Body =\r\n        abstract bodyUsed: bool with get, set\r\n        abstract arrayBuffer: unit -> JS.Promise<JS.ArrayBuffer>\r\n        abstract blob: unit -> JS.Promise<Blob>\r\n        // abstract formData: unit -> JS.Promise<FormData>\r\n        abstract json : unit -> JS.Promise<obj>\r\n        abstract json<'T> : unit -> JS.Promise<'T>\r\n        abstract text : unit -> JS.Promise<string>\r\n\r\n    and Request = //(input: U2<string, Request>, ?init: RequestInit) =\r\n        inherit Body\r\n        abstract ``method`` : string with get\r\n        abstract url: string with get\r\n        abstract headers: Headers with get\r\n        abstract referrer: string with get\r\n        abstract mode: U2<string,RequestMode> with get\r\n        abstract credentials: U2<string,RequestCredentials> with get\r\n        abstract cache: U2<string,RequestCache> with get\r\n        abstract clone: unit -> unit\r\n\r\n    and RequestInit =\r\n        abstract ``method``: string option with get, set\r\n        abstract headers: HeaderInit option with get, set\r\n        abstract body: BodyInit option with get, set\r\n        abstract mode: RequestMode option with get, set\r\n        abstract credentials: RequestCredentials option with get, set\r\n        abstract cache: RequestCache option with get, set\r\n\r\n    and [<StringEnum; RequireQualifiedAccess>] RequestContext =\r\n        | Audio | Beacon | Cspreport | Download | Embed | Eventsource | Favicon | Fetch | Font\r\n        | Form | Frame | Hyperlink | Iframe | Image | Imageset | Import | Internal | Location\r\n        | Manifest | Object | Ping | Plugin | Prefetch | Script | Serviceworker | Sharedworker\r\n        | Subresource | Style | Track | Video | Worker | Xmlhttprequest | Xslt\r\n\r\n    and [<StringEnum; RequireQualifiedAccess>] RequestMode =\r\n        | [<CompiledName(\"same-origin\")>]Sameorigin | [<CompiledName(\"no-cors\")>]Nocors | Cors\r\n\r\n    and [<StringEnum; RequireQualifiedAccess>] RequestCredentials =\r\n        Omit | [<CompiledName(\"same-origin\")>]Sameorigin | Include\r\n\r\n    and [<StringEnum; RequireQualifiedAccess>] RequestCache =\r\n        | Default\r\n        | [<CompiledName(\"no-store\")>]Nostore\r\n        | Reload\r\n        | [<CompiledName(\"no-cache\")>]Nocache\r\n        | [<CompiledName(\"force-cache\")>]Forcecache\r\n        | [<CompiledName(\"only-if-cached\")>]Onlyifcached\r\n\r\n    and Headers =\r\n        abstract append : string * string -> unit\r\n        abstract delete : string -> unit\r\n        abstract get : string -> string\r\n        abstract getAll : string -> string[]\r\n        abstract has : string -> bool\r\n        abstract set : string * string -> unit\r\n\r\n        /// Specifying which web sites can participate in cross-origin resource sharing\r\n        [<Emit(\"$0.get('Access-Control-Allow-Origin')\")>] abstract AccessControlAllowOrigin: string option\r\n\r\n        /// Specifies which patch document formats this server supports\r\n        [<Emit(\"$0.get('Accept-Patch')\")>] abstract AcceptPatch: string option\r\n\r\n        /// What partial content range types this server supports via byte serving\r\n        [<Emit(\"$0.get('Accept-Ranges')\")>] abstract AcceptRanges: string option\r\n\r\n        /// The age the object has been in a proxy cache in seconds\r\n        [<Emit(\"$0.get('Age')\")>] abstract Age: string option\r\n\r\n        /// Valid actions for a specified resource. To be used for a 405 Method not allowed\r\n        [<Emit(\"$0.get('Allow')\")>] abstract Allow: string option\r\n\r\n        /// A server uses \"Alt-Svc\" header (meaning Alternative Services) to indicate that its resources can also be accessed at a different network location (host or port) or using a different protocol\r\n        [<Emit(\"$0.get('Alt-Svc')\")>] abstract AltSvc: string option\r\n\r\n        /// Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds\r\n        [<Emit(\"$0.get('Cache-Control')\")>] abstract CacheControl: string option\r\n\r\n        /// Control options for the current connection and list of hop-by-hop response fields\r\n        [<Emit(\"$0.get('Connection')\")>] abstract Connection: string option\r\n\r\n        /// An opportunity to raise a \"File Download\" dialogue box for a known MIME type with binary format or suggest a filename for dynamic content. Quotes are necessary with special characters.\r\n        [<Emit(\"$0.get('Content-Disposition')\")>] abstract ContentDisposition: string option\r\n\r\n        /// The type of encoding used on the data\r\n        [<Emit(\"$0.get('Content-Encoding')\")>] abstract ContentEncoding: string option\r\n\r\n        /// The natural language or languages of the intended audience for the enclosed content\r\n        [<Emit(\"$0.get('Content-Language')\")>] abstract ContentLanguage: string option\r\n\r\n        /// The length of the response body in octets (8-bit bytes)\r\n        [<Emit(\"$0.get('Content-Length')\")>] abstract ContentLength: string option\r\n\r\n        /// An alternate location for the returned data\r\n        [<Emit(\"$0.get('Content-Location')\")>] abstract ContentLocation: string option\r\n\r\n        /// A Base64-encoded binary MD5 sum of the content of the response\r\n        [<Emit(\"$0.get('Content-MD5')\")>] abstract ContentMD5: string option\r\n\r\n        /// Where in a full body message this partial message belongs\r\n        [<Emit(\"$0.get('Content-Range'')\")>] abstract ContentRange: string option\r\n\r\n        /// The MIME type of this content\r\n        [<Emit(\"$0.get('Content-Type')\")>] abstract ContentType: string option\r\n\r\n        /// The date and time that the message was sent (in \"HTTP-date\" format as defined by RFC 7231)\r\n        [<Emit(\"$0.get('Date')\")>] abstract Date: string option\r\n\r\n        /// An identifier for a specific version of a resource, often a message digest\r\n        [<Emit(\"$0.get('ETag')\")>] abstract ETag: string option\r\n\r\n        /// Gives the date/time after which the response is considered stale (in \"HTTP-date\" format as defined by RFC 7231)\r\n        [<Emit(\"$0.get('Expires')\")>] abstract Expires: string option\r\n\r\n        /// The last modified date for the requested object (in \"HTTP-date\" format as defined by RFC 7231)\r\n        [<Emit(\"$0.get('Last-Modified')\")>] abstract LastModified: string option\r\n\r\n        /// Used to express a typed relationship with another resource, where the relation type is defined by RFC 5988\r\n        [<Emit(\"$0.get('Link')\")>] abstract Link: string option\r\n\r\n        /// Used in redirection, or when a new resource has been created.\r\n        [<Emit(\"$0.get('Location')\")>] abstract Location: string option\r\n\r\n        /// This field is supposed to set P3P policy, in the form of P3P:CP=\"your_compact_policy\".\r\n        [<Emit(\"$0.get('P3P')\")>] abstract P3P: string option\r\n\r\n        /// Implementation-specific fields that may have various effects anywhere along the request-response chain.\r\n        [<Emit(\"$0.get('Pragma')\")>] abstract Pragma: string option\r\n\r\n        /// Request authentication to access the proxy.\r\n        [<Emit(\"$0.get('Proxy-Authenticate')\")>] abstract ProxyAuthenticate: string option\r\n\r\n        /// HTTP Public Key Pinning, announces hash of website's authentic TLS certificate\r\n        [<Emit(\"$0.get('Public-Key-Pins')\")>] abstract PublicKeyPins: string option\r\n\r\n        /// Used in redirection, or when a new resource has been created. This refresh redirects after 5 seconds.\r\n        [<Emit(\"$0.get('Refresh')\")>] abstract Refresh: string option\r\n\r\n        /// If an entity is temporarily unavailable, this instructs the client to try again later. Value could be a specified period of time (in seconds) or a HTTP-date.\r\n        [<Emit(\"$0.get('Retry-After')\")>] abstract RetryAfter: string option\r\n\r\n        /// A name for the server\r\n        [<Emit(\"$0.get('Server')\")>] abstract Server: string option\r\n\r\n        /// An HTTP cookie\r\n        [<Emit(\"$0.get('Set-Cookie')\")>] abstract SetCookie: string option\r\n\r\n        /// CGI header field specifying the status of the HTTP response. Normal HTTP responses use a separate \"Status-Line\" instead, defined by RFC 7230\r\n        [<Emit(\"$0.get('Status')\")>] abstract Status: string option\r\n\r\n        /// A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains.\r\n        [<Emit(\"$0.get('Strict-Transport-Security')\")>] abstract StrictTransportSecurity: string option\r\n\r\n        /// The Trailer general field value indicates that the given set of header fields is present in the trailer of a message encoded with chunked transfer coding.\r\n        [<Emit(\"$0.get('Trailer')\")>] abstract Trailer: string option\r\n\r\n        /// The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity.\r\n        [<Emit(\"$0.get('Transfer-Encoding')\")>] abstract TransferEncoding: string option\r\n\r\n        /// Tracking Status Value, value suggested to be sent in response to a DNT(do-not-track)\r\n        [<Emit(\"$0.get('TSV')\")>] abstract TSV: string option\r\n\r\n        /// Ask the client to upgrade to another protocol.\r\n        [<Emit(\"$0.get('Upgrade')\")>] abstract Upgrade: string option\r\n\r\n        /// Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server.\r\n        [<Emit(\"$0.get('Vary')\")>] abstract Vary: string option\r\n\r\n        /// Informs the client of proxies through which the response was sent.\r\n        [<Emit(\"$0.get('Via')\")>] abstract Via: string option\r\n\r\n        /// A general warning about possible problems with the entity body.\r\n        [<Emit(\"$0.get('Warning')\")>] abstract Warning: string option\r\n\r\n        /// Indicates the authentication scheme that should be used to access the requested entity.\r\n        [<Emit(\"$0.get('WWW-Authenticate')\")>] abstract WWWAuthenticate: string option\r\n\r\n        /// Clickjacking protection: deny - no rendering within a frame, sameorigin - no rendering if origin mismatch, allow-from - allow from specified location, allowall - non-standard, allow from any location\r\n        [<Emit(\"$0.get('X-Frame-Options')\")>] abstract XFrameOptions: string option\r\n\r\n        /// Cross-site scripting (XSS) filter\r\n        [<Emit(\"$0.get('X-XSS-Protection')\")>] abstract XXSSProtection: string option\r\n\r\n        /// Content Security Policy definition.\r\n        [<Emit(\"$0.get('Content-Security-Policy')\")>] abstract ContentSecurityPolicy: string option\r\n\r\n        /// The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type. This also applies to Google Chrome, when downloading extensions\r\n        [<Emit(\"$0.get('X-Content-Type-Options')\")>] abstract XContentTypeOptions: string option\r\n\r\n        /// Specifies the technology (e.g. ASP.NET, PHP, JBoss) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)\r\n        [<Emit(\"$0.get('X-Powered-By')\")>] abstract XPoweredBy: string option\r\n\r\n        /// Recommends the preferred rendering engine (often a backward-compatibility mode) to use to display the content. Also used to activate Chrome Frame in Internet Explorer.\r\n        [<Emit(\"$0.get('X-UA-Compatible')\")>] abstract XUACompatible: string option\r\n\r\n        /// Provide the duration of the audio or video in seconds; only supported by Gecko browsers\r\n        [<Emit(\"$0.get('X-Content-Duration')\")>] abstract XContentDuration: string option\r\n\r\n        /// Tells a server which (presumably in the middle of a HTTP -> HTTPS migration) hosts mixed content that the client would prefer redirection to HTTPS and can handle Content-Security-Policy: upgrade-insecure-requests\r\n        [<Emit(\"$0.get('Upgrade-Insecure-Requests')\")>] abstract UpgradeInsecureRequests: string option\r\n\r\n        /// Correlates HTTP requests between a client and server.\r\n        [<Emit(\"$0.get('X-Request-ID')\")>] abstract XRequestID: string option\r\n\r\n        /// Correlates HTTP requests between a client and server.\r\n        [<Emit(\"$0.get('X-Correlation-ID')\")>] abstract XCorrelationID: string option\r\n\r\n\r\n    and Response = //(?body: BodyInit, ?init: ResponseInit) =\r\n        inherit Body\r\n\r\n        /// Verifies that the fetch was successful\r\n        [<Emit(\"$0.ok\")>] abstract Ok: bool\r\n\r\n        /// Returns the HTTP status code\r\n        [<Emit(\"$0.status\")>] abstract Status: int\r\n\r\n        /// Returns the HTTP status message\r\n        [<Emit(\"$0.statusText\")>] abstract StatusText: string\r\n\r\n        /// Returns the response URL\r\n        [<Emit(\"$0.url\")>] abstract Url: string\r\n\r\n        /// Returns the headers objct\r\n        [<Emit(\"$0.headers\")>] abstract Headers : Headers\r\n\r\n    and [<StringEnum; RequireQualifiedAccess>] ResponseType =\r\n        | Basic | Cors | Default | Error | Opaque\r\n\r\n    and ResponseInit =\r\n        abstract status: float with get, set\r\n        abstract statusText: string option with get, set\r\n        abstract headers: HeaderInit option with get, set\r\n\r\n    and HeaderInit =\r\n        U2<Headers, string[]>\r\n\r\n    and BodyInit =\r\n        U2<Blob, string> // U3<Blob, FormData, string>\r\n\r\n    [<Erase; RequireQualifiedAccess; NoComparison>]\r\n    type RequestInfo =\r\n        /// Uses a simple Url as string to create the request info\r\n        | Url of string\r\n        /// Uses a Request object as request info\r\n        | Req of Request\r\n\r\n    type [<Erase>] GlobalFetch =\r\n        [<Global>]static member fetch (req: RequestInfo, ?init: RequestInit) = jsNative :JS.Promise<Response>\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type HttpMethod =\r\n        | [<CompiledName(\"CONNECT\")>] CONNECT\r\n        | [<CompiledName(\"DELETE\")>] DELETE\r\n        | [<CompiledName(\"GET\")>] GET\r\n        | [<CompiledName(\"HEAD\")>] HEAD\r\n        | [<CompiledName(\"OPTIONS\")>] OPTIONS\r\n        | [<CompiledName(\"PATCH\")>] PATCH\r\n        | [<CompiledName(\"POST\")>] POST\r\n        | [<CompiledName(\"PUT\")>] PUT\r\n        | [<CompiledName(\"TRACE\")>] TRACE\r\n\r\n    type IHttpRequestHeaders =\r\n        interface end\r\n\r\n    type HttpRequestHeaders =\r\n        | Accept of string\r\n        | [<CompiledName(\"Accept-Charset\")>] AcceptCharset of string\r\n        | [<CompiledName(\"Accept-Encoding\")>] AcceptEncoding of string\r\n        | [<CompiledName(\"Accept-Language\")>] AcceptLanguage of string\r\n        | [<CompiledName(\"Accept-Datetime\")>] AcceptDatetime of string\r\n        | Authorization of string\r\n        | [<CompiledName(\"Cache-Control\")>] CacheControl of string\r\n        | Connection of string\r\n        | Cookie of string\r\n        | [<CompiledName(\"Content-Length\")>] ContentLength of string\r\n        | [<CompiledName(\"Content-MD5\")>] ContentMD5 of string\r\n        | [<CompiledName(\"Content-Type\")>] ContentType of string\r\n        | Date of string\r\n        | Expect of string\r\n        | Forwarded of string\r\n        | From of string\r\n        | Host of string\r\n        | [<CompiledName(\"If-Match\")>] IfMatch of string\r\n        | [<CompiledName(\"If-Modified-Since\")>] IfModifiedSince of string\r\n        | [<CompiledName(\"If-None-Match\")>] IfNoneMatch of string\r\n        | [<CompiledName(\"If-Range\")>] IfRange of string\r\n        | [<CompiledName(\"If-Unmodified-Since\")>] IfUnmodifiedSince of string\r\n        | [<CompiledName(\"Max-Forwards\")>] MaxForwards of int\r\n        | Origin of string\r\n        | Pragma of string\r\n        | [<CompiledName(\"Proxy-Authorization\")>] ProxyAuthorization of string\r\n        | Range of string\r\n        | Referer of string\r\n        | [<CompiledName(\"SOAPAction\")>] SOAPAction of string\r\n        | [<CompiledName(\"TE\")>] TE of string\r\n        | [<CompiledName(\"User-Agent\")>] UserAgent of string\r\n        | Upgrade of string\r\n        | Via of string\r\n        | Warning of string\r\n        | [<CompiledName(\"X-Requested-With\")>] XRequestedWith of string\r\n        | [<CompiledName(\"DNT\")>] DNT of string\r\n        | [<CompiledName(\"X-Forwarded-For\")>] XForwardedFor of string\r\n        | [<CompiledName(\"X-Forwarded-Host\")>] XForwardedHost of string\r\n        | [<CompiledName(\"X-Forwarded-Proto\")>] XForwardedProto of string\r\n        | [<CompiledName(\"Front-End-Https\")>] FrontEndHttps of string\r\n        | [<CompiledName(\"X-Http-Method-Override\")>] XHttpMethodOverride of string\r\n        | [<CompiledName(\"X-ATT-DeviceId\")>] XATTDeviceId of string\r\n        | [<CompiledName(\"X-Wap-Profile\")>] XWapProfile of string\r\n        | [<CompiledName(\"Proxy-Connection\")>] ProxyConnection of string\r\n        | [<CompiledName(\"X-UIDH\")>] XUIDH of string\r\n        | [<CompiledName(\"X-Csrf-Token\")>] XCsrfToken of string\r\n        | [<Erase>] Custom of key:string * value:obj\r\n\r\n    [<NoComparison>]\r\n    type RequestProperties =\r\n        | Method of HttpMethod\r\n        | Headers of IHttpRequestHeaders\r\n        | Body of BodyInit\r\n        | Mode of RequestMode\r\n        | Credentials of RequestCredentials\r\n        | Cache of RequestCache\r\n\r\n\r\nlet inline requestHeaders (headers: HttpRequestHeaders list) =\r\n    RequestProperties.Headers(keyValueList CaseRules.None headers :?> IHttpRequestHeaders)\r\n\r\nlet inline requestProps (props: RequestProperties list) =\r\n    keyValueList CaseRules.LowerFirst props :?> RequestInit\r\n\r\nlet private errorString (response: Response) =\r\n    string response.Status + \" \" + response.StatusText + \" for URL \" + response.Url\r\n\r\n/// Retrieves data from the specified resource. Fails if `response.Ok` evals to false.\r\nlet fetch (url: string) (init: RequestProperties list) : JS.Promise<Response> =\r\n    GlobalFetch.fetch(RequestInfo.Url url, requestProps init)\r\n    |> Promise.map (fun response ->\r\n        if response.Ok\r\n        then response\r\n        else errorString response |> failwith)\r\n\r\nlet tryFetch (url: string) (init: RequestProperties list) : JS.Promise<Result<Response, Exception>> =\r\n    fetch url init |> Promise.result\r\n\r\n// let fetchAs<'T> (url: string) (decoder: Decode.Decoder<'T>) (init: RequestProperties list) : JS.Promise<'T> =\r\n//     GlobalFetch.fetch(RequestInfo.Url url, requestProps init)\r\n//     |> Promise.bind (fun response ->\r\n//         if not response.Ok\r\n//         then errorString response |> failwith\r\n//         else\r\n//             response.text()\r\n//             |> Promise.map (fun res ->\r\n//                 match Decode.fromString decoder res with\r\n//                 | Ok successValue -> successValue\r\n//                 | Error error -> failwith error))\r\n\r\n// let tryFetchAs (url: string) (decoder: Decode.Decoder<'T>) (init: RequestProperties list) : JS.Promise<Result<'T, string>> =\r\n//     GlobalFetch.fetch(RequestInfo.Url url, requestProps init)\r\n//     |> Promise.bind (fun response ->\r\n//         if not response.Ok\r\n//         then errorString response |> Error |> Promise.lift\r\n//         else\r\n//             response.text()\r\n//             |> Promise.map (Decode.fromString decoder))\r\n\r\n// let private sendRecord (url: string) (record:'T) (properties: RequestProperties list) httpMethod : JS.Promise<Response> =\r\n//     let defaultProps =\r\n//         [ RequestProperties.Method httpMethod\r\n//           requestHeaders [ContentType \"application/json\"]\r\n//           RequestProperties.Body !^(Encode.Auto.toString(0, record))]\r\n//     // Append properties after defaultProps to make sure user-defined values\r\n//     // override the default ones if necessary\r\n//     List.append defaultProps properties\r\n//     |> fetch url\r\n\r\n// /// Sends a HTTP post with the record serialized as JSON.\r\n// /// This function already sets the HTTP Method to POST sets the json into the body.\r\n// let postRecord<'T> (url: string) (record:'T) (properties: RequestProperties list) : JS.Promise<Response> =\r\n//     sendRecord url record properties HttpMethod.POST\r\n\r\n// let tryPostRecord<'T> (url: string) (record:'T) (properties: RequestProperties list) : JS.Promise<Result<Response, Exception>> =\r\n//     postRecord url record properties |> Promise.result\r\n\r\n// /// Sends a HTTP put with the record serialized as JSON.\r\n// /// This function already sets the HTTP Method to PUT, sets the json into the body.\r\n// let putRecord (url: string) (record:'T) (properties: RequestProperties list): JS.Promise<Response> =\r\n//     sendRecord url record properties HttpMethod.PUT\r\n\r\n// let tryPutRecord (url: string) (record:'T) (properties: RequestProperties list): JS.Promise<Result<Response, Exception>> =\r\n//     putRecord url record properties |> Promise.result\r\n\r\n// /// Sends a HTTP patch with the record serialized as JSON.\r\n// /// This function already sets the HTTP Method to PATCH sets the json into the body.\r\n// let patchRecord (url: string) (record:'T) (properties: RequestProperties list) : JS.Promise<Response> =\r\n//     sendRecord url record properties HttpMethod.PATCH\r\n\r\n/// Sends a HTTP OPTIONS request.\r\nlet tryOptionsRequest (url:string) : JS.Promise<Result<Response, Exception>> =\r\n    fetch url [RequestProperties.Method HttpMethod.OPTIONS] |> Promise.result","module Thoth.Fetch\n\nopen Fetch\nopen Fable.Core\nopen Thoth.Json\n\nlet internal toJsonBody (value : JsonValue) =\n    #if DEBUG\n    Encode.toString 4 value\n    |> U2.Case2\n    #else\n    Encode.toString 0 value\n    |> U2.Case2\n    #endif\n\ntype Fetch =\n\n    /// **Description**\n    ///\n    /// Retrieves data from the specified resource by applying the provided `decoder`.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `decoder` - parameter of type `Decoder<'Response>` - Decoder applied to the server response\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member fetchAs<'Response>(url : string,\n                                     decoder : Decoder<'Response>,\n                                     ?properties : RequestProperties list) =\n        promise {\n            let properties = defaultArg properties []\n            // TODO: Rewrite our own version of `Fetch.fetch` to give better error\n            // ATM, when an error occured we are loosing information like status code, etc.\n            let! response = Fetch.fetch url properties\n            let! body = response.text()\n            return Decode.unsafeFromString decoder body\n        }\n\n    /// **Description**\n    ///\n    /// Retrieves data from the specified resource.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member fetchAs<'Response>(url : string,\n                                     ?properties : RequestProperties list,\n                                     ?isCamelCase : bool,\n                                     ?extra: ExtraCoders,\n                                     [<Inject>] ?responseResolver: ITypeResolver<'Response>) =\n        let decoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n        Fetch.fetchAs(url, decoder, ?properties = properties)\n\n    /// **Description**\n    ///\n    /// Retrieves data from the specified resource by applying the provided `decoder`.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `decoder` - parameter of type `Decoder<'Response>` - Decoder applied to the server response\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryFetchAs<'Response>(url : string,\n                                        decoder : Decoder<'Response>,\n                                        ?properties : RequestProperties list) =\n        promise {\n            let properties = defaultArg properties []\n            // TODO: Rewrite our own version of `Fetch.fetch` to give better error\n            // ATM, when an error occured we are loosing information like status code, etc.\n            let! response = Fetch.fetch url properties\n            let! body = response.text()\n            return Decode.fromString decoder body\n        }\n\n    /// **Description**\n    ///\n    /// Retrieves data from the specified resource.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryFetchAs<'Response>(url : string,\n                                        ?properties : RequestProperties list,\n                                        ?isCamelCase : bool,\n                                        ?extra: ExtraCoders,\n                                        [<Inject>] ?responseResolver: ITypeResolver<'Response>) =\n        let decoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n        Fetch.tryFetchAs(url, decoder, ?properties = properties)\n\n    /// Alias to `Fetch.fetchAs`\n    static member get<'Response>(url : string,\n                                 decoder : Decoder<'Response>,\n                                 ?properties : RequestProperties list) =\n        Fetch.fetchAs(url, decoder, ?properties = properties)\n\n    /// Alias to `Fetch.tryFetchAs`\n    static member tryGet<'Response>(url : string,\n                                    decoder : Decoder<'Response>,\n                                    ?properties : RequestProperties list) =\n        Fetch.tryFetchAs(url, decoder, ?properties = properties)\n\n    /// Alias to `Fetch.fetchAs`\n    static member get<'Response>(url : string,\n                                 ?properties : RequestProperties list,\n                                 ?isCamelCase : bool,\n                                 ?extra: ExtraCoders,\n                                 [<Inject>] ?responseResolver: ITypeResolver<'Response>) =\n        Fetch.fetchAs(url, ?properties = properties, ?isCamelCase = isCamelCase, ?extra = extra, ?responseResolver = responseResolver)\n\n    /// Alias to `Fetch.tryFetchAs`\n    static member tryGet<'Response>(url : string,\n                                    ?properties : RequestProperties list,\n                                    ?isCamelCase : bool,\n                                    ?extra: ExtraCoders,\n                                    [<Inject>] ?responseResolver: ITypeResolver<'Response>) =\n        Fetch.tryFetchAs(url, ?properties = properties, ?isCamelCase = isCamelCase, ?extra = extra, ?responseResolver = responseResolver)\n\n\n\n    /// **Description**\n    ///\n    /// Send a **POST** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue` - JSON\n    ///   * `decoder` - parameter of type `Decoder<'Response>`- Decoder applied to the server response\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member post<'Response>(url : string,\n                                  data : JsonValue,\n                                  decoder : Decoder<'Response>,\n                                  ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.POST\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **POST** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member post<'Data, 'Response>(url : string,\n                                         data : 'Data,\n                                         ?properties : RequestProperties list,\n                                         ?isCamelCase : bool,\n                                         ?extra: ExtraCoders,\n                                         [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                         [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.POST\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, responseDecoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **POST** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue`\n    ///   * `decoder` - parameter of type `Decoder<'Response>`\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryPost<'Response>(url : string,\n                                     data : JsonValue,\n                                     decoder : Decoder<'Response>,\n                                     ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.POST\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **POST** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryPost<'Data, 'Response>(url : string,\n                                            data : 'Data,\n                                            ?properties : RequestProperties list,\n                                            ?isCamelCase : bool,\n                                            ?extra: ExtraCoders,\n                                            [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                            [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.POST\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, responseDecoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PUT** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue`\n    ///   * `decoder` - parameter of type `Decoder<'Response>`\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member put<'Response>(url : string,\n                                 data : JsonValue,\n                                 decoder : Decoder<'Response>,\n                                 ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.PUT\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PUT** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member put<'Data, 'Response>(url : string,\n                                        data : 'Data,\n                                        ?properties : RequestProperties list,\n                                        ?isCamelCase : bool,\n                                        ?extra: ExtraCoders,\n                                        [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                        [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.PUT\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, responseDecoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PUT** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue`\n    ///   * `decoder` - parameter of type `Decoder<'Response>`\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryPut<'Response>(url : string,\n                                    data : JsonValue,\n                                    decoder : Decoder<'Response>,\n                                    ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.PUT\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PUT** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryPut<'Data, 'Response>(url : string,\n                                           data : 'Data,\n                                           ?properties : RequestProperties list,\n                                           ?isCamelCase : bool,\n                                           ?extra: ExtraCoders,\n                                           [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                           [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.PUT\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, responseDecoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PACTH** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue`\n    ///   * `decoder` - parameter of type `Decoder<'Response>`\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member patch<'Response>(url : string,\n                                   data : JsonValue,\n                                   decoder : Decoder<'Response>,\n                                   ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.PATCH\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PATH** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member patch<'Data, 'Response>(url : string,\n                                          data : 'Data,\n                                          ?properties : RequestProperties list,\n                                          ?isCamelCase : bool,\n                                          ?extra: ExtraCoders,\n                                          [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                          [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.PATCH\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, responseDecoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PATCH** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue`\n    ///   * `decoder` - parameter of type `Decoder<'Response>`\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryPatch<'Response>(url : string,\n                                      data : JsonValue,\n                                      decoder : Decoder<'Response>,\n                                      ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.PATCH\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PATCH** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryPatch<'Data, 'Response>(url : string,\n                                             data : 'Data,\n                                             ?properties : RequestProperties list,\n                                             ?isCamelCase : bool,\n                                             ?extra: ExtraCoders,\n                                             [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                             [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.PATCH\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, responseDecoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **DELETE** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue`\n    ///   * `decoder` - parameter of type `Decoder<'Response>`\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member delete<'Response>(url : string,\n                                    data : JsonValue,\n                                    decoder : Decoder<'Response>,\n                                    ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.DELETE\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **DELETE** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member delete<'Data, 'Response>(url : string,\n                                           data : 'Data,\n                                           ?properties : RequestProperties list,\n                                           ?isCamelCase : bool,\n                                           ?extra: ExtraCoders,\n                                           [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                           [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.DELETE\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, responseDecoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **DELETE** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue`\n    ///   * `decoder` - parameter of type `Decoder<'Response>`\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryDelete<'Response>(url : string,\n                                       data : JsonValue,\n                                       decoder : Decoder<'Response>,\n                                       ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.DELETE\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **DELETE** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryDelete<'Data, 'Response>(url : string,\n                                              data : 'Data,\n                                              ?properties : RequestProperties list,\n                                              ?isCamelCase : bool,\n                                              ?extra: ExtraCoders,\n                                              [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                              [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.DELETE\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, responseDecoder, properties = properties)\n","namespace Elmish\nopen System\n\n[<Struct>]\ntype internal RingState<'item> =\n    | Writable of wx:'item array * ix:int\n    | ReadWritable of rw:'item array * wix:int * rix:int\n\ntype internal RingBuffer<'item>(size) =\n    let doubleSize ix (items: 'item array) =\n        seq { yield! items |> Seq.skip ix\n              yield! items |> Seq.take ix\n              for _ in 0..items.Length do\n                yield Unchecked.defaultof<'item> }\n        |> Array.ofSeq\n\n    let mutable state : 'item RingState =\n        Writable (Array.zeroCreate (max size 10), 0)\n\n    member __.Pop() =\n        match state with\n        | ReadWritable (items, wix, rix) ->\n            let rix' = (rix + 1) % items.Length\n            match rix' = wix with\n            | true -> \n                state <- Writable(items, wix)\n            | _ ->\n                state <- ReadWritable(items, wix, rix')\n            Some items.[rix]\n        | _ ->\n            None\n\n    member __.Push (item:'item) =\n        match state with\n        | Writable (items, ix) ->\n            items.[ix] <- item\n            let wix = (ix + 1) % items.Length\n            state <- ReadWritable(items, wix, ix)\n        | ReadWritable (items, wix, rix) ->\n            items.[wix] <- item\n            let wix' = (wix + 1) % items.Length\n            match wix' = rix with\n            | true -> \n                state <- ReadWritable(items |> doubleSize rix, items.Length, 0)\n            | _ -> \n                state <- ReadWritable(items, wix', rix)","[<AutoOpen>]\r\nmodule Utils\r\n\r\nlet curry fn a b = fn (a, b)\r\nlet uncurry fn (a, b) = fn a b\r\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Notification =\n\n    type Option =\n        | Color of IColor\n        | CustomClass of string\n        | Props of IHTMLProp list\n        | Modifiers of Modifier.IModifier list\n\n    /// Generate <div class=\"notification\"></div>\n    let notification (options : Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | Color color -> ofColor color |> result.AddClass\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"notification\").ToReactElement(div, children)\n\n    /// Generate <button class=\"delete\"></button>\n    let delete (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions, \"delete\").ToReactElement(button, children)\n","(**\nCmd\n---------\nCore abstractions for dispatching messages in Elmish.\n\n*)\n\nnamespace Elmish\n\nopen System\n\n/// Dispatch - feed new message into the processing loop\ntype Dispatch<'msg> = 'msg -> unit\n\n/// Subscription - return immediately, but may schedule dispatch of a message at any time\ntype Sub<'msg> = Dispatch<'msg> -> unit\n\n/// Cmd - container for subscriptions that may produce messages\ntype Cmd<'msg> = Sub<'msg> list\n\n/// Cmd module for creating and manipulating commands\n[<RequireQualifiedAccess>]\nmodule Cmd =\n    /// Execute the commands using the supplied dispatcher\n    let internal exec (dispatch:Dispatch<'msg>) (cmd:Cmd<'msg>) =\n        cmd |> List.iter (fun sub -> sub dispatch)\n\n    /// None - no commands, also known as `[]`\n    let none : Cmd<'msg> =\n        []\n\n    /// When emitting the message, map to another type\n    let map (f: 'a -> 'msg) (cmd: Cmd<'a>) : Cmd<'msg> =\n        cmd |> List.map (fun g -> (fun dispatch -> f >> dispatch) >> g)\n\n    /// Aggregate multiple commands\n    let batch (cmds: #seq<Cmd<'msg>>) : Cmd<'msg> =\n        cmds |> List.concat\n\n    /// Command to call the subscriber\n    let ofSub (sub: Sub<'msg>) : Cmd<'msg> =\n        [sub]\n\n    module OfFunc =\n        /// Command to evaluate a simple function and map the result\n        /// into success or error (of exception)\n        let either (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to evaluate a simple function and map the success to a message\n        /// discarding any possible error\n        let perform (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    ()\n            [bind]\n\n        /// Command to evaluate a simple function and map the error (in case of exception)\n        let attempt (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to issue a specific message\n        let result (msg:'msg) : Cmd<'msg> =\n            [fun dispatch -> dispatch msg]\n\n    module OfAsync =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let either (task: 'a -> Async<_>)\n                   (arg: 'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    dispatch (match r with\n                             | Choice1Of2 x -> ofSuccess x\n                             | Choice2Of2 x -> ofError x)\n                }\n            [bind >> Async.StartImmediate]\n\n        /// Command that will evaluate an async block and map the success\n        let perform (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice1Of2 x -> dispatch (ofSuccess x)\n                    | _ -> ()\n                }\n            [bind >> Async.StartImmediate]\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let attempt (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice2Of2 x -> dispatch (ofError x)\n                    | _ -> ()\n                }\n            [bind >> Async.StartImmediate]\n\n        /// Command that will evaluate an async block to the message\n        let result (task: Async<'msg>)  : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task |> Async.Catch\n                    match r with\n                    | Choice1Of2 x -> dispatch x\n                    | _ -> ()\n                }\n            [bind >> Async.StartImmediate]\n\n#if FABLE_COMPILER\n    module OfPromise =\n        /// Command to call `promise` block and map the results\n        let either (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the success\n        let perform (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg) =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the error\n        let attempt (task: 'a -> Fable.Core.JS.Promise<_>)\n                    (arg:'a)\n                    (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to dispatch the `promise` result\n        let result (task: Fable.Core.JS.Promise<'msg>) =\n            let bind dispatch =\n                task.``then`` dispatch\n                |> ignore\n            [bind]\n\n    [<Obsolete(\"Use `OfPromise.either` instead\")>]\n    let inline ofPromise (task: 'a -> Fable.Core.JS.Promise<_>)\n                         (arg:'a)\n                         (ofSuccess: _ -> 'msg)\n                         (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfPromise.either task arg ofSuccess ofError                     \n#else\n    open System.Threading.Tasks\n    module OfTask =\n        /// Command to call a task and map the results\n        let inline either (task: 'a -> Task<_>)\n                          (arg:'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.either (task >> Async.AwaitTask) arg ofSuccess ofError\n\n        /// Command to call a task and map the success\n        let inline perform (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.perform (task >> Async.AwaitTask) arg ofSuccess\n\n        /// Command to call a task and map the error\n        let inline attempt (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.attempt (task >> Async.AwaitTask) arg ofError\n\n        /// Command and map the task success\n        let inline result (task: Task<'msg>) : Cmd<'msg> =\n            OfAsync.result (task |> Async.AwaitTask)\n\n    [<Obsolete(\"Use OfTask.either instead\")>]\n    let inline ofTask (task: 'a -> Task<_>)\n                      (arg:'a)\n                      (ofSuccess: _ -> 'msg)\n                      (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfTask.either task arg ofSuccess ofError\n#endif\n\n    // Synonymous with `OfFunc.result`, may be removed in the future\n    let inline ofMsg (msg:'msg) : Cmd<'msg> =\n        OfFunc.result msg\n\n    [<Obsolete(\"Use `Cmd.OfAsync.either` instead\")>]\n    let inline ofAsync (task: 'a -> Async<_>)\n                       (arg: 'a)\n                       (ofSuccess: _ -> 'msg)\n                       (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfAsync.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.either` instead\")>]\n    let inline ofFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.perform` instead\")>]\n    let inline performFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.perform task arg ofSuccess\n\n    [<Obsolete(\"Use `Cmd.OfFunc.attempt` instead\")>]\n    let attemptFunc (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.attempt task arg ofError\n\n","namespace Elmish.React\n\n[<AutoOpen>]\nmodule Helpers =\n    open Fable.React.Props\n    open Fable.Core.JsInterop\n\n    /// `Ref` callback that sets the value of an input textbox after DOM element is created.\n    /// Can be used instead of `DefaultValue` and `Value` props to override input box value.\n    let inline valueOrDefault value =\n        Ref <| (fun e -> if e |> isNull |> not && !!e?value <> !!value then e?value <- !!value)\n\n[<RequireQualifiedAccess>]\nmodule Program =\n\n    module Internal =\n\n        open Fable.React\n        open Browser\n        open Elmish\n\n        let withReactBatchedUsing lazyView2With placeholderId (program:Program<_,_,_,_>) =\n            let mutable lastRequest = None\n            let setState model dispatch =\n                match lastRequest with\n                | Some r -> window.cancelAnimationFrame r\n                | _ -> ()\n\n                lastRequest <- Some (window.requestAnimationFrame (fun _ ->\n                    ReactDom.render(\n                        lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                        document.getElementById placeholderId\n                    )))\n\n            program\n            |> Program.withSetState setState\n\n        let withReactSynchronousUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.render(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n        let withReactHydrateUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.hydrate(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// Uses `requestAnimationFrame` to batch updates to prevent drops in frame rate.\n    /// NOTE: This may have unexpected effects in React controlled inputs, see https://github.com/elmish/react/issues/12\n    let withReactBatched placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// New renders are triggered immediately after an update.\n    let withReactSynchronous placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactBatched\")>]\n    let withReact placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactSynchronous\")>]\n    let withReactUnoptimized placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId using `React.hydrate`.\n    let withReactHydrate placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactHydrateUsing lazyView2With placeholderId program\n","(** Custom navigation\n------\nThis port of the Elm library is about treating the address bar as an input to your program.\nIt converts changes in the address bar into messages and provides functions for manipulation of the browser history.\n*)\nnamespace Elmish.Navigation\n\nopen Browser\nopen Browser.Types\nopen Elmish\n\n(**\n#### Parser\nA function to turn the string in the address bar into data that is easier for your app to handle.\n*)\ntype Parser<'a> = Location -> 'a\n\ntype Navigable<'msg> =\n    | Change of Location\n    | UserMsg of 'msg\n\n(**\n#### Direct history manipulation\n*)\n[<RequireQualifiedAccess>]\nmodule Navigation =\n    let [<Literal>] internal NavigatedEvent = \"NavigatedEvent\"\n\n    /// Modify current location\n    let modifyUrl (newUrl:string):Cmd<_> =\n        [fun _ -> history.replaceState((), \"\", newUrl)]\n\n    /// Push new location into history and navigate there\n    let newUrl (newUrl:string):Cmd<_> =\n        [fun _ -> history.pushState((), \"\", newUrl)\n                  let ev = CustomEvent.Create(NavigatedEvent)\n                  window.dispatchEvent ev\n                  |> ignore ]\n\n    /// Jump to some point in history (positve=forward, nagative=backward)\n    let jump (n:int):Cmd<_> =\n        [fun _ -> history.go n]\n\n\n(**\n#### Program extensions\nTreat user's program as a child component, by wrapping it and handling navigation events.\n*)\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\n[<RequireQualifiedAccess>]\nmodule Program =\n\n    module Internal =\n        let mutable private onChangeRef : obj -> obj =\n            fun _ ->\n                failwith \"`onChangeRef` has not been itialized.\\nPlease make sure you used Elmish.Browser.Navigation.Program.Internal.subscribe\"\n\n        let subscribe (dispatch:Dispatch<_ Navigable>) =\n            let mutable lastLocation = None\n            let onChange _ =\n                match lastLocation with\n                | Some href when href = window.location.href -> ()\n                | _ ->\n                    lastLocation <- Some window.location.href\n                    Change window.location |> dispatch\n                |> box\n\n            onChangeRef <- onChange\n\n            window.addEventListener(\"popstate\", unbox onChangeRef)\n            window.addEventListener(\"hashchange\", unbox onChangeRef)\n            window.addEventListener(Navigation.NavigatedEvent, unbox onChangeRef)\n\n        let unsubscribe () =\n            window.removeEventListener(\"popstate\", unbox onChangeRef)\n            window.removeEventListener(\"hashchange\", unbox onChangeRef)\n            window.removeEventListener(Navigation.NavigatedEvent, unbox onChangeRef)\n\n        let toNavigableWith (parser : Parser<'a>)\n                            (urlUpdate : 'a->'model->('model * Cmd<'msg>))\n                            (program : Program<'a,'model,'msg,'view>)\n                            (onLocationChange : Dispatch<Navigable<'msg>> -> unit) =\n\n            let map (model, cmd) =\n                model, cmd |> Cmd.map UserMsg\n\n            let update userUpdate msg model =\n                match msg with\n                | Change location ->\n                    urlUpdate (parser location) model\n                | UserMsg userMsg ->\n                    userUpdate userMsg model\n                |> map\n\n            let subs userSubscribe model =\n                Cmd.batch\n                  [ [ onLocationChange ]\n                    userSubscribe model |> Cmd.map UserMsg ]\n\n            let init userInit () =\n                userInit (parser window.location) |> map\n\n            let setState userSetState model dispatch =\n                userSetState model (UserMsg >> dispatch)\n\n            let view userView model dispatch =\n                userView model (UserMsg >> dispatch)\n            \n            program\n            |> Program.map init update view setState subs\n\n    /// Add the navigation to a program made with `mkProgram` or `mkSimple`.\n    /// urlUpdate: similar to `update` function, but receives parsed url instead of message as an input.\n    let toNavigable (parser : Parser<'a>)\n                    (urlUpdate : 'a->'model->('model * Cmd<'msg>))\n                    (program : Program<'a,'model,'msg,'view>) =\n\n        Internal.toNavigableWith parser urlUpdate program Internal.subscribe\n","module App\r\n\r\nopen Elmish\r\nopen Elmish.Navigation\r\nopen Elmish.Streams\r\nopen Elmish.UrlParser\r\nopen Fable.Elmish.Nile\r\nopen Fable.Core.JsInterop\r\nopen FSharp.Control\r\nopen Fulma\r\nopen ParseWorksheet\r\nopen Thoth.Fetch\r\nopen Thoth.Json\r\n\r\nimportAll \"../sass/main.sass\"\r\n\r\ntype Page =\r\n    | Achtkampf\r\n\r\nlet toHash page =\r\n    match page with\r\n    | Achtkampf -> \"#achtkampf\"\r\n\r\nlet pageParser =\r\n    oneOf [\r\n        map Achtkampf (s \"achtkampf\")\r\n    ]\r\n\r\ntype Msg =\r\n    | AchtkampfMsg of Achtkampf.Msg\r\n\r\ntype NavigationError =\r\n    | InvalidUrl\r\n\r\ntype Model = {\r\n    CurrentPage: Result<Page, NavigationError>\r\n    Achtkampf: Achtkampf.Model\r\n}\r\n\r\nlet urlUpdate (result : Page option) model =\r\n    match result with\r\n    | None ->\r\n        { model with CurrentPage = Error InvalidUrl }\r\n    | Some page ->\r\n        { model with CurrentPage = Ok page }\r\n\r\nlet init result =\r\n    { CurrentPage = Ok Achtkampf; Achtkampf = Achtkampf.init }\r\n    |> urlUpdate result\r\n\r\nlet update msg model =\r\n    match msg with\r\n    | AchtkampfMsg msg -> { model with Achtkampf = Achtkampf.update msg model.Achtkampf }\r\n\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\nlet view model dispatch =\r\n    let header =\r\n        Navbar.navbar [] [\r\n            Navbar.Brand.div [] [\r\n                Navbar.Item.a [ Navbar.Item.Props [ Href \"#\" ] ]\r\n                    [ img [ Style [ Width \"5em\" ]\r\n                            Src \"img/logo_with_bg.svg\" ] ]\r\n            ]\r\n            Navbar.Start.div [] [\r\n                Navbar.Item.a [ Navbar.Item.IsTab; Navbar.Item.IsActive true ] [ str \"Achtkampf 💪\" ]\r\n            ]\r\n        ]\r\n\r\n    div [] [\r\n        yield header\r\n        yield! Achtkampf.view model.Achtkampf (AchtkampfMsg >> dispatch)\r\n    ]\r\n\r\nlet stream states msgs =\r\n    let navigationErrors =\r\n        states\r\n        |> AsyncRx.map (snd >> fun state -> state.CurrentPage)\r\n        |> AsyncRx.distinctUntilChanged\r\n        |> AsyncRx.choose (function\r\n            | Error InvalidUrl -> Some ()\r\n            | _ -> None\r\n        )\r\n    let navigationPages =\r\n        states\r\n        |> AsyncRx.map (snd >> fun state -> state.CurrentPage)\r\n        |> AsyncRx.distinctUntilChanged\r\n        |> AsyncRx.choose (function\r\n            | Ok page -> Some page\r\n            | _ -> None\r\n        )\r\n        |> AsyncRx.startWith [ Achtkampf ]\r\n    let modifyUrl url =\r\n        AsyncRx.flatMapLatest (fun e ->\r\n            AsyncRx.create (fun observer -> async {\r\n                Navigation.modifyUrl url\r\n                |> List.iter (fun sub -> sub (observer.OnNextAsync >> Async.StartImmediate))\r\n                return AsyncDisposable.Empty\r\n            })\r\n        )\r\n\r\n    [\r\n        navigationPages\r\n        |> AsyncRx.flatMapLatest (fun page ->\r\n            navigationErrors\r\n            |> modifyUrl (toHash page)\r\n        )\r\n\r\n        (\r\n            states\r\n            |> AsyncRx.choose (fun (msg, state) ->\r\n                match msg with\r\n                | None -> Some (None, state.Achtkampf)\r\n                | Some (AchtkampfMsg msg) -> Some (Some msg, state.Achtkampf)\r\n            ),\r\n            msgs |> AsyncRx.choose (function | AchtkampfMsg msg -> Some msg)\r\n        )\r\n        ||> Achtkampf.stream\r\n        |> AsyncRx.map AchtkampfMsg\r\n    ]\r\n    |> AsyncRx.mergeSeq\r\n\r\nopen Elmish.React\r\nopen Elmish.Debug\r\nopen Elmish.HMR\r\n\r\n// App\r\nProgram.mkSimple init update view\r\n|> Program.withStream stream\r\n|> Program.toNavigable (parseHash pageParser) (fun p m -> urlUpdate p m, Cmd.none)\r\n#if DEBUG\r\n|> Program.withDebugger\r\n|> Program.withConsoleTrace\r\n#endif\r\n|> Program.withReactBatched \"elmish-app\"\r\n|> Program.run\r\n"],"sourceRoot":""}